on:
  workflow_call:
    inputs:
      setup:
        type: string
        required: true
      architecture:
        type: string
        required: false
        default: 'all'
        description: 'Run only on specific architecture'
  workflow_dispatch:
    inputs:
      setup:
        type: choice
        options:
          - benchmarks-all
          - benchmarks-default
          - bm-basics-int8-single
          - bm-basics-fp32-single
          - bm-basics-fp32-multi
          - bm-basics-fp64-single
          - bm-basics-fp64-multi
          - bm-basics-bf16-single
          - bm-basics-bf16-multi
          - bm-basics-fp16-single
          - bm-basics-fp16-multi
          - bm-batch-iter-fp32-single
          - bm-batch-iter-fp32-multi
          - bm-batch-iter-fp64-single
          - bm-batch-iter-fp64-multi
          - bm-batch-iter-bf16-single
          - bm-batch-iter-bf16-multi
          - bm-batch-iter-fp16-single
          - bm-batch-iter-fp16-multi
          - bm-updated-fp32-single
          - bm-spaces
        description: 'Benchmarks set to run'
        default: benchmarks-all
      architecture:
          type: choice
          options:
            - all
            - arm64
            - x86_64
          description: 'Run only on specific architecture'
          default: 'all'

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - name: Set matrix
        id: set-matrix
        run: |
          # Define the full matrix as a JSON string
          FULL_MATRIX='
          {
            "include": [
              {
                "architecture": "arm64",
                "instance-type": "c6g.xlarge",
                "ami-id": "ami-0375de6ea0af17f87",
                "region": "us-west-2",
                "subnet-id": "subnet-880013ed",
                "security-group-id": "sg-8693a7fe"
              },
              {
                "architecture": "arm64",
                "instance-type": "i8g.xlarge",
                "ami-id": "ami-0375de6ea0af17f87",
                "region": "us-west-2",
                "subnet-id": "subnet-880013ed",
                "security-group-id": "sg-8693a7fe"
              },
              {
                "architecture": "x86_64",
                "instance-type": "r7i.xlarge",
                "ami-id": "ami-0ba430d4b7b64de57",
                "region": "eu-west-1",
                "subnet-id": "${{ secrets.SUBNET_ID }}",
                "security-group-id": "${{ secrets.SECURITY_GROUP_ID }}"
              }
            ]
          }
          '
          
          # Filter the matrix based on architecture
          if [ "${{ inputs.architecture }}" = "all" ]; then
            # Use the full matrix
            FILTERED_MATRIX="$FULL_MATRIX"
          else
            # Filter to only the selected architecture
            FILTERED_MATRIX=$(echo "$FULL_MATRIX" | jq -c '{include: [.include[] | select(.architecture == "${{ inputs.architecture }}") ]}')
          fi
          
          # Escape any quotes in the JSON
          ESCAPED_MATRIX=$(echo "$FILTERED_MATRIX" | jq -c | sed 's/"/\\"/g')
          
          # Set the output
          echo "matrix=$ESCAPED_MATRIX" >> $GITHUB_OUTPUT

  run_benchmarks:
    name: Run ${{ matrix.architecture }} benchmarks
    needs: generate_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}
    steps:
      - name: Run benchmarks
        uses: ./.github/workflows/benchmark-runner.yml
        with:
          setup: ${{ inputs.setup }}
          aws-region: ${{ matrix.region }}
          architecture: ${{ matrix.architecture }}
          instance-type: ${{ matrix.instance-type }}
          ami-id: ${{ matrix.ami-id }}
          subnet-id: ${{ matrix.subnet-id }}
          security-group-id: ${{ matrix.security-group-id }}
          github-runner-label: ${{ matrix.architecture }}-${{ matrix.instance-type }}-${{ github.run_id }}
import heapq
import numpy as np
import time
from VecSim import *
import h5py
from functools import reduce


class MultiWeightedTopKQuery:
    def __init__(self, indexes, queries, weights, k, step=1):
        self.indexes = indexes
        self.queries = queries
        self.weights = weights
        self.k = k
        self.step = step
        self.bf_results = None
        self.bf_computation_time = None
        self.combined_knn_top_results = None
        self.combined_knn_computation_time = None
        self.combined_knn_top_results = None
        self.combined_knn_computation_time = None
        self.threshold = None
        self.combined_range_query_top_results = None
        self.combined_range_query_computation_time = None

    def compute_bf_results(self):
        start = time.time()
        h = []  # min-heap (priority queue), use -1*score as the priority
        for i in range(0, self.indexes[0].index_size(), self.step):
            combined_score = 0
            for j in range(len(self.indexes)):
                combined_score += self.weights[j] * self.indexes[j].get_distance_from(self.queries[j], i)
            if len(h) < self.k:
                heapq.heappush(h, (-combined_score, i))
            elif -h[0][0] > combined_score:
                heapq.heapreplace(h, (-combined_score, i))
        end = time.time()
        # for e in h:
        #     print(f"combined score of {e[1]} is {-e[0]}")
        #     print(f"dbpedia score is {self.indexes[0].get_distance_from(self.queries[0], e[1])}")
        #     print(f"glove-50 score is {self.indexes[1].get_distance_from(self.queries[1], e[1])}")
        #     print(f"glove-200 score is {self.indexes[2].get_distance_from(self.queries[2], e[1])}")
        self.bf_results = h
        self.bf_computation_time = end-start

    def compute_recall(self, hnsw_res_ids, time_field):
        combined_scores = []
        start = time.time()
        for res in hnsw_res_ids:
            combined_score = 0
            for j in range(len(self.indexes)):
                combined_score += self.weights[j] * self.indexes[j].get_distance_from(self.queries[j], res)
            combined_scores.append(combined_score)
        end = time.time()
        time_field += end-start

        # measure recall of the HNSW results comparing to the BF results
        actual_res_ids = [res[1] for res in self.bf_results]
        correct = 0
        for res in hnsw_res_ids:
            for actual_res in actual_res_ids:
                if res == actual_res:
                    correct += 1
                    break

        return correct/self.k, combined_scores


# Load serialized HNSW index from file.
def create_index(params, index_file_name, use_flat=False, data_set=None):
    if use_flat:
        bf_params = BFParams()
        bf_params.initialCapacity = params.initialCapacity
        bf_params.dim = params.dim
        bf_params.type = VecSimType_FLOAT32
        bf_params.metric = VecSimMetric_Cosine
        bf_index = BFIndex(bf_params)

        for i, vector in enumerate(data_set):
            if i == 1000000:
                break
            bf_index.add_vector(vector, i)

        print(f"Created FLAT index from {index_file_name} data, index size is {bf_index.index_size()}.")
        return bf_index

    hnsw_index = HNSWIndex(params)
    hnsw_index.load_index(index_file_name)

    print(f"Loaded HNSW index from {index_file_name}, index size is {hnsw_index.index_size()}.")
    return hnsw_index


def load_index_and_test_set(dateset):
    file_name = "/home/alon/Code/VectorSimilarity/tests/benchmark/data/"+dateset
    if dateset != "dbpedia-768":
        file_name += "-angular"
    file_name += ".hdf5"
    return np.array(h5py.File(file_name, 'r')['train']), np.array(h5py.File(file_name, 'r')['test'])


def get_combined_top_k_results(query, r):
    start = time.time()
    total_res_ids = []
    for i in range(len(query.indexes)):
        res_index_ids, res_index_scores = query.indexes[i].knn_query(query.queries[i], r*query.k)
        total_res_ids.append(res_index_ids[0])
    total_res_ids = reduce(np.union1d, total_res_ids).tolist()
    end = time.time()
    query.combined_knn_computation_time = end-start

    recall, combined_scores = query.compute_recall(total_res_ids, query.combined_knn_computation_time)

    query.combined_knn_top_results = total_res_ids
    query.threshold = sorted(combined_scores)[query.k - 1]  # threshold for the upcoming range query
    # print(f"threshold is {query.threshold}")

    return recall


def get_combined_range_results(query, r, epsilon=0.01):

    query_params = None
    if epsilon is not None:
        query_params = VecSimQueryParams()
        query_params.hnswRuntimeParams.epsilon = epsilon

    start = time.time()
    total_res_ids = [np.array(query.combined_knn_top_results, dtype=np.uint32)]
    for i in range(len(query.indexes)):
        res_index_ids, res_index_scores = query.indexes[i].range_query(query.queries[i], r*query.threshold, query_params)
        total_res_ids.append(res_index_ids[0])
    total_res_ids = reduce(np.union1d, total_res_ids).tolist()
    end = time.time()

    query.combined_range_query_top_results = total_res_ids
    query.combined_range_query_computation_time = end-start
    recall, _ = query.compute_recall(total_res_ids, query.combined_range_query_computation_time)

    return recall


def get_combined_hybrid_results_in_batches(query, r):
    start = time.time()
    total_res_ids = []

    for i in range(len(query.indexes)):
        batch_size = query.k * r * query.step
        iterations = 0
        batch_iterator = query.indexes[i].create_batch_iterator(query.queries[i])
        res_ids = []
        # res_dists = []
        while batch_iterator.has_next() and len(res_ids) < r*query.k:
            iterations += 1
            labels, distances = batch_iterator.get_next_results(batch_size, BY_ID)

            # Filter out irrelevant ids (that are not a multiplication of <step>)
            for j, label in enumerate(labels[0]):
                if label % query.step == 0:
                    res_ids.append(label)
                    # res_dists.append(distances[0][j])
            res_left = r*query.k - len(res_ids)
            batch_size = res_left * query.step
        # print(f"got {len(res_ids)} results after {iterations} batches")

        total_res_ids.append(res_ids[:r*query.k])
    total_res_ids = reduce(np.union1d, total_res_ids).tolist()
    end = time.time()

    query.combined_knn_computation_time = end-start
    recall, combined_scores = query.compute_recall(total_res_ids, query.combined_knn_computation_time)

    query.combined_knn_top_results = total_res_ids
    query.threshold = sorted(combined_scores)[query.k - 1]  # threshold for the upcoming range query
    # print(f"threshold is {query.threshold}")

    return recall


def get_combined_hybrid_results_with_adhoc_bf(query, r):
    start = time.time()
    total_res_ids = []

    for i in range(0, len(query.indexes), 2):
        batch_size = query.k * r * query.step
        iterations = 0
        # batches_stats = []
        batch_iterator = query.indexes[i].create_batch_iterator(query.queries[i])
        res_ids = []
        while batch_iterator.has_next() and len(res_ids) < r*query.k:
            iterations += 1
            labels, distances = batch_iterator.get_next_results(batch_size, BY_ID)
            # Filter out irrelevant ids (that are not a multiplication of <step>)
            for label in labels[0]:
                if label % query.step == 0:
                    res_ids.append(label)
            # batches_stats.append((batch_size, len(res_ids)))
            res_left = r*query.k - len(res_ids)
            batch_size = res_left * query.step
        # print(f"got {len(res_ids)} results after {iterations} batches. Batches stats (batch_size, results match): {batches_stats}")
        total_res_ids.append(res_ids)

    glove_50_index = query.indexes[1]
    h = []  # min-heap (priority queue), use -1*score as the priority
    for i in range(0, glove_50_index.index_size(), query.step):
        score = glove_50_index.get_distance_from(query.queries[1], i)
        if len(h) < query.k * r:
            heapq.heappush(h, (-score, i))
        elif -h[0][0] > score:
            heapq.heapreplace(h, (-score, i))
    adhoc_res_ids = np.array([res[1] for res in h], dtype=np.uint32)
    total_res_ids.append(adhoc_res_ids)

    total_res_ids = reduce(np.union1d, total_res_ids).tolist()
    end = time.time()

    query.combined_knn_computation_time = end-start
    recall, combined_scores = query.compute_recall(total_res_ids, query.combined_knn_computation_time)

    query.combined_knn_top_results = total_res_ids
    query.threshold = sorted(combined_scores)[query.k - 1]  # threshold for the upcoming range query
    # print(f"threshold is {query.threshold}")

    return recall


def setup(data_sets, use_flat=False):
    test_sets = []
    dataset_size = 1000000

    # DBPedia #
    hnswparams = HNSWParams()
    hnswparams.M = 64
    hnswparams.efConstruction = 512
    hnswparams.initialCapacity = dataset_size
    hnswparams.efRuntime = 10
    hnswparams.dim = 768
    hnswparams.type = VecSimType_FLOAT32
    hnswparams.metric = VecSimMetric_Cosine

    data_set, test_set = load_index_and_test_set(data_sets[0])
    dbpedia_index = create_index(hnswparams,
                                 "/home/alon/Code/VectorSimilarity/tests/benchmark/data/DBpedia-n1M-cosine-d768-M64-EFC512.hnsw_v1")
    test_sets.append(test_set)

    # Glove-50 #
    hnswparams = HNSWParams()
    hnswparams.M = 24
    hnswparams.efConstruction = 150
    hnswparams.initialCapacity = dataset_size
    hnswparams.efRuntime = 200
    hnswparams.dim = 50
    hnswparams.type = VecSimType_FLOAT32
    hnswparams.metric = VecSimMetric_Cosine

    data_set, test_set = load_index_and_test_set(data_sets[1])
    glove_50_index = create_index(hnswparams, "/home/alon/Code/VectorSimilarity/tests/benchmark/data/glove-50-angular-M=24-ef=150-trimmed_to_1M.hnsw",
                                  use_flat=use_flat, data_set=data_set)
    # glove_50_index.save_index("tests/benchmark/data/glove-50-angular-M=24-ef=150-trimmed_to_1M.hnsw")
    test_sets.append(test_set)

    # Glove-200 #
    hnswparams = HNSWParams()
    hnswparams.M = 48
    hnswparams.efConstruction = 350
    hnswparams.initialCapacity = dataset_size
    hnswparams.efRuntime = 350
    hnswparams.dim = 200
    hnswparams.type = VecSimType_FLOAT32
    hnswparams.metric = VecSimMetric_Cosine

    data_set, test_set = load_index_and_test_set(data_sets[2])
    glove_200_index = create_index(hnswparams, "/home/alon/Code/VectorSimilarity/tests/benchmark/data/glove-200-angular-M=48-ef=350-trimmed_to_1M.hnsw")
    # glove_200_index.save_index("tests/benchmark/data/glove-200-angular-M=48-ef=350-trimmed_to_1M.hnsw")
    test_sets.append(test_set)

    print("3 Indexes loaded successfully\n")
    return [dbpedia_index, glove_50_index, glove_200_index], test_sets


def prepare_queries(indexes, weights, test_sets, num_queries, k, step=1):
    print(f"\nComputing BF results with step={step}...")
    queries = []
    total_time = 0
    for i in range(num_queries):
        q0 = test_sets[0][i]
        normalized_q0 = q0 / np.sqrt(np.sum(q0**2))
        q1 = test_sets[1][i]
        normalized_q1 = q1 / np.sqrt(np.sum(q1**2))
        q2 = test_sets[2][i]
        normalized_q2 = q2 / np.sqrt(np.sum(q2**2))

        query = MultiWeightedTopKQuery(indexes, [normalized_q0, normalized_q1, normalized_q2], weights, k, step)
        query.compute_bf_results()
        total_time += query.bf_computation_time
        queries.append(query)
    print(f"Computing BF results took an average time of {total_time/num_queries} per query")
    return queries


def run_standard_knn(vector_indexes, weights, test_sets, n_queries, k):
    print(f"Running {n_queries} queries with k={k}, weights are: {weights}")
    recalls = []
    times = []
    queries = prepare_queries(vector_indexes, weights, test_sets, n_queries, k)
    n_queries = len(queries)

    # Compute results for combined knn search only, for several values of r_knn
    for r_knn in range(1, 200):
        print(f"\n***Running knn - asking for {r_knn}*k results for every individual knn query***")
        total_recall = 0
        total_time = 0
        for query in queries:
            recall = get_combined_top_k_results(query, r_knn)
            total_time += query.combined_knn_computation_time
            total_recall += recall

        print(f"Computing with only knn took an average time of {total_time/n_queries} per query,"
              f" with avg. {total_recall/n_queries} recall")
        recalls.append(total_recall/n_queries)
        times.append(total_time/n_queries)
        # continue

        # Compute results for combined range query, where the range derive from the previous phase.
        for r_range in [0.7, 0.8, 0.9, 1]:
            print(f"\nRunning second phase: range query with radius={r_range}*threshold,"
                  f" where the threshold is the combined score of the k-th result (from the previous phase)")
            total_recall = 0
            total_time = 0
            total_res = 0
            for query in queries:
                recall = get_combined_range_results(query, r_range)
                total_recall += recall
                total_time += query.combined_range_query_computation_time + query.combined_knn_computation_time
                total_res += len(query.combined_range_query_top_results)

            print(f"Computing with range query took an average time of {total_time/n_queries} per query,"
                  f" with avg. res of {total_res/n_queries} and {total_recall/n_queries} recall")
    return recalls, times


def run_hybrid_search_batches(vector_indexes, weights, test_sets, n_queries, k, use_adhoc=False):
    print(f"Running {n_queries} queries with k={k}, weights are: {weights}")

    # for step in [2, 5, 10, 20]:
    times = []
    recalls = []
    for step in [5]:
        queries = prepare_queries(vector_indexes, weights, test_sets, n_queries, k, step=step)

        if step > 20:
            continue
        # Compute results for combined knn search only, for several values of r_knn
        # for r_knn in [1, 10, 100, int(200/step + step ** 0.75)]:
        for r_knn in range(1, 150):
        # for r_knn in [int(200/step + step)]:
            print(f"\n***Running hybrid search - asking for {r_knn}*k results for every individual knn query in batches***")
            total_recall = 0
            total_time = 0
            for query in queries:
                if not use_adhoc:
                    recall = get_combined_hybrid_results_in_batches(query, r_knn)
                else:
                    # print(f"Using ad-hoc BF for glove-50")
                    recall = get_combined_hybrid_results_with_adhoc_bf(query, r_knn)
                total_time += query.combined_knn_computation_time
                total_recall += recall

            print(f"Computing with only knn took an average time of {total_time/n_queries} per query,"
                  f" with avg. {total_recall/n_queries} recall")
            recalls.append(total_recall/n_queries)
            times.append(total_time/n_queries)
    return recalls, times


def show_plot():
    import matplotlib.pyplot as plt

    # hybrid, step=10 (r in range(1, 70))
    x = [0.43999999999999995, 0.5819999999999999, 0.6479999999999998, 0.7070000000000002, 0.7410000000000002, 0.7710000000000001, 0.8029999999999999, 0.8179999999999998, 0.8359999999999999, 0.8519999999999998, 0.8639999999999998, 0.873, 0.882, 0.8920000000000001, 0.9070000000000001, 0.9179999999999999, 0.9280000000000002, 0.9300000000000003, 0.9400000000000002, 0.9430000000000001, 0.9510000000000001, 0.9530000000000001, 0.9550000000000002, 0.9560000000000001, 0.9590000000000002, 0.9620000000000002, 0.9620000000000002, 0.9600000000000003, 0.9650000000000003, 0.9680000000000003, 0.9720000000000003, 0.9740000000000002, 0.9730000000000003, 0.9750000000000001, 0.977, 0.9780000000000001, 0.9800000000000001, 0.9800000000000001, 0.9810000000000001, 0.983, 0.983, 0.9840000000000001, 0.985, 0.985, 0.9840000000000001, 0.9860000000000001, 0.985, 0.9840000000000001, 0.985, 0.987, 0.9860000000000001, 0.9890000000000001, 0.987, 0.9869999999999999, 0.9880000000000001, 0.988, 0.987, 0.9869999999999999, 0.9869999999999999, 0.9890000000000001, 0.9890000000000001, 0.9880000000000001, 0.988, 0.988, 0.9890000000000001, 0.9870000000000002, 0.9880000000000001, 0.9890000000000001, 0.9890000000000001]
    y = [0.003781769275665283, 0.0066672682762145994, 0.009414756298065185, 0.0120383620262146, 0.014594800472259521, 0.01712512731552124, 0.019630463123321534, 0.02223547697067261, 0.02436218738555908, 0.026829144954681396, 0.028882038593292237, 0.03194656610488891, 0.03387172222137451, 0.036017684936523436, 0.03863662242889404, 0.04044860601425171, 0.04317600011825561, 0.04598421573638916, 0.04753003597259522, 0.04992443323135376, 0.05199896574020386, 0.05426592111587524, 0.05651784896850586, 0.058809309005737304, 0.060822973251342775, 0.06319687604904174, 0.06536550283432006, 0.06745255947113037, 0.07097924709320068, 0.07208431720733642, 0.07381507635116577, 0.07611261606216431, 0.07828782796859741, 0.08006294250488281, 0.08242913484573364, 0.08543623447418212, 0.08839464664459229, 0.09031195878982544, 0.09220672607421875, 0.09502588510513306, 0.09633694648742676, 0.09890390872955322, 0.10090566873550415, 0.10258650302886962, 0.10494122743606567, 0.10755698442459107, 0.10948271274566651, 0.1113429045677185, 0.11352120876312256, 0.11539821863174439, 0.1167369270324707, 0.11878511428833008, 0.12069103002548218, 0.12292293071746827, 0.1251275634765625, 0.1268303871154785, 0.1287005352973938, 0.13196497917175293, 0.1329917788505554, 0.13585213661193848, 0.13521400928497315, 0.13965583801269532, 0.14052431106567384, 0.14437421321868896, 0.14638649463653564, 0.14660032510757445, 0.14802035570144653, 0.15248968839645385, 0.15414470434188843]

    # hybrid, fixed r=200/step (step in range(1, 21))
    x = [0.985, 0.9670000000000001, 0.9640000000000001, 0.9490000000000001, 0.9430000000000001, 0.925, 0.91, 0.9050000000000001, 0.8969999999999998, 0.8830000000000002]
    y = [0.04996076583862305, 0.04977498292922974, 0.049366703033447264, 0.05080905437469482, 0.05062561511993408, 0.049113678932189944, 0.049786858558654785, 0.04940226316452026, 0.05102670431137085, 0.0514616060256958]

    # hybrid, fixed r=200/step + step (step in range(1, 21))
    x = [0.997, 0.9859999999999998, 0.9830000000000001, 0.9710000000000001, 0.9790000000000003, 0.9730000000000001, 0.968, 0.966, 0.9650000000000002, 0.9680000000000003, 0.965, 0.971, 0.9670000000000003, 0.9800000000000003, 0.9750000000000001, 0.976, 0.9690000000000002, 0.98, 0.9810000000000002, 0.9780000000000004]
    y = [0.049769926071166995, 0.05108361482620239, 0.052169311046600345, 0.05367526769638062, 0.055026566982269286, 0.05774698257446289, 0.06038965940475464, 0.06495430231094361, 0.06824514389038086, 0.0735445523262024, 0.07723722219467163, 0.08050459384918213, 0.08741666316986084, 0.09225944042205811, 0.09939958095550537, 0.10563993692398072, 0.1218005084991455, 0.12040050029754638, 0.12488272428512573, 0.13558174848556517]

    # knn (r in range(1,200))
    x = [0.3220000000000001, 0.44699999999999995, 0.525, 0.5700000000000002, 0.6110000000000001, 0.6459999999999999, 0.6680000000000001, 0.686, 0.7030000000000001, 0.726, 0.7389999999999999, 0.753, 0.764, 0.7789999999999999, 0.7890000000000001, 0.8009999999999999, 0.8119999999999998, 0.823, 0.828, 0.8340000000000001, 0.84, 0.8459999999999998, 0.8539999999999998, 0.8569999999999999, 0.861, 0.862, 0.8660000000000002, 0.8710000000000001, 0.8740000000000002, 0.8810000000000001, 0.8850000000000001, 0.8880000000000001, 0.889, 0.8930000000000001, 0.8960000000000001, 0.899, 0.899, 0.9010000000000001, 0.9060000000000001, 0.91, 0.9129999999999999, 0.9149999999999998, 0.917, 0.9179999999999999, 0.919, 0.9220000000000002, 0.924, 0.9259999999999999, 0.9279999999999999, 0.9279999999999999, 0.929, 0.93, 0.932, 0.9339999999999999, 0.9349999999999998, 0.9359999999999999, 0.938, 0.938, 0.94, 0.94, 0.94, 0.9410000000000001, 0.9430000000000001, 0.9430000000000001, 0.9440000000000001, 0.9480000000000001, 0.9490000000000001, 0.9510000000000001, 0.9530000000000001, 0.9540000000000001, 0.9540000000000001, 0.9580000000000001, 0.9600000000000002, 0.9610000000000001, 0.9610000000000001, 0.9610000000000001, 0.9620000000000002, 0.9630000000000001, 0.9630000000000001, 0.9630000000000001, 0.9660000000000001, 0.9660000000000001, 0.9660000000000001, 0.9660000000000001, 0.9660000000000001, 0.9670000000000001, 0.9670000000000001, 0.968, 0.968, 0.9690000000000002, 0.9690000000000002, 0.9690000000000002, 0.9700000000000002, 0.9710000000000001, 0.972, 0.973, 0.9740000000000001, 0.9750000000000001, 0.9750000000000001, 0.9760000000000002, 0.9760000000000002, 0.9760000000000002, 0.9770000000000002, 0.9790000000000001, 0.9800000000000001, 0.9800000000000001, 0.9800000000000001, 0.9800000000000001, 0.9800000000000001, 0.9800000000000001, 0.9810000000000001, 0.9810000000000001, 0.9820000000000002, 0.9820000000000002, 0.9820000000000002, 0.9820000000000002, 0.9820000000000002, 0.9830000000000001, 0.9840000000000002, 0.9850000000000001, 0.9860000000000001, 0.9860000000000001, 0.9860000000000001, 0.987, 0.987, 0.987, 0.9880000000000001, 0.9880000000000001, 0.9880000000000001, 0.9890000000000001, 0.9890000000000001, 0.9890000000000001, 0.9890000000000001, 0.9890000000000001, 0.9890000000000001, 0.9890000000000001, 0.9890000000000001, 0.99, 0.99, 0.9920000000000002, 0.9920000000000002, 0.9920000000000002, 0.9920000000000002, 0.9920000000000002, 0.9920000000000002, 0.9920000000000002, 0.9920000000000002, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.996, 0.996, 0.996, 0.996, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997]
    y = [0.0004993128776550293, 0.0007312488555908203, 0.0009705543518066407, 0.0011889958381652833, 0.001385815143585205, 0.001605074405670166, 0.0018074297904968261, 0.0020186591148376467, 0.0022160983085632324, 0.002402470111846924, 0.0025911521911621094, 0.0028104901313781737, 0.002991211414337158, 0.003179185390472412, 0.003366360664367676, 0.0036083579063415526, 0.0037511491775512693, 0.003928272724151611, 0.004124445915222168, 0.004301030635833741, 0.004493579864501953, 0.004666404724121094, 0.004836583137512207, 0.005051991939544678, 0.005204198360443116, 0.0053578376770019535, 0.005553762912750244, 0.005722725391387939, 0.005898299217224121, 0.006075425148010254, 0.006253407001495361, 0.006431169509887695, 0.006597499847412109, 0.006695325374603271, 0.006979973316192627, 0.007100543975830078, 0.0072899055480957035, 0.007460110187530518, 0.007652509212493897, 0.007839326858520507, 0.008085262775421143, 0.008127846717834473, 0.008312442302703858, 0.008498198986053467, 0.008664979934692382, 0.00880669116973877, 0.009026305675506592, 0.00915720224380493, 0.009314465522766113, 0.009484374523162841, 0.009631788730621338, 0.009827349185943603, 0.009966046810150146, 0.010148632526397704, 0.010298888683319091, 0.010472393035888672, 0.01064687967300415, 0.010793523788452148, 0.01096038579940796, 0.011300134658813476, 0.011341195106506347, 0.011621298789978028, 0.011633386611938476, 0.011995208263397217, 0.011970670223236083, 0.012137894630432128, 0.012382407188415528, 0.012479360103607178, 0.012572669982910156, 0.012846009731292725, 0.0128906512260437, 0.013075449466705323, 0.013207201957702636, 0.013446109294891357, 0.013575894832611084, 0.013688018321990967, 0.013925106525421142, 0.0140480637550354, 0.014182260036468506, 0.01452157735824585, 0.014756591320037841, 0.015116755962371825, 0.01548269271850586, 0.015472986698150636, 0.015702946186065672, 0.015792639255523683, 0.015986857414245607, 0.01608074426651001, 0.016263580322265624, 0.01644195318222046, 0.016534426212310792, 0.016269285678863526, 0.016422233581542968, 0.016777050495147706, 0.016810708045959473, 0.017062273025512695, 0.017225451469421386, 0.017405986785888672, 0.018045549392700196, 0.017677621841430666, 0.017740631103515626, 0.017889981269836427, 0.018012306690216064, 0.01826503038406372, 0.018500919342041015, 0.018485639095306396, 0.018596639633178712, 0.019204468727111818, 0.019418795108795166, 0.019611308574676512, 0.01969543218612671, 0.019917514324188233, 0.020185680389404298, 0.020508413314819337, 0.020410616397857666, 0.020466573238372802, 0.020764846801757813, 0.020887808799743654, 0.021049420833587646, 0.02101355791091919, 0.020741975307464598, 0.02095085144042969, 0.02101381778717041, 0.021169323921203614, 0.021511499881744386, 0.02154752492904663, 0.02210036516189575, 0.021840665340423584, 0.021932485103607176, 0.02258244752883911, 0.022491035461425782, 0.022496445178985594, 0.022638649940490724, 0.022750113010406494, 0.022853612899780273, 0.023373515605926515, 0.02335340976715088, 0.02343937158584595, 0.023625986576080324, 0.02384354829788208, 0.023946475982666016, 0.023986144065856932, 0.024438662528991698, 0.02471484661102295, 0.02488457679748535, 0.024913032054901123, 0.024836893081665038, 0.024993374347686767, 0.025127735137939453, 0.025087056159973146, 0.025401303768157957, 0.025306613445281984, 0.02544002056121826, 0.025556974411010742, 0.02569344997406006, 0.025848004817962646, 0.025980055332183838, 0.02614743947982788, 0.026489622592926025, 0.026682960987091064, 0.027162430286407472, 0.02692124605178833, 0.026881237030029297, 0.027018651962280274, 0.02745377779006958, 0.027416160106658937, 0.02746551275253296, 0.02760936975479126, 0.02772573709487915, 0.027881202697753907, 0.02800870418548584, 0.028161487579345702, 0.028318800926208497, 0.028597280979156495, 0.02861413240432739, 0.028937511444091797, 0.02883507013320923, 0.02903566837310791, 0.029233641624450683, 0.02923520565032959, 0.029400103092193604, 0.029556574821472167, 0.030025949478149416, 0.029942142963409423, 0.03004532814025879, 0.030182137489318847, 0.030505211353302003, 0.03048450708389282, 0.030622644424438475, 0.030770368576049804, 0.030908238887786866, 0.03111887216567993, 0.03121291160583496, 0.03134875774383545, 0.0314896035194397, 0.031645514965057374, 0.03177484035491943, 0.03196909189224243, 0.03244508266448975]

    # hybrid, step=2 (r in range(1, 150))
    x = [0.38099999999999995, 0.5020000000000002, 0.5840000000000001, 0.6339999999999999, 0.6639999999999999, 0.6899999999999997, 0.7099999999999997, 0.736, 0.7610000000000001, 0.7709999999999998, 0.7789999999999999, 0.7979999999999998, 0.8029999999999998, 0.8159999999999998, 0.8279999999999997, 0.8359999999999999, 0.8389999999999996, 0.8479999999999999, 0.856, 0.861, 0.871, 0.8789999999999999, 0.883, 0.8859999999999999, 0.8910000000000001, 0.892, 0.8990000000000002, 0.9000000000000001, 0.9000000000000002, 0.9060000000000001, 0.9050000000000001, 0.9079999999999999, 0.914, 0.9169999999999999, 0.919, 0.9240000000000002, 0.925, 0.9270000000000002, 0.9280000000000002, 0.9300000000000002, 0.934, 0.936, 0.935, 0.937, 0.936, 0.94, 0.9430000000000001, 0.9460000000000001, 0.9510000000000001, 0.9540000000000002, 0.9550000000000002, 0.9560000000000002, 0.9570000000000002, 0.9580000000000001, 0.9580000000000001, 0.9600000000000002, 0.9580000000000003, 0.9610000000000001, 0.9630000000000001, 0.9650000000000002, 0.9660000000000001, 0.9660000000000001, 0.9660000000000001, 0.9680000000000001, 0.972, 0.9710000000000001, 0.973, 0.973, 0.9760000000000001, 0.977, 0.978, 0.978, 0.978, 0.978, 0.977, 0.977, 0.9800000000000001, 0.9810000000000001, 0.9810000000000001, 0.9810000000000001, 0.9810000000000001, 0.982, 0.982, 0.9810000000000001, 0.9810000000000001, 0.982, 0.983, 0.982, 0.985, 0.985, 0.985, 0.986, 0.986, 0.986, 0.986, 0.985, 0.985, 0.985, 0.985, 0.985, 0.986, 0.9859999999999998, 0.987, 0.9869999999999999, 0.988, 0.988, 0.9889999999999999, 0.9889999999999999, 0.9889999999999999, 0.991, 0.991, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.991, 0.9899999999999999, 0.991, 0.991, 0.991, 0.991, 0.991, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.991, 0.991, 0.991, 0.9919999999999999, 0.9919999999999999, 0.993, 0.993, 0.993, 0.993, 0.9939999999999999, 0.9939999999999999, 0.993, 0.993, 0.993, 0.9939999999999999]
    y = [0.001120450496673584, 0.0017432522773742675, 0.002308785915374756, 0.002926051616668701, 0.0035094428062438965, 0.004173922538757324, 0.004619777202606201, 0.0051729798316955565, 0.00572683334350586, 0.006365814208984375, 0.006785168647766114, 0.007389905452728271, 0.007842483520507813, 0.00835951566696167, 0.009008593559265136, 0.009421348571777344, 0.010096614360809325, 0.010623722076416016, 0.011032323837280273, 0.01162714958190918, 0.012019963264465331, 0.012561092376708985, 0.0131388521194458, 0.013649075031280518, 0.014061214923858643, 0.014728231430053711, 0.015125608444213868, 0.01563915967941284, 0.016164338588714598, 0.016658110618591307, 0.01711453914642334, 0.017589874267578125, 0.018223180770874023, 0.018716907501220702, 0.019090161323547364, 0.01955875873565674, 0.020070762634277345, 0.020571727752685547, 0.02114492416381836, 0.021569106578826904, 0.02216630458831787, 0.022547574043273927, 0.022962768077850342, 0.023704292774200438, 0.024037494659423828, 0.02448322534561157, 0.024918692111968996, 0.025537238121032715, 0.026017086505889894, 0.02641610860824585, 0.02680673360824585, 0.02739506483078003, 0.02796471357345581, 0.028400909900665284, 0.028834166526794432, 0.029245986938476562, 0.029793539047241212, 0.03017618179321289, 0.030829031467437745, 0.031149001121520997, 0.031734144687652587, 0.03197759628295899, 0.03251873731613159, 0.033035378456115726, 0.03355483055114746, 0.03399793386459351, 0.03445947408676148, 0.0349165940284729, 0.03540959358215332, 0.035890052318573, 0.03656818151473999, 0.036951122283935545, 0.036961989402771, 0.037664604187011716, 0.03825578689575195, 0.038610830307006835, 0.03915956020355225, 0.039615256786346434, 0.03990222930908203, 0.04046698808670044, 0.04086511850357056, 0.041320226192474364, 0.041830015182495114, 0.042186732292175295, 0.042544169425964354, 0.04319800615310669, 0.043535635471343995, 0.044148657321929935, 0.04458581924438477, 0.04504779577255249, 0.04551405668258667, 0.04597614526748657, 0.046502809524536136, 0.046932554244995116, 0.04730247259140015, 0.04784722566604614, 0.04802299499511719, 0.048599953651428225, 0.04919903516769409, 0.0494390869140625, 0.05021053314208984, 0.0504254412651062, 0.05104762315750122, 0.05139423847198486, 0.05175904035568237, 0.05229837894439697, 0.05247033357620239, 0.05328161001205444, 0.05354122877120972, 0.05415088653564453, 0.05445403814315796, 0.05491108179092407, 0.05531118631362915, 0.05560686111450195, 0.05597994327545166, 0.05646327018737793, 0.05682389974594116, 0.0573268461227417, 0.05768168449401855, 0.058304469585418704, 0.0586234974861145, 0.05916837453842163, 0.059505953788757324, 0.05995810985565186, 0.06035243034362793, 0.06084589719772339, 0.06123353242874145, 0.061704974174499515, 0.062062835693359374, 0.062867751121521, 0.06343196868896485, 0.0637699031829834, 0.06435626745223999, 0.06456501722335815, 0.06508199691772461, 0.06543371438980103, 0.06594842433929443, 0.06641425609588623, 0.06675506591796875, 0.06737589836120605, 0.06764569520950317, 0.06824257612228393, 0.06866974592208862, 0.06890975713729858, 0.0695110535621643, 0.06980555295944214, 0.07028897762298585, 0.0706816554069519, 0.07105035305023194]

    # hybrid, step=5 (r in range(1, 150))
    x = [0.4400000000000002, 0.5469999999999997, 0.6119999999999999, 0.6549999999999998, 0.6839999999999997, 0.7130000000000001, 0.743, 0.7730000000000001, 0.7889999999999999, 0.8029999999999999, 0.8220000000000001, 0.833, 0.85, 0.8589999999999999, 0.8690000000000001, 0.8819999999999999, 0.8920000000000001, 0.8920000000000003, 0.8950000000000001, 0.9120000000000001, 0.9200000000000002, 0.9249999999999998, 0.9279999999999999, 0.929, 0.9309999999999999, 0.9329999999999999, 0.939, 0.941, 0.9469999999999998, 0.95, 0.958, 0.959, 0.959, 0.9609999999999999, 0.9620000000000001, 0.964, 0.97, 0.97, 0.9740000000000001, 0.975, 0.9770000000000002, 0.9800000000000003, 0.9790000000000003, 0.9780000000000002, 0.9790000000000003, 0.9790000000000003, 0.9800000000000003, 0.9840000000000002, 0.9820000000000002, 0.9850000000000003, 0.9860000000000002, 0.9880000000000001, 0.9880000000000001, 0.9890000000000002, 0.9880000000000001, 0.9880000000000002, 0.9910000000000002, 0.9920000000000002, 0.9930000000000001, 0.9930000000000001, 0.9940000000000001, 0.995, 0.9940000000000001, 0.9940000000000001, 0.9930000000000001, 0.9940000000000001, 0.9940000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9930000000000001, 0.9940000000000001, 0.995, 0.995, 0.995, 0.995, 0.9960000000000001, 0.9960000000000001, 0.995, 0.9960000000000001, 0.9960000000000001, 0.9960000000000001, 0.995, 0.996, 0.997, 0.997, 0.996, 0.995, 0.995, 0.9960000000000001, 0.9960000000000001, 0.997, 0.9980000000000001, 0.9980000000000001, 0.9990000000000001, 0.9990000000000001, 0.9980000000000001, 0.9980000000000001, 0.997, 0.997, 0.9980000000000001, 0.9980000000000001, 0.9990000000000001, 0.9990000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9970000000000002, 0.9990000000000001, 0.9970000000000002, 0.9980000000000001, 0.9980000000000001, 0.9990000000000001, 0.997, 0.997, 0.9980000000000001, 0.996, 0.996, 0.997, 0.997, 0.997, 0.996, 0.997, 0.9980000000000001, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.997, 0.997]
    y = [0.0023050403594970705, 0.003752162456512451, 0.005280859470367431, 0.006692328453063965, 0.007859199047088624, 0.00924091100692749, 0.010697677135467529, 0.012141931056976318, 0.013311288356781005, 0.014502019882202148, 0.015755586624145508, 0.017218670845031737, 0.018273611068725586, 0.019597384929656982, 0.020913734436035156, 0.021632437705993653, 0.022976336479187013, 0.02404085636138916, 0.025239973068237304, 0.02656240463256836, 0.027936713695526125, 0.029050691127777098, 0.030131638050079346, 0.03128865480422974, 0.03341692447662353, 0.03401626348495483, 0.03528288364410401, 0.03652611255645752, 0.03756088256835938, 0.03872594833374023, 0.039855270385742186, 0.04096855878829956, 0.04222836971282959, 0.043377962112426754, 0.04440959215164184, 0.04567617177963257, 0.047369680404663085, 0.04775437593460083, 0.04935042381286621, 0.05015121698379517, 0.05118752479553223, 0.05202078580856323, 0.05310314893722534, 0.05557188749313355, 0.0566646671295166, 0.05763751745223999, 0.05720576763153076, 0.05779388666152954, 0.05922145843505859, 0.06043294429779053, 0.06087480783462525, 0.06248009443283081, 0.06380597829818725, 0.06468605279922485, 0.06734009742736817, 0.06770878791809082, 0.06769824266433716, 0.06960993051528931, 0.07032754182815552, 0.07147449254989624, 0.07211729764938354, 0.07357028484344483, 0.07454731464385986, 0.07521015644073487, 0.07642878770828247, 0.07752985000610352, 0.07883166551589965, 0.07948068618774413, 0.08051668405532837, 0.08207175970077514, 0.08335339784622192, 0.08459548711776733, 0.08511242389678955, 0.08629746437072754, 0.08796428442001343, 0.08821923017501831, 0.0902538800239563, 0.09138362169265747, 0.09205968379974365, 0.09196083545684815, 0.09873419284820556, 0.09754858493804931, 0.09670823574066162, 0.10090569972991943, 0.09810753345489502, 0.09857667446136474, 0.0996294617652893, 0.10069263935089111, 0.10229700326919555, 0.10230823993682861, 0.10315928459167481, 0.10384145498275757, 0.10485952138900757, 0.10590221643447877, 0.10670546054840088, 0.10763307094573975, 0.10889462232589722, 0.11004416704177857, 0.11141126394271851, 0.11215794324874878, 0.11367905855178834, 0.11419546842575073, 0.11534497499465943, 0.11592402935028076, 0.11731895208358764, 0.11825128316879273, 0.1194533896446228, 0.12050428867340088, 0.12310722589492798, 0.12551046371459962, 0.12604452848434447, 0.1265826678276062, 0.12729838609695435, 0.1288246965408325, 0.1296953535079956, 0.14048321962356566, 0.1319434380531311, 0.13135204553604127, 0.13111844062805175, 0.13257277965545655, 0.13364853858947753, 0.1343538284301758, 0.13496490478515624, 0.1363472580909729, 0.13691195726394653, 0.13875585794448853, 0.1423286271095276, 0.14505711317062378, 0.14224596023559571, 0.14470712900161742, 0.14429458379745483, 0.14691568851470949, 0.1487566924095154, 0.14780989646911621, 0.1504828715324402, 0.15170583963394166, 0.15543970584869385, 0.1552477741241455, 0.15794087171554566, 0.15514642477035523, 0.1557455825805664, 0.1572032856941223, 0.15847995281219482, 0.15945849180221558, 0.15871541023254396, 0.1600556755065918, 0.16088173866271974, 0.15937939882278443, 0.15988903045654296]

    # knn with BF (r in range(1,200))
    x_with_flat = [0.35900000000000015, 0.47399999999999987, 0.55, 0.5890000000000001, 0.634, 0.6679999999999999, 0.6860000000000003, 0.7040000000000002, 0.7170000000000002, 0.738, 0.748, 0.7660000000000001, 0.7779999999999998, 0.7899999999999998, 0.8009999999999998, 0.8109999999999998, 0.818, 0.8330000000000001, 0.8370000000000002, 0.8450000000000003, 0.8500000000000003, 0.8570000000000002, 0.866, 0.868, 0.8740000000000001, 0.8770000000000002, 0.8800000000000001, 0.8850000000000001, 0.8880000000000001, 0.8960000000000001, 0.9000000000000001, 0.9010000000000001, 0.903, 0.9059999999999999, 0.9079999999999998, 0.9109999999999998, 0.9109999999999998, 0.9109999999999998, 0.9159999999999998, 0.9189999999999998, 0.9219999999999997, 0.9229999999999998, 0.9249999999999998, 0.9249999999999998, 0.9259999999999999, 0.9289999999999999, 0.9319999999999999, 0.9319999999999999, 0.9339999999999999, 0.9339999999999999, 0.9349999999999998, 0.9379999999999998, 0.939, 0.9409999999999998, 0.9419999999999997, 0.9429999999999997, 0.9459999999999998, 0.9469999999999997, 0.9479999999999998, 0.9479999999999998, 0.9479999999999998, 0.949, 0.949, 0.949, 0.9499999999999998, 0.954, 0.9549999999999998, 0.9569999999999999, 0.959, 0.959, 0.959, 0.9630000000000001, 0.9650000000000002, 0.9660000000000001, 0.9670000000000001, 0.9670000000000001, 0.9680000000000001, 0.9690000000000002, 0.9700000000000002, 0.9700000000000002, 0.9700000000000002, 0.9700000000000002, 0.9700000000000002, 0.9700000000000002, 0.9700000000000002, 0.9700000000000002, 0.9710000000000001, 0.972, 0.9730000000000001, 0.9730000000000001, 0.9740000000000001, 0.9740000000000001, 0.9740000000000001, 0.9750000000000001, 0.9750000000000001, 0.9750000000000001, 0.9760000000000002, 0.9760000000000002, 0.9760000000000002, 0.9770000000000002, 0.9770000000000002, 0.9770000000000002, 0.9790000000000002, 0.9800000000000001, 0.9810000000000001, 0.9820000000000002, 0.9820000000000002, 0.9820000000000002, 0.9820000000000002, 0.9820000000000002, 0.9820000000000002, 0.9820000000000002, 0.9830000000000001, 0.9840000000000001, 0.9840000000000001, 0.9840000000000001, 0.9840000000000001, 0.9850000000000001, 0.9860000000000002, 0.9860000000000002, 0.9870000000000002, 0.9870000000000002, 0.9870000000000002, 0.9870000000000002, 0.9870000000000002, 0.9870000000000002, 0.9870000000000002, 0.9870000000000002, 0.9870000000000002, 0.9880000000000001, 0.9880000000000001, 0.9880000000000001, 0.9890000000000001, 0.9900000000000001, 0.9910000000000001, 0.9910000000000001, 0.9910000000000001, 0.9920000000000002, 0.9920000000000002, 0.9940000000000001, 0.9940000000000001, 0.9940000000000001, 0.9940000000000001, 0.9940000000000001, 0.9940000000000001, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.995, 0.996, 0.996, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.998, 0.9990000000000001, 0.9990000000000001]
    y_with_flat = [0.02274684429168701, 0.024191889762878418, 0.02303260564804077, 0.023778886795043946, 0.02486616849899292, 0.02387477397918701, 0.02422159433364868, 0.024719274044036864, 0.02579000234603882, 0.02529402494430542, 0.025473704338073732, 0.025196216106414794, 0.02564417362213135, 0.025866594314575195, 0.02622377872467041, 0.026585178375244142, 0.027273480892181397, 0.027482209205627443, 0.02733264446258545, 0.027784531116485597, 0.027939302921295164, 0.028213253021240236, 0.02801422357559204, 0.027941098213195802, 0.02802273988723755, 0.028553221225738525, 0.028231992721557617, 0.028777666091918945, 0.028797190189361572, 0.028981056213378906, 0.0291209077835083, 0.029461822509765624, 0.029446520805358888, 0.030252745151519777, 0.030186476707458495, 0.030048141479492186, 0.031132087707519532, 0.03103116750717163, 0.0312016224861145, 0.031925241947174075, 0.031472477912902835, 0.03223833084106445, 0.032026159763336184, 0.03202612161636353, 0.0325702691078186, 0.03232218027114868, 0.03280301570892334, 0.032787187099456785, 0.03297589540481567, 0.03301124811172485, 0.03311135530471802, 0.03326498031616211, 0.03342774391174316, 0.03356345415115356, 0.03394517183303833, 0.03427706718444824, 0.034049487113952635, 0.03422977209091187, 0.03441058874130249, 0.03473110675811768, 0.03457241773605347, 0.03509066343307495, 0.03495333194732666, 0.03527623891830444, 0.035436487197875975, 0.035412378311157226, 0.035725657939910886, 0.03588802814483642, 0.03585829496383667, 0.036474356651306154, 0.03635911226272583, 0.036405980587005615, 0.03675091028213501, 0.036882820129394533, 0.0370249342918396, 0.03723501443862915, 0.037331697940826414, 0.03737508773803711, 0.03738440990447998, 0.03769479036331177, 0.03771231889724731, 0.037855174541473385, 0.038292143344879154, 0.03833501100540161, 0.039345626831054685, 0.03876181125640869, 0.03891156911849976, 0.03917314052581787, 0.03917463779449463, 0.03941112279891968, 0.039332964420318604, 0.039646618366241455, 0.03972536325454712, 0.03975961923599243, 0.040034427642822265, 0.03990259408950805, 0.04022167205810547, 0.04050938129425049, 0.040356056690216066, 0.04089711904525757, 0.04094036102294922, 0.041004362106323244, 0.04116266012191772, 0.04146371841430664, 0.04174656391143799, 0.041913962364196776, 0.04209835529327392, 0.042609724998474124, 0.04234887599945068, 0.042185966968536374, 0.0427565598487854, 0.04250874519348145, 0.042675788402557376, 0.04278465986251831, 0.04297680854797363, 0.04322354555130005, 0.04331023931503296, 0.04352825403213501, 0.043618834018707274, 0.04385688543319702, 0.044043173789978025, 0.044406211376190184, 0.04442065477371216, 0.04469223499298096, 0.044790334701538086, 0.04476803064346314, 0.044803998470306396, 0.04502890348434448, 0.04507499933242798, 0.045384211540222166, 0.045622193813323976, 0.04568683862686157, 0.045551304817199705, 0.04609091997146606, 0.045895884037017824, 0.04608153581619263, 0.046382575035095214, 0.04703326940536499, 0.04673927783966064, 0.046975808143615724, 0.046885957717895506, 0.047271878719329835, 0.04710092782974243, 0.04747555494308472, 0.04750001668930054, 0.047561705112457275, 0.04777366161346436, 0.04806485652923584, 0.04811765432357788, 0.04812589406967163, 0.048531877994537356, 0.048597345352172854, 0.04894963502883911, 0.04866174221038819, 0.048936216831207274, 0.04930761814117432, 0.04906383514404297, 0.04921781778335571, 0.04930351734161377, 0.049622042179107664, 0.04946916341781616, 0.04977842092514038, 0.049986813068389896, 0.05008519172668457, 0.05038193702697754, 0.05030127048492432, 0.05067166090011597, 0.05091423988342285, 0.050773611068725584, 0.05093607902526855, 0.051099860668182374, 0.05124515056610107, 0.051405246257781985, 0.05176657915115356, 0.0519975757598877, 0.05190773010253906, 0.052043836116790775, 0.05209728717803955, 0.05232884407043457, 0.05243406295776367, 0.05269202470779419, 0.05283301830291748, 0.05298926591873169, 0.05314739227294922, 0.05337271213531494, 0.05328951835632324, 0.05348679542541504, 0.05334429025650025, 0.053578701019287106, 0.05362902641296387, 0.05392208337783813, 0.05423380851745605, 0.05460074901580811, 0.05443473577499389, 0.05470576047897339, 0.05453896045684815, 0.0548264741897583, 0.05486898899078369, 0.05495864152908325]

    # hybrid with BF, step=2 (r in range(1, 150))
    x_with_flat = [0.389, 0.5110000000000001, 0.595, 0.6469999999999999, 0.6890000000000001, 0.7150000000000002, 0.727, 0.7510000000000001, 0.7709999999999999, 0.7849999999999998, 0.7919999999999997, 0.804, 0.814, 0.8249999999999998, 0.8369999999999999, 0.8449999999999999, 0.8469999999999998, 0.8539999999999999, 0.8610000000000001, 0.8640000000000001, 0.8740000000000001, 0.8799999999999999, 0.8849999999999997, 0.8909999999999999, 0.8930000000000001, 0.8980000000000001, 0.904, 0.9070000000000001, 0.9120000000000004, 0.9140000000000001, 0.9140000000000001, 0.9180000000000001, 0.9229999999999999, 0.925, 0.926, 0.9279999999999999, 0.931, 0.9330000000000002, 0.934, 0.9359999999999999, 0.937, 0.937, 0.938, 0.941, 0.9440000000000001, 0.9440000000000001, 0.945, 0.948, 0.9510000000000001, 0.9520000000000001, 0.9530000000000001, 0.9540000000000001, 0.9570000000000001, 0.9570000000000001, 0.9580000000000001, 0.9590000000000002, 0.9590000000000002, 0.9630000000000001, 0.9640000000000001, 0.965, 0.968, 0.9660000000000001, 0.9660000000000001, 0.9670000000000001, 0.9710000000000001, 0.9740000000000001, 0.9750000000000001, 0.977, 0.9760000000000001, 0.977, 0.9790000000000001, 0.9800000000000001, 0.9790000000000001, 0.9800000000000001, 0.9790000000000001, 0.9790000000000001, 0.9810000000000001, 0.982, 0.982, 0.983, 0.983, 0.983, 0.983, 0.983, 0.983, 0.985, 0.9849999999999999, 0.9849999999999999, 0.9860000000000001, 0.9860000000000001, 0.9860000000000001, 0.987, 0.987, 0.987, 0.987, 0.9860000000000001, 0.9860000000000001, 0.9860000000000001, 0.987, 0.987, 0.988, 0.9889999999999999, 0.9889999999999999, 0.988, 0.9889999999999999, 0.9889999999999999, 0.9889999999999999, 0.9889999999999999, 0.9889999999999999, 0.9899999999999999, 0.9899999999999999, 0.991, 0.991, 0.991, 0.9899999999999999, 0.9899999999999999, 0.9899999999999999, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.991, 0.992, 0.992, 0.992, 0.992, 0.992, 0.992, 0.992, 0.992, 0.993, 0.993, 0.993, 0.9939999999999999]
    y_with_flat = [0.03366890907287598, 0.034359254837036134, 0.034867761135101316, 0.03562589645385742, 0.03618706703186035, 0.03722701072692871, 0.03739752054214478, 0.037983860969543454, 0.038675010204315186, 0.03866890907287598, 0.0384898591041565, 0.03879979848861694, 0.03945381164550781, 0.04012988567352295, 0.04055727481842041, 0.040953297615051266, 0.041283223628997806, 0.04214396238327026, 0.04231976985931397, 0.04300747394561768, 0.04393966197967529, 0.04400970458984375, 0.04448538780212402, 0.04478101253509521, 0.04542092323303223, 0.045778083801269534, 0.04621822834014892, 0.04690260648727417, 0.047171344757080076, 0.047767426967620846, 0.048461413383483885, 0.048788249492645264, 0.04918010950088501, 0.04992766380310058, 0.05021739721298218, 0.050720665454864505, 0.050977134704589845, 0.05202038049697876, 0.051847376823425294, 0.052739124298095706, 0.05332730293273926, 0.05359710931777954, 0.054218502044677735, 0.05454585552215576, 0.055172278881073, 0.055743701457977295, 0.055673797130584714, 0.05618083715438843, 0.05665372133255005, 0.06166633129119873, 0.062238912582397464, 0.062473671436309816, 0.06303808689117432, 0.06387037754058839, 0.06406694650650024, 0.06465214967727662, 0.06500260591506958, 0.0654570984840393, 0.06575248241424561, 0.06609647274017334, 0.0666877818107605, 0.0669910454750061, 0.06758232116699218, 0.06753823280334473, 0.06809839725494385, 0.06850841999053955, 0.06904728174209594, 0.06921993732452393, 0.06970913171768188, 0.070031156539917, 0.07059181451797486, 0.07106056928634644, 0.07128887414932251, 0.07154518127441406, 0.07231267213821412, 0.07261284112930298, 0.07303292989730835, 0.07350181341171265, 0.07371049880981445, 0.07407723426818848, 0.07410102605819702, 0.07517816305160523, 0.07545731067657471, 0.075744149684906, 0.07646817922592163, 0.07681349754333495, 0.07703289031982422, 0.07759721040725708, 0.07785646677017212, 0.07820923089981079, 0.07879899740219116, 0.07907321214675904, 0.07953212022781372, 0.07990743398666382, 0.08043817043304444, 0.08083965539932252, 0.08099549531936645, 0.08140008687973023, 0.08190579175949096, 0.08221197605133057, 0.08242056608200073, 0.08312539100646972, 0.0835509705543518, 0.08370858907699585, 0.08437944412231445, 0.08461874723434448, 0.08504427671432495, 0.08537209272384644, 0.0859754228591919, 0.08640334606170655, 0.08744033336639405, 0.08808921337127686, 0.08897239685058594, 0.08892975091934203, 0.08975401163101196, 0.08962531328201294, 0.09046216249465942, 0.09182569980621338, 0.09182610988616943, 0.09255567073822021, 0.09238696098327637, 0.09129055261611939, 0.09156471252441406, 0.09194036722183227, 0.09255254745483399, 0.09291560888290405, 0.09325283288955688, 0.09393184900283813, 0.09405672788619995, 0.09453453540802002, 0.09493414640426635, 0.09531861305236816, 0.09617439270019532, 0.09624119520187378, 0.09659927368164062, 0.09701158046722412, 0.09745110034942626, 0.09772313117980957, 0.09825585603713989, 0.09847906827926636, 0.09894138813018799, 0.09948145866394043, 0.09980390310287475, 0.10013374328613281, 0.10057654380798339, 0.10108102560043335, 0.10146884679794312, 0.10184646606445312, 0.10201088666915893]

    # hybrid with BF, step=5 (r in range(1, 150))
    x_with_flat = [0.449, 0.5569999999999998, 0.6179999999999999, 0.6549999999999997, 0.6899999999999997, 0.716, 0.741, 0.7689999999999999, 0.7890000000000001, 0.806, 0.8230000000000003, 0.8380000000000001, 0.8490000000000002, 0.8590000000000002, 0.8700000000000001, 0.8880000000000001, 0.8980000000000002, 0.9000000000000002, 0.9040000000000004, 0.9120000000000004, 0.9230000000000003, 0.9280000000000002, 0.9309999999999999, 0.931, 0.9369999999999997, 0.9389999999999997, 0.941, 0.9449999999999998, 0.946, 0.949, 0.9570000000000001, 0.9599999999999999, 0.9619999999999999, 0.9660000000000001, 0.9640000000000001, 0.9660000000000001, 0.9720000000000002, 0.9720000000000002, 0.9740000000000002, 0.9770000000000002, 0.9770000000000003, 0.9800000000000003, 0.9800000000000003, 0.9790000000000003, 0.9790000000000003, 0.9800000000000003, 0.9820000000000002, 0.9840000000000002, 0.9810000000000002, 0.9840000000000003, 0.9840000000000003, 0.9880000000000001, 0.9890000000000002, 0.9890000000000002, 0.9890000000000003, 0.9910000000000002, 0.9910000000000002, 0.9930000000000001, 0.9940000000000002, 0.9930000000000001, 0.9930000000000001, 0.9940000000000001, 0.995, 0.995, 0.9940000000000001, 0.995, 0.995, 0.9940000000000001, 0.995, 0.9930000000000001, 0.995, 0.9940000000000001, 0.995, 0.995, 0.995, 0.995, 0.9960000000000001, 0.9960000000000001, 0.995, 0.9960000000000001, 0.995, 0.9960000000000001, 0.995, 0.996, 0.997, 0.997, 0.996, 0.996, 0.996, 0.9960000000000001, 0.9960000000000001, 0.997, 0.9980000000000001, 0.9980000000000001, 0.9990000000000001, 0.9990000000000001, 0.9980000000000001, 0.9980000000000001, 0.997, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9990000000000001, 0.9990000000000001, 0.9990000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9990000000000001, 0.9990000000000001, 0.9980000000000001, 0.9980000000000001, 0.997, 0.997, 0.9980000000000001, 0.997, 0.997, 0.996, 0.9980000000000001, 0.9980000000000001, 0.997, 0.997, 0.9980000000000001, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.997, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.9980000000000001, 0.997, 0.997, 0.9980000000000001]
    y_with_flat = [0.03430004358291626, 0.03584303617477417, 0.037029595375061036, 0.03844426393508911, 0.03963602066040039, 0.04093902587890625, 0.04268049716949463, 0.04371996641159057, 0.0451509428024292, 0.04607213020324707, 0.04718587636947632, 0.048817546367645265, 0.050340359210968015, 0.05160406589508057, 0.052592473030090334, 0.053656792640686034, 0.055196878910064695, 0.056286582946777346, 0.05764513731002808, 0.06343901872634888, 0.06433168172836304, 0.06559754610061645, 0.06682129383087158, 0.06781987428665161, 0.06941909074783326, 0.07050503730773926, 0.07210231065750122, 0.072836012840271, 0.07506918668746948, 0.07518004179000855, 0.0766640567779541, 0.07764404773712158, 0.07912062406539917, 0.07976743221282959, 0.08147408485412598, 0.08241335868835449, 0.0846787452697754, 0.08528801202774047, 0.0870167350769043, 0.08759347200393677, 0.08800554037094116, 0.08948395252227784, 0.0909365463256836, 0.09311063766479492, 0.09439694166183471, 0.09558867454528809, 0.09562103509902954, 0.09761070728302002, 0.10042018890380859, 0.0995751142501831, 0.10111624956130981, 0.103526451587677, 0.10254482507705688, 0.10466836452484131, 0.106165189743042, 0.10764786720275879, 0.1064511227607727, 0.10758362531661987, 0.10952761650085449, 0.11072592973709107, 0.11274739265441895, 0.11363161325454713, 0.11323991775512696, 0.1155200719833374, 0.11657644987106323, 0.11751283645629883, 0.11793986797332763, 0.11821872472763062, 0.11922422409057618, 0.11957278728485107, 0.12021503448486329, 0.1220098614692688, 0.12440927267074585, 0.1271619963645935, 0.12578539609909056, 0.12689180850982665, 0.13031982660293578, 0.13310437440872191, 0.1319548487663269, 0.13385159730911256, 0.13266195774078368, 0.1328508162498474, 0.13304157495498659, 0.13413926601409912, 0.13496044874191285, 0.13552454233169556, 0.13701103925704955, 0.13816598415374756, 0.1392207145690918, 0.13982665538787842, 0.14075522184371947, 0.14380887508392334, 0.143816556930542, 0.14535046577453614, 0.1491016364097595, 0.14737492084503173, 0.14637884855270386, 0.14752918720245362, 0.14849855422973632, 0.1494436478614807, 0.1503620982170105, 0.15150261163711548, 0.15232068300247192, 0.15347018718719482, 0.15446630239486694, 0.1543291711807251, 0.15350036859512328, 0.15467111825942992, 0.1554841637611389, 0.1568319344520569, 0.15755378484725951, 0.1585276508331299, 0.1597896146774292, 0.16061166524887086, 0.1611720132827759, 0.16237493991851806, 0.16324939012527465, 0.16417502164840697, 0.16506096363067627, 0.16645209074020387, 0.16665563344955445, 0.16812323331832885, 0.16883846282958984, 0.16975295782089234, 0.170862295627594, 0.17200502634048462, 0.17283638954162597, 0.17371086597442628, 0.17471494436264037, 0.17592408180236815, 0.17660104513168334, 0.17796508312225343, 0.1785827398300171, 0.17904749631881714, 0.17819241285324097, 0.17896970987319946, 0.18010610818862915, 0.18105989694595337, 0.18249489068984986, 0.18336599111557006, 0.1842125463485718, 0.18492207527160645, 0.18575590133666992, 0.18752692699432372, 0.18766069650650025, 0.18848004341125488, 0.18916985988616944, 0.19038870096206664, 0.19095520734786986]

    ax1 = plt.subplot()
    ax1.set_xlabel("r")
    ax1.set_ylabel("seconds")
    # ax1.set_ylim(0.0, 0.2)
    l1, = ax1.plot(range(1, 101), y[:100], color='red')
    l3, = ax1.plot(range(1, 101), y_with_flat[:100], color='blue')

    ax2 = ax1.twinx()
    #ax2.set_ylim(0.5, 1.0)
    l2, = ax2.plot(range(1, 101), x[:100], color='orange')
    l4, = ax2.plot(range(1, 101), x_with_flat[:100], color='green')

    plt.legend([l1, l2, l3, l4], ["time (s)", "recall", "time with flat (s)", "recall with flat"])
    plt.title("hybrid query - 20% pass the filter")

    plt.savefig("mygraph.png")


def main():
    # Create 2 lists of three vector indexes and their corresponding vectors test sets. By default, all three
    # indexes are HNSW, optionally one (glove-50) is flat.
    data_sets = ["dbpedia-768", "glove-50", "glove-200"]
    vector_indexes, test_sets = setup(data_sets, use_flat=True)

    # Run multi top k search over queries from the test set
    k = 10
    num_queries = 100
    w0 = 1/3
    w1 = 1/3
    w2 = 1/3
    recalls, times = run_standard_knn(vector_indexes, [w0, w1, w2], test_sets, num_queries, k)

    # Run hybrid search in batches, optionally use ad-hoc BF for glove-50.
    recalls, times = run_hybrid_search_batches(vector_indexes, [w0, w1, w2], test_sets, num_queries, k, use_adhoc=False)
    # print(f"recalls are: {recalls}")
    # print(f"times are: {times}")
    show_plot()


if __name__ == '__main__':
    main()

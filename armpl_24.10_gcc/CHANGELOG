Arm Performance Libraries
=========================

2024-10-01 v24.10

* The Arm Neoverse N3 core is added as a new microarchitecture target.
* Tunings for Neoverse V2 systems now include Google Axion (in addition to
  NVIDIA Grace and AWS Graviton4).
* The random number generator (RNG) functions now support all of the SOBOL
  functionality in the OpenRNG interface.
  - Note that the RNG functions are now available as open source:
    https://gitlab.arm.com/libraries/openrng
* Increased performance for:
  - ?GEMM, in particular large parallel problems.
  - FFTs:
    - Large 1D FFT cases may now be multi-threaded.
    - In-place multi-dimensional FFT cases now use significantly less memory.
    - Cases involving large prime factors on Windows.
  - MT19937 RNG skipahead.
* All sparse matrix formats now multi-threaded for sparse triangular solve.
* Support for LAPACK version 3.12.0.
* Bug fixes:
  - User-reported FFT wisdom export crash.
  - ?[io]matcopy functions transpose correctly for row-major matrices.
* The macOS version of Arm PL now includes libamath for the first time.
  - Note that both Windows and macOS versions of libamath only include
    scalar implementations of math.h functions, with increased performance
    compared with the native system implementations.
* Performance improvements in libamath, for:
  - Vectorized versions of sincospi, sincospif, modf and modff.

2024-04-04 v24.04

* Includes the interface to the random number generation part of the VSL library
  developed by Intel(R) and shipped for x86 processors as part of oneMKL. We
  are grateful to Intel(R) for having released this interface, along with their
  documentation, to us under a Creative Commons 4.0 licence, allowing us to
  develop our own implementation of this functionality for users of Arm-based
  systems, allowing software portability between architectures with no code
  changes.
  - We have endeavoured to ensure that the same generators and initializations
    are used as documented in the oneMKL documentation. This means that
    functions that return bit sequences are bitwise reproducible between Arm
    and x86 systems. If an integer or floating point answer is requested
    answers may differ as the precision of various operations is different
    between the two libraries.
  - Note that in this release not all of the random number functions from VSL
    have been included. These functions are listed in the documentation as not
    being currently implemented. We are intending to fill out this coverage in
    future releases, and we are very keen to hear from users who find missing
    functionality that they would like us to prioritize.
* Arm PL for Linux now supports performance tunings for an extended list of
  microarchitectures and SoCs, including:
  - Neoverse V2 (NVIDIA Grace and AWS Graviton4).
  - Neoverse N2 (Alibaba Yitian 710 and Microsoft Cobalt-100).
  - Neoverse V1 (AWS Graviton3).
  - Neoverse N1 (AWS Graviton2 and Ampere Altra/Altra Max).
  - AmpereOne.
  - Fujitsu A64FX.
* Increased performance for:
  - FFT functions, especially Hermitian (c2r/r2c) transforms.
  - Small LAPACK functions when called with many threads.
  - In libamath: sinpi, sinpif, cospi, cospif, atanh and atanhf.
* Changes to installers:
  - When downloading the standalone Linux version of Arm PL there are now just
    four links to select from:
    - .rpm and .deb based installers for GCC users.
    - .rpm and .deb based installers for NVHPC users.
  - The GCC compatible releases are built with GCC 13 and tested with GCC
    versions 7 to 13.
  - The NVHPC compatible releases are built and tested with NVHPC 24.1.
    - Note that NVHPC has a different ABI to their previous releases for
      returning complex types from Fortran functions, and is not backwards
      compatible.
  - The version of Arm PL released as part of ACfL maintains the same set of
    installers for supported Linux distributions as in previous releases.
  - The Windows version of Arm PL now uses a Windows Installer to guide the
    user through configuration.
* The Windows version of Arm PL now includes libamath for the first time.
  - This includes scalar and Neon math.h functions, with Neon functions using
    the vector ABI described here:
    https://community.arm.com/arm-community-blogs/b/high-performance-computing-blog/posts/using-vector-math-functions-on-arm

2023-09-12 v23.10

* This is the first combined release of Arm Performance Libraries for Linux, macOS and Windows.
* The Arm Neoverse V2 and Neoverse N2 cores are added as new microarchitecture targets with specific tunings.
* New build of the library compatible with NVIDIA HPC Compilers 23.3.
* New BLAS extension matrix-copy routines added:
  - Out-of-place routines: ?OMATCOPY.
  - In-place routines: ?IMATCOPY.
  - See examples and online documentation for details.
* Increased performance for:
  - Many cases across BLAS routines.
  - FFT functions, including more parallel implementations.
* Bug fix: Arm PL detects software availability of SVE on SVE-capable hardware.

2023-05-12 v23.04.1

* Bug fix: integer overflow fixed in armpl_spmat_export* functions in lp64 libraries.

2023-02-27 v23.04

* New routines for sparse linear algebra, including parallel optimizations:
  - Sparse matrix functionality:
    - Triangular matrix solve: armpl_spsv_exec_*
  - Introduction of a new sparse vector type, armpl_spvect_t. Routines for operations on sparse vectors:
    - Dot product: armpl_spdot*_exec_*
    - AXPBY: armpl_spaxpby_exec_*, armpl_spwaxpby_exec_*
    - Plane rotation: armpl_sprot_exec_*
    - Utilities: armpl_spvec_gather_exec_*, armpl_spvec_scatter_exec_*
  - See examples and online documentation for details.
* Increased performance for:
  - Small ?GEMM problems.
  - Large parallel thread counts for all BLAS routines across microarchitectures.
  - FFT functions.
* Support for LAPACK version 3.11.0.
* Bug fix: pkgconfig files renamed and relocated.
* The GCC version of the library shipped with Arm Compiler for Linux is now compatible with GCC 12.2 instead of 11.2.
  - Note that builds of Arm Performance Libraries compatible with many versions of GCC are available separately online.
* Performance improvements in libamath, for:
  - acosf, acoshf, asinf, asinhf, atanhf, cbrtf, coshf, erfcf, erff, exp2f, expm1f, log2f, sinhf, tanf, tanhf
  - acos, acosh, asin, asinh, atanh, cbrt, cosh, erf, erfc, exp2, expm1, log1p, log2, sinh, tan, tanh

2022-08-23 v22.1

* Increased performance for:
  - BLAS level 1 and level 2 routines in serial and parallel.
  - BLAS DGEMM scaling for high numbers of cores.
  - LAPACK SVD routines *GESVD, *GESDD, involving:
     * *ORGQR, *ORMQR, *UNGQR, *UNMQR, *ORGLQ, *ORMLQ, *UNGLQ, *UNMLQ, *BDSQR, *GEBRD, *GEQRF.
  - FFT functions.
* Support for LAPACK version 3.10.1.
* Bug fixes for cblas_*gemmt and cblas_*axpby (OpenMP) functions.
* Performance improvements in libamath, for:
 - asinh (scalar), asinhf (scalar & vector)
 - exp, expf (vector)
 - log10, log10f (vector)
 - log1p (scalar), log1pf (scalar & vector)

2021-12-24 v22.0

* Arm Performance Libraries are no longer packaged with separate libraries for SVE and non-SVE
  cores. We now provide a single library, which contains optimized versions for all supported
  cores, including SVE. Automatic selection of the most appropriate implementation for the
  microarchitecture occurs at run time.
* The Arm Neoverse V1 core is added as a new microarchitecture target with specific tunings.
* Increased performance for:
  - BLAS level 1 routines: SVE optimizations for ?COPY, ?SCAL, ?AXPY.
  - BLAS level 2 routines: packed and banded functionality; ?TRMV and ?TRSV for large problems.
  - BLAS level 3 routines: ?TRMM and ?TRSM for large problems.
  - LAPACK routines: ?EEVD (eigenvalue decomposition) for small problems; ?POTRF for
                     multi-threaded cases.
* Support for LAPACK version 3.10.0.
  - Also patched out of bounds bug in ?LARRV routines (CVE-2021-4048).
* Added support for I?AMIN BLAS extension routines for all types, finding the location of the
  first minimum value in a vector.
* The GCC version of the library is now compatible with GCC 11.2 instead of 10.2.
* There is no longer a requirement to link to libgfortran for C/C++ users of Arm Performance
  Libraries built for GCC.
* Performance improvements in libamath, for:
  - atan, atanf (vector)
  - atan2, atan2f (scalar & vector)
  - cos, cosf (vector)
  - erfc, erfcf (vector)
  - exp, expf (vector)
  - logf (vector)
  - pow (vector)
  - sin, sinf (vector)
  - tanf (vector)

2021-07-15 v21.1

* Increased performance for:
  - BLAS level 1 and 2 routines: multi-threaded performance improvements.
  - BLAS level 2 routines: ?GEMV.
  - BLAS level 3 routines: ?SYRK, ?SYR2K, ?HERK, ?HER2K; HGEMM for Neoverse-N1.
  - Small problems, generally.
  - Interleave-batch functions for both Neon and SVE targets:
     * armpl_dgemm_interleave_batch
     * armpl_dtrmm_interleave_batch
     * armpl_dtrsm_interleave_batch
  - FFT functions for SVE targets.
* Support for LAPACK version 3.9.1.
* Added symmetric band matrix-vector multiplication BLAS routines: CSBMV and ZSBMV to
  armpl.h, along with associated documentation online.
* In libamath:
  - Performance improvements for atan2.

2021-02-08 v21.0

* Arm Performance Libraries are no longer packaged with separate libraries for individual
  microarchitectures. We now provide two choices of library, one which contains kernels for
  SVE cores and one for non-SVE cores. Automatic selection of the most appropriate kernels for
  the microarchitecture occurs at run time.
* Added a new suite of routines optimized for large batches of small linear algebra problems.
  Interfaces for the following real, double precision problems are provided:
  - BLAS: DDOT, DGER, DGEMM, DGEMV, DSCAL, DTRMM, DTRSM and DTRSV.
  - LAPACK: DGEQRF (QR), DGETRF (LU) and DPOTRF (Cholesky).
  - Plus DORMQR and DORGQR (for multiplying and generating Q).
  - Utility routines for packing and unpacking matrices to/from the new batched data layout.
  An example and full documentation are provided.
* We now support all real-to-real transform functions available in the FFTW3 interface.
  Previously, the planner functions for these types of transforms returned NULL, indicating that
  they were unavailable.
* Added support for ?GEMMT BLAS extension routines for all types, performing matrix-matrix
  multiplication updating the lower or upper triangular part of C only.
* Increased performance for:
  - BLAS level 1 routines: ?IAMAX, ?NRM2, ?ASUM and ?DOT.
  - BLAS level 2 routines: ?HBMV, ?SBMV, ?TBMV, ?SYR and ?SYR2.
  - BLAS level 3 routines: ?TRSM and [SD]GEMM.
  - LAPACK routines: ?POTRF and ?GETRF (for small problems).
  - Small problems, generally.
* We now provide prototypes in armpl.h for the following, previously missing, LAPACKE functions:
  - lapacke_?geqpf
  - lapacke_?geqpf_work
  - lapacke_?ggsvd
  - lapacke_?ggsvd_work
  - lapacke_?ggsvp
  - lapacke_?ggsvp_work
* The GCC version of the library is now compatible with GCC 10.2 instead of 9.3.
* Significant vector performance improvements in libamath:
  - Neon functions: atan, atanf, erf, erff, exp2, exp2f, exp10, exp10f,
  - SVE functions: atan, erff, cos, cosf, pow, sin, sincos, sincosf

2020-08-05 v20.3

* Increased performance for
  - BLAS level 1 routines: ?NRM2 and ?ASUM.
  - BLAS level 2 routines: ?GER, ?SYR, ?HER, ?SYR2, ?HER2 and ?GBMV.
  - LAPACK routine: DGEEV (for small eigenvalue problems).
* New BLAS level 2 extension routines ?GERB that perform a generalised outer-product with an additional
  scaling parameter are also provided. See the online documentation for more details.
* Single precision FFT performance improvements.
* In libamath:
  - Performance improvements for atan and atanf in both scalar and Neon vector forms.
  - Performance improvements for SVE erf.

2020-05-01 v20.2

* BLAS level 2 performance improvements for symmetric matrices.
* FFT performance improvements, including faster planning.
* Improvements to SVE versions of libamath functions, namely exp/expf, log/logf, sin/sinf, and cos/cosf.

2020-03-25 v20.1

* The Fujitsu A64FX is added as a new microarchitecture target with specific tunings. Note that
  this is an SVE implementation, meaning that this version will therefore not run natively on
  other current microarchitectures.
* FFT implementations are now constructed at planning time, incurring a small additional overhead
  for each different length of FFT on its first creation. Subsequent plans of the same length are
  unaffected. Execution performance remains similar to previous releases. This enhancement
  considerably reduces the size of the library.
* Performance improvements including:
  - ?GEMM performance, especially for small cases.
  - Further gains across all BLAS Level 3 routines, especially HERK, on all microarchitectures.
* Support for LAPACK version 3.9.0.
* In libamath there are newly-optimized versions of erf and erfc, both for scalar and vector uses,
  and for single and double precision.

2019-11-08 v20.0

* The Arm Neoverse N1 core is added as a new microarchitecture target with specific tunings.
* Libraries tuned for Arm Cortex-A72 are no longer explicitly provided. Users of this core should
  instead use the Generic-AArch64 versions of the libraries.
* The GCC version of the library is now compatible with GCC 9.2 instead of 8.2.
* Performance improvements including:
  - sparse matrix-matrix (SpMM) and sparse matrix-vector multiplication (SpMV)
  - BLAS level 1 routines *ROT and *SWAP
  - BLAS level 3 routines *SYRK, *SYR2K and DTRSM.
* FP16 SVE implementation provided for dense matrix-matrix multiplication, HGEMM. The SVE-enabled
  libraries version has not been tuned for any particular microarchitecture, and is available
  to experiment with SVE in an emulated mode, ahead of silicon deployments.
* Sparse matrix support for Block Sparse Row (BSR) matrices with both C and Fortran interfaces
  for use in both SpMV and SpMM.
  - Thank you to Mohammad Zubair, Old Dominion University, for collaborating with us on enhancing
    the performance of SpMV using BSR.
* Fixed a rarely occurring inaccuracy for optimized sparse matrix-vector multiplication.
* The FFT interface documented in the Arm Performance Libraries User Manual versions up to v18.4.0,
  and deprecated in version 19.0, has now been removed. All users should use the FFTW3 interface
  provided by Arm Performance Libraries.
* libamath performance improvements including scalar versions of erf and erfc, and scalar and
  vectorized versions of log10 and log10f.

2019-08-02 v19.3

* A new interface for sparse matrix-matrix multiplication (SpMM) has been added to Arm Performance
  Libraries.
  - SpMM is an extension of the existing sparse interface supporting all functionality from the
    usual BLAS GEMM interface.
  - Matrices can be supplied in CSR, CSC, COO or dense formats.
  - SpMM is available for both C and Fortran and examples are included for both.
  - A sparse matrix addition function and functions to generate identity and null matrices are
    also provided for convenience.
* Sparse matrix-vector multiplication (SpMV) functions have been optimized for parallel cases.
* FFT performance improvements.
   - Optimizations for transform lengths involving large prime factors.
   - Parallel performance improvements for multi-dimensional problems.
* Performance enhancements for BLAS level 3 calls. In particular, updated versions of both ?SYMM and
  ?HEMM are included for all microarchitectures.
* A generic, SVE-enabled version of Arm Performance Libraries is now provided. The SVE-enabled
  version has not been tuned for any particular microarchitecture, and is available
  to experiment with SVE in an emulated mode, ahead of silicon deployments.
   - Examples are provided which demonstrate how to run SVE code.

2019-04-30 v19.2

* libamath performance improvements including vectorized versions of sin, cos, exp and log in
  both single and double precision.
* A new library, libastring, is included by Arm Compiler by default. This library provides
  optimized versions of a number of common string functions, such as memcpy and memset.
    - libastring is also provided for the GCC compiler, and can be found in $ARMPL_DIR/lib.
* Half precision interfaces have been added to libarmpl for matrix-matrix multiplication and FFTs.
    - The half precision matrix-matrix multiplication function is called HGEMM. This interface
      follows the usual *GEMM interface with half precision matrices and floating point scalars.
    - The naming scheme for the FFTW interfaces has been extended, such that all functions are
      prefixed fftwh_.
      An example of how to use these functions would be based upon:

      /* Include Arm Performance Libraries FFT interface. Make sure you include the header
         file provided by Arm PL and not the header provided by FFTW3. */
      #include "fftw3.h"

      /* Declare half-precision arrays to be used */
      __fp16 *in;
      fftwh_complex *out;
      fftwh_plan plan;

      /* Plan, execute and destroy */
      plan = fftwh_plan_many_dft_r2c(...);
      fftwh_execute(plan);
      fftwh_destroy_plan(plan);
* A number of FFT performance improvements, especially in single precision.
* Libraries tuned for Kunpeng 920 are no longer provided.
* Separate examples directories are now provided for all combinations of serial or OpenMP and
  lp64 or ilp64 libraries.

2019-02-05 v19.1

* libamath is now the default library used by the Arm Compiler to provide many optimized scalar
  and vector math functions.
    - The Arm Compiler will link to libamath by default before libm in order to provide better
      performing implementations.
    - libamath is also provided for GCC. GCC users must link to the library explicitly to make use
      of the optimised math functions.
    - Avoid mixing compiler and libamath builds: do not compile and link code with gcc using the
      version of libamath supplied for the Arm Compiler, and vice-versa.
* Added sparse matrix-vector multiplication (SpMV) interfaces for Fortran, including an example.
* Single precision real SpMV performance optimisations.
* SpMV support for Compressed Sparse Column (CSC) and Coordinate (COO) sparse matrix formats with
  both C and Fortran interfaces.
* Performance improvements for [SCZ]GEMM, including stabilized performance for ThunderX2 systems
  configured in SMT > 1 mode.
* FFT performance improvements, including for input lengths involving large prime factors.
* Support for Fortran MPI FFTW interface.
    - In order to use the Fortran MPI FFTW interface it is necessary to compile and link a
      supporting file:
        - Compile the file located at $ARMPL_DIR/src/armpl_fftw_mpi_fortran.c:
          mpicc -c $ARMPL_DIR/src/armpl_fftw_mpi_fortran.c
        - Link this object file into your executable:
          mpif90 armpl_fftw_mpi_fortran.o <other object files and libraries>
* Improved MPI FFT parallel scaling.
* More FFTW examples provided.
* Improved *GEMV performance.

2018-10-03 v19.0

* Added a new suite of sparse matrix routines in C supporting sparse matrix-vector multiplication
  supplied in Compressed Sparse Row format, including an optimized double-precision real kernel. An
  example is provided.
* Added FFTW guru single and double precision interfaces in C and Fortran.
* Added FFTW MPI single and double precision interfaces in C.
* Execution of advanced and guru FFTW plans is now parallelized.
* This release also includes optimizations to key FFT kernels.
* The FFT interface documented in the Arm Performance Libraries User Manual versions up to v18.4.0
  has been deprecated. You are instead encouraged to use the FFTW interface within Arm Performance
  Libraries for best performance.
* FFTW examples provided.
* Performance enhancements to parallel DGEMM, especially for small to medium-sized problems.
* Added WAXPBY BLAS extension routine (w = a*x + b*y, for vectors w, x and y and scalars a and b).
* LAPACK parallel scalability tuning has been performed for the following routines on ThunderX2CN99
  systems: *POTRF, *GEQRF, *GETRF.
* Support for LAPACK version 3.8.0.
* Libraries tuned for Qualcomm Falkor are no longer provided.
* The GCC version of the library is now compatible with GCC 8.2 instead of 7.1.
* Enhancements to existing libamath functions.
* Various changes to C header files:
    - BLAS, CBLAS and LAPACK function prototypes have been modified to use 'const' where appropriate,
      for example, for input array pointers and char * specifiers.
    - We now use C-style _Complex numbers instead of our own structure for complex numbers in the
      armpl.h header. If required, you can use #define to override armpl_singlecomplex_t and
      armpl_doublecomplex_t to something else that is bitwise-compatible (e.g. C++ std::complex type).
      This change is bitwise-compatible with the structure we have replaced.
    - Complex number manipulation functions have been removed from the header. You are advised
      to use standard C-style _Complex operations instead (or those appropriate to any redefinition
      such as C++ std::complex).
    - cdotc_, cdotu_, zdotc_, zdotu_, cladiv_ and zladiv_ prototypes have been modified to reflect
      the correct C-to-Fortran calling convention for a given compiler toolchain.
* All Arm Performance Libraries documentation is now available online:
  https://developer.arm.com/products/software-development-tools/hpc/arm-performance-libraries

2018-07-04 v18.4.0

* Performance improvements for batched CGEMM and ZGEMM.
* Performance improvements for small to medium sized SGEMM problems.
* Much less time spent planning FFTW transforms for levels of rigor greater than FFTW_ESTIMATE.
* Performance enhancements for complex-to-real FFTW transforms, especially multidimensional problems.
* Bug fixes for some multidimensional FFTW transform cases.
* Libraries for Cortex-A57 and Cavium ThunderX are no longer provided.
* New functions in libamath: sinf, cosf, sincosf (single precision).
* Updated functions in libamath: exp, pow, log (double precision).

2018-05-09 v18.3.0

* Support for FFTW wisdom included for the first time.
* Performance enhancements to FFTW functions: complex-to-complex and real-to-complex functions
  using both basic and advanced interfaces; some complex-to-real performance differences too.
* Parallel performance improvements for S/D/C/ZTRSV and S/DTRMV.
* Added library, 'libamath', in the 'lib' directory for each microarchitecture.  This contains
  optimized versions of exp, pow and log functions in single and double precision.

2018-03-07 v18.2.0

* Performance enhancements to FFTW functions: complex-to-complex 1D transforms via the basic interface
  in single and double precision, complex-to-complex, real-to-complex and complex-to-real transforms
  via the advanced interface in single and double precision.
* Thread tuning for level 1 BLAS routines *AXPY, *AXPBY, *SCAL, *COPY.
* Bug fix for FFTW interface: handle inembed and onembed parameters correctly when input as NULL.
* Bug fix for FFT routines: avoid modifying input data for out-of-place transforms.
* Bug fix for Arm Compiler builds: use -Mrecursive flag when building the library with armflang
  to ensure local arrays are put on the stack.

2018-01-08 v18.1.0

* Optimizations for very small double precision real matrix-matrix multiplication, improving DGEMM
  and DGEMM_BATCH performance.
* Optimizations for complex Hermitian and symmetric matrix-matrix multiplication for
  Cavium ThunderX2.
* Bug fix: correctly include single precision Fortran FFTW interface.

2017-10-19 v18.0.0

* The Qualcomm Falkor core is added as a new microarchitecture target with specific tunings.
* New support for the following BLAS extension routines, see the Arm Performance Libraries Reference manual for details:
  - *AXPBY and cblas_*axpby for single and double precision real and complex data.
  - *GEMM_BATCH and cblas_*gemm_batch for single and double precision real and complex data.
    Examples for SGEMM_BATCH and cblas_zgemm batch are provided.
  - *GEMM3M and cblas_*gemm3m for single and double precision complex data.
    Note that these *GEMM3M and cblas_*gemm3m routines are included in the API, but currently offer no performance
    advantages over the regular *GEMM and cblas*gemm routines.
* Support for LAPACK version 3.7.1.
* A change has been made to C prototypes for Fortran BLAS routines in armpl.h. Where strings are passed as arguments it is
  no longer a requirement in the interface to pass string lengths after the standard options to the BLAS routines.
  Note we recommend that users include these string lengths in their calls from C directly to the Fortran interface.
* Various performance improvements.

2017-08-01 v2.3.0

* New build of the library with ARM C/C++/Fortran compiler (armflang/armclang).
* Now building with GCC 7.1.0.
* Altered complex type definitions: complex -> armpl_singlecomplex_t and doublecomplex -> armpl_doublecomplex_t.
* Libraries renamed to standardized nomenclature: lp64 denotes a library with 32-bit ints; ilp64 denotes a library with 64-bit ints.
* Optimizations for ZGEMM.
* Significant memory usage improvements for CGEMM.
* Tuning for parallel LU (*GETRF), QR (*GEQRF) factorization.

2017-06-07 v2.2.0

* Cavium ThunderX2 tuning for SGEMM and DGEMM when transA is true.
* New non-allocating kernels for small DGEMM problem on Cavium ThunderX2.

2017-05-05 v2.1.0

* LAPACK version supported upgraded to 3.7.0
* Performance improvements across many routines in both serial and parallel,
  for multiple micro-architectures
* Significant memory usage improvements
* FFTW Fortran interfaces included
* New optimized builds provided for Cavium ThunderX2 processors

2016-11-21 v2.0.0

* Added FFTW basic and advanced interfaces support
* LAPACK 3.6.1 support with added parallelism
* SVE-enabled version of the library to be released
* Tiled Cholesky factorization routines giving improved parallel scaling
* Tuned and parallelized xAXPY and xSCAL BLAS routines
* Performance improvements to small DGEMMs on A57 with N, N transpose options

2016-09-27 v1.3.0

* More performance improvements across many BLAS functions
* Fixed bug that rarely occurred when producing plans for FFT routines

--------------------------------------------------------------------------------

2016-07-15 v1.2.0

* Significant optimizations across DGEMM and SGEMM routines
* More performance improvements on some BLAS functions
* Added examples directory

--------------------------------------------------------------------------------

2016-04-29  v1.1.1

* Optimized DGEMM for larger problem sizes and core counts on Cortex A57
* More performance improvements and parallelism
* Optimizations for Cortex A72 now included

--------------------------------------------------------------------------------

2016-01-25  v1.1.0

* LAPACK 3.6.0 functionality included
* Numerous performance improvements across all target platforms

--------------------------------------------------------------------------------

2015-11-15  v1.0.0

* Initial release of ARM Performance Libraries

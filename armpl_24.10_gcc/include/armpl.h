/*
 * Arm Performance Libraries version 24.10
 * SPDX-FileCopyrightText: Copyright 2015-2024 Arm Limited and/or its affiliates
 * SPDX-FileCopyrightText: Copyright 2015-2024 NAG
 */

/*
  This is the ARMPL header file. It contains function prototypes
  to allow a C programmer to call ARMPL routines via their C
  or Fortran interfaces.
*/

#ifndef _ARMPL_H
#define _ARMPL_H

#include "armpl_int.h"
#include "armpl_complex.h"
#include "armpl_sparse.h"
#include "openrng.h"

/*
  The armflang compiler returns complex values using a different mechanism.
  We use the variable FORTRAN_COMPLEX_RETTYPE to distinguish between these for
  C/C++ files including this header.
*/

#ifndef FORTRAN_COMPLEX_RETTYPE
#ifdef __ARM_LINUX_COMPILER__
#define FORTRAN_COMPLEX_RETTYPE 1
#else
#define FORTRAN_COMPLEX_RETTYPE 2
#endif
#endif

#if FORTRAN_COMPLEX_RETTYPE == 1
// Use the armflang complex return type
#define SINGLECOMPLEX_RET_VALUE void
#define SINGLECOMPLEX_RET_PARAM armpl_singlecomplex_t*,
#define DOUBLECOMPLEX_RET_VALUE void
#define DOUBLECOMPLEX_RET_PARAM armpl_doublecomplex_t*,
#elif FORTRAN_COMPLEX_RETTYPE == 2
// Use the GCC complex return type
#define SINGLECOMPLEX_RET_VALUE armpl_singlecomplex_t
#define SINGLECOMPLEX_RET_PARAM
#define DOUBLECOMPLEX_RET_VALUE armpl_doublecomplex_t
#define DOUBLECOMPLEX_RET_PARAM
#else
// Error if user has defined FORTRAN_COMPLEX_RETTYPE to be an unknown option
#error FORTRAN_COMPLEX_RETTYPE==0 in include/armpl.h
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* ------------------------------------------------------------------ */

/*
   These typedefs are for routines that are arguments to other routines,
   e.g. ARMPL_CGEES_SELECT describes the argument "select" of routine cgees.
 */
typedef armpl_int_t (* ARMPL_CGEES_SELECT)(const armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_CGEESX_SELECT)(const armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_CGGES_SELCTG)(const armpl_singlecomplex_t *, const armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_CGGESX_SELCTG)(const armpl_singlecomplex_t *, const armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_CGGES3_SELCTG)(const armpl_singlecomplex_t *, const armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_DGEES_SELECT)(const double *, const double *);
typedef armpl_int_t (* ARMPL_DGEESX_SELECT)(const double *, const double *);
typedef armpl_int_t (* ARMPL_DGGES_DELCTG)(const double *, const double *, const double *);
typedef armpl_int_t (* ARMPL_DGGESX_DELCTG)(const double *, const double *, const double *);
typedef armpl_int_t (* ARMPL_DGGES3_SELCTG)(const double *, const double *, const double *);
typedef armpl_int_t (* ARMPL_SGEES_SELECT)(const float *, const float *);
typedef armpl_int_t (* ARMPL_SGEESX_SELECT)(const float *, const float *);
typedef armpl_int_t (* ARMPL_SGGES_SELCTG)(const float *, const float *, const float *);
typedef armpl_int_t (* ARMPL_SGGESX_SELCTG)(const float *, const float *, const float *);
typedef armpl_int_t (* ARMPL_SGGES3_SELCTG)(const float *, const float *, const float *);
typedef armpl_int_t (* ARMPL_ZGEES_SELECT)(const armpl_doublecomplex_t *);
typedef armpl_int_t (* ARMPL_ZGEESX_SELECT)(const armpl_doublecomplex_t *);
typedef armpl_int_t (* ARMPL_ZGGES_DELCTG)(const armpl_doublecomplex_t *, const armpl_doublecomplex_t *);
typedef armpl_int_t (* ARMPL_ZGGESX_DELCTG)(const armpl_doublecomplex_t *, const armpl_doublecomplex_t *);
typedef armpl_int_t (* ARMPL_ZGGES3_SELCTG)(const armpl_doublecomplex_t *, const armpl_doublecomplex_t *);

/* ARMPL version information */
void armplversion(armpl_int_t *major, armpl_int_t *minor, armpl_int_t *patch, const char **tag);
void armplinfo(void);

/* ------------------------------------------------------------------ */
/* Below are prototypes for the FORTRAN interfaces to ARMPL routines */

/* BLAS routines */
void caxpby_(const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy);
void caxpy_(const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *y, const armpl_int_t *incy);
void ccopy_(const armpl_int_t *n, const armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *y, const armpl_int_t *incy);
SINGLECOMPLEX_RET_VALUE cdotc_(SINGLECOMPLEX_RET_PARAM const armpl_int_t *n, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *y, const armpl_int_t *incy);
SINGLECOMPLEX_RET_VALUE cdotu_(SINGLECOMPLEX_RET_PARAM const armpl_int_t *n, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *y, const armpl_int_t *incy);
void cgbmv_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy, ... );
void cgemm_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc, ... );
void cgemm3m_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc, ... );
void cgemm_batch_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *const *a, const armpl_int_t *lda, const armpl_singlecomplex_t *const *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *const *c, const armpl_int_t *ldc, const armpl_int_t *group_count, const armpl_int_t *group_size, ... );
void cgemmt_(const char *uplo, const char *transa, const char *transb, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc);
void cgemv_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy, ... );
void cgerbc_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *y, const armpl_int_t *incy, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *a, const armpl_int_t *lda);
void cgerbu_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *y, const armpl_int_t *incy, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *a, const armpl_int_t *lda);
void cgerc_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *y, const armpl_int_t *incy, armpl_singlecomplex_t *a, const armpl_int_t *lda);
void cgeru_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *y, const armpl_int_t *incy, armpl_singlecomplex_t *a, const armpl_int_t *lda);
void chbmv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy, ... );
void chemm_(const char *side, const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc, ... );
void chemv_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy, ... );
void cher2_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *y, const armpl_int_t *incy, armpl_singlecomplex_t *a, const armpl_int_t *lda, ... );
void cher2k_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const float *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc, ... );
void cher_(const char *uplo, const armpl_int_t *n, const float *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *a, const armpl_int_t *lda, ... );
void cherk_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc, ... );
void chpmv_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy, ... );
void chpr2_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *y, const armpl_int_t *incy, armpl_singlecomplex_t *a, ... );
void chpr_(const char *uplo, const armpl_int_t *n, const float *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *a, ... );
void crotg_(armpl_singlecomplex_t *ca, const armpl_singlecomplex_t *cb, float *c, armpl_singlecomplex_t *s);
void csbmv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy, ... );
void cscal_(const armpl_int_t *n, const armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, const armpl_int_t *incx);
void csrot_(const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *y, const armpl_int_t *incy, const float *c, const float *s);
void csscal_(const armpl_int_t *n, const float *alpha, armpl_singlecomplex_t *x, const armpl_int_t *incx);
void cswap_(const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *y, const armpl_int_t *incy);
void csymm_(const char *side, const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc, ... );
void csyr2k_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc, ... );
void csyrk_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, const armpl_int_t *ldc, ... );
void ctbmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *x, const armpl_int_t *incx, ... );
void ctbsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *x, const armpl_int_t *incx, ... );
void ctpmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *x, const armpl_int_t *incx, ... );
void ctpsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *x, const armpl_int_t *incx, ... );
void ctrmm_(const char *side, const char *uplo, const char *transa, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, ... );
void ctrmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *x, const armpl_int_t *incx, ... );
void ctrsm_(const char *side, const char *uplo, const char *transa, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, ... );
void ctrsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *x, const armpl_int_t *incx, ... );
void cwaxpby_(const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, const armpl_singlecomplex_t *y, const armpl_int_t *incy, armpl_singlecomplex_t *w, const armpl_int_t *incw);
double dasum_(const armpl_int_t *n, const double *x, const armpl_int_t *incx);
void daxpby_(const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy);
void daxpy_(const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, double *y, const armpl_int_t *incy);
double dcabs1_(const armpl_doublecomplex_t *z);
void dcopy_(const armpl_int_t *n, const double *x, const armpl_int_t *incx, double *y, const armpl_int_t *incy);
double ddot_(const armpl_int_t *n, const double *x, const armpl_int_t *incx, const double *y, const armpl_int_t *incy);
void dgbmv_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const double *alpha, const double *a, const armpl_int_t *lda, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy, ... );
void dgemm_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, const double *beta, double *c, const armpl_int_t *ldc, ... );
void dgemm_batch_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double *const *a, const armpl_int_t *lda, const double *const *b, const armpl_int_t *ldb, const double *beta, double *const *c, const armpl_int_t *ldc, const armpl_int_t *group_count, const armpl_int_t *group_size, ... );
void dgemmt_(const char *uplo, const char *transa, const char *transb, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, const double *beta, double *c, const armpl_int_t *ldc);
void dgemv_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *a, const armpl_int_t *lda, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy, ... );
void dger_(const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, const double *y, const armpl_int_t *incy, double *a, const armpl_int_t *lda);
void dgerb_(const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, const double *y, const armpl_int_t *incy, const double *beta, double *a, const armpl_int_t *lda);
double dnrm2_(const armpl_int_t *n, const double *x, const armpl_int_t *incx);
void drot_(const armpl_int_t *n, double *x, const armpl_int_t *incx, double *y, const armpl_int_t *incy, const double *c, const double *s);
void drotg_(double *a, double *b, double *c, double *s);
void drotm_(const armpl_int_t *n, double *x, const armpl_int_t *incx, double *y, const armpl_int_t *incy, const double *param);
void drotmg_(double *d1, double *d2, double *b1, const double *b2, double *param);
void dsbmv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double *a, const armpl_int_t *lda, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy, ... );
void dscal_(const armpl_int_t *n, const double *alpha, double *x, const armpl_int_t *incx);
double dsdot_(const armpl_int_t *n, const float *sx, const armpl_int_t *incx, const float *sy, const armpl_int_t *incy);
void dspmv_(const char *uplo, const armpl_int_t *n, const double *alpha, const double *ap, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy, ... );
void dspr2_(const char *uplo, const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, const double *y, const armpl_int_t *incy, double *ap, ... );
void dspr_(const char *uplo, const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, double *ap, ... );
void dswap_(const armpl_int_t *n, double *x, const armpl_int_t *incx, double *y, const armpl_int_t *incy);
void dsymm_(const char *side, const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, const double *beta, double *c, const armpl_int_t *ldc, ... );
void dsymv_(const char *uplo, const armpl_int_t *n, const double *alpha, const double *a, const armpl_int_t *lda, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy, ... );
void dsyr2_(const char *uplo, const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, const double *y, const armpl_int_t *incy, double *a, const armpl_int_t *lda, ... );
void dsyr2k_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, const double *beta, double *c, const armpl_int_t *ldc, ... );
void dsyr_(const char *uplo, const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, double *a, const armpl_int_t *lda, ... );
void dsyrk_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double *a, const armpl_int_t *lda, const double *beta, double *c, const armpl_int_t *ldc, ... );
void dtbmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, double *x, const armpl_int_t *incx, ... );
void dtbsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, double *x, const armpl_int_t *incx, ... );
void dtpmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const double *ap, double *x, const armpl_int_t *incx, ... );
void dtpsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const double *ap, double *x, const armpl_int_t *incx, ... );
void dtrmm_(const char *side, const char *uplo, const char *transa, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, ... );
void dtrmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *x, const armpl_int_t *incx, ... );
void dtrsm_(const char *side, const char *uplo, const char *transa, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, ... );
void dtrsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *x, const armpl_int_t *incx, ... );
void dwaxpby_(const armpl_int_t *n, const double *alpha, const double *x, const armpl_int_t *incx, const double *beta, const double *y, const armpl_int_t *incy, double *w, const armpl_int_t *incw);
double dzasum_(const armpl_int_t *n, const armpl_doublecomplex_t *x, const armpl_int_t *incx);
double dznrm2_(const armpl_int_t *n, const armpl_doublecomplex_t *x, const armpl_int_t *incx);
armpl_int_t icamax_(const armpl_int_t *n, const armpl_singlecomplex_t *x, const armpl_int_t *incx);
armpl_int_t idamax_(const armpl_int_t *n, const double *x, const armpl_int_t *incx);
armpl_int_t isamax_(const armpl_int_t *n, const float *x, const armpl_int_t *incx);
armpl_int_t izamax_(const armpl_int_t *n, const armpl_doublecomplex_t *x, const armpl_int_t *incx);
armpl_int_t icamin_(const armpl_int_t *n, const armpl_singlecomplex_t *x, const armpl_int_t *incx);
armpl_int_t idamin_(const armpl_int_t *n, const double *x, const armpl_int_t *incx);
armpl_int_t isamin_(const armpl_int_t *n, const float *x, const armpl_int_t *incx);
armpl_int_t izamin_(const armpl_int_t *n, const armpl_doublecomplex_t *x, const armpl_int_t *incx);
armpl_int_t lsame_(const char *ca, const char *cb, ... );
float sasum_(const armpl_int_t *n, const float *x, const armpl_int_t *incx);
void saxpby_(const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy);
void saxpy_(const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, float *y, const armpl_int_t *incy);
float scabs1_(const armpl_singlecomplex_t *c);
float scasum_(const armpl_int_t *n, const armpl_singlecomplex_t *x, const armpl_int_t *incx);
float scnrm2_(const armpl_int_t *n, const armpl_singlecomplex_t *x, const armpl_int_t *incx);
void scopy_(const armpl_int_t *n, const float *x, const armpl_int_t *incx, float *y, const armpl_int_t *incy);
float sdot_(const armpl_int_t *n, const float *x, const armpl_int_t *incx, const float *y, const armpl_int_t *incy);
float sdsdot_(const armpl_int_t *n, const float *b, const float *x, const armpl_int_t *incx, const float *y, const armpl_int_t *incy);
void sgbmv_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const float *alpha, const float *a, const armpl_int_t *lda, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy, ... );
#ifndef __NVCOMPILER
#if !defined(_MSC_VER) || defined(__clang__)
void hgemm_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const __fp16 *alpha, const __fp16 *a, const armpl_int_t *lda, const __fp16 *b, const armpl_int_t *ldb, const __fp16 *beta, __fp16 *c, const armpl_int_t *ldc, ... );
#endif
#endif
void sgemm_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, const float *beta, float *c, const armpl_int_t *ldc, ... );
void sgemm_batch_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float *const *a, const armpl_int_t *lda, const float *const *b, const armpl_int_t *ldb, const float *beta, float *const *c, const armpl_int_t *ldc, const armpl_int_t *group_count, const armpl_int_t *group_size, ... );
void sgemmt_(const char *uplo, const char *transa, const char *transb, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, const float *beta, float *c, const armpl_int_t *ldc);
void sgemv_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *a, const armpl_int_t *lda, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy, ... );
void sger_(const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, const float *y, const armpl_int_t *incy, float *a, const armpl_int_t *lda);
void sgerb_(const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, const float *y, const armpl_int_t *incy, const float *beta, float *a, const armpl_int_t *lda);
float snrm2_(const armpl_int_t *n, const float *x, const armpl_int_t *incx);
void srot_(const armpl_int_t *n, float *x, const armpl_int_t *incx, float *y, const armpl_int_t *incy, const float *c, const float *s);
void srotg_(float *a, float *b, float *c, float *s);
void srotm_(const armpl_int_t *n, float *x, const armpl_int_t *incx, float *y, const armpl_int_t *incy, const float *param);
void srotmg_(float *d1, float *d2, float *b1, const float *b2, float *param);
void ssbmv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float *a, const armpl_int_t *lda, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy, ... );
void sscal_(const armpl_int_t *n, const float *alpha, float *x, const armpl_int_t *incx);
void sspmv_(const char *uplo, const armpl_int_t *n, const float *alpha, const float *ap, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy, ... );
void sspr2_(const char *uplo, const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, const float *y, const armpl_int_t *incy, float *ap, ... );
void sspr_(const char *uplo, const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, float *ap, ... );
void sswap_(const armpl_int_t *n, float *x, const armpl_int_t *incx, float *y, const armpl_int_t *incy);
void ssymm_(const char *side, const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, const float *beta, float *c, const armpl_int_t *ldc, ... );
void ssymv_(const char *uplo, const armpl_int_t *n, const float *alpha, const float *a, const armpl_int_t *lda, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy, ... );
void ssyr2_(const char *uplo, const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, const float *y, const armpl_int_t *incy, float *a, const armpl_int_t *lda, ... );
void ssyr2k_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, const float *beta, float *c, const armpl_int_t *ldc, ... );
void ssyr_(const char *uplo, const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, float *a, const armpl_int_t *lda, ... );
void ssyrk_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float *a, const armpl_int_t *lda, const float *beta, float *c, const armpl_int_t *ldc, ... );
void stbmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, float *x, const armpl_int_t *incx, ... );
void stbsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, float *x, const armpl_int_t *incx, ... );
void stpmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const float *ap, float *x, const armpl_int_t *incx, ... );
void stpsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const float *ap, float *x, const armpl_int_t *incx, ... );
void strmm_(const char *side, const char *uplo, const char *transa, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, ... );
void strmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *x, const armpl_int_t *incx, ... );
void strsm_(const char *side, const char *uplo, const char *transa, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, ... );
void strsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *x, const armpl_int_t *incx, ... );
void swaxpby_(const armpl_int_t *n, const float *alpha, const float *x, const armpl_int_t *incx, const float *beta, const float *y, const armpl_int_t *incy, float *w, const armpl_int_t *incw);
void xerbla_(const char *srname, const armpl_int_t *info, ... );
void zaxpby_(const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy);
void zaxpy_(const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *y, const armpl_int_t *incy);
void zcopy_(const armpl_int_t *n, const armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *y, const armpl_int_t *incy);
DOUBLECOMPLEX_RET_VALUE zdotc_(DOUBLECOMPLEX_RET_PARAM const armpl_int_t *n, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *y, const armpl_int_t *incy);
DOUBLECOMPLEX_RET_VALUE zdotu_(DOUBLECOMPLEX_RET_PARAM const armpl_int_t *n, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *y, const armpl_int_t *incy);
void zdrot_(const armpl_int_t *n, armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *y, const armpl_int_t *incy, const double *c, const double *s);
void zdscal_(const armpl_int_t *n, const double *alpha, armpl_doublecomplex_t *x, const armpl_int_t *incx);
void zgbmv_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy, ... );
void zgemm_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc, ... );
void zgemm3m_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc, ... );
void zgemm_batch_(const char *transa, const char *transb, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *const *a, const armpl_int_t *lda, const armpl_doublecomplex_t *const *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *const *c, const armpl_int_t *ldc, const armpl_int_t *group_count, const armpl_int_t *group_size, ... );
void zgemmt_(const char *uplo, const char *transa, const char *transb, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc);
void zgemv_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy, ... );
void zgerbc_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *y, const armpl_int_t *incy, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *a, const armpl_int_t *lda);
void zgerbu_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *y, const armpl_int_t *incy, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *a, const armpl_int_t *lda);
void zgerc_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *y, const armpl_int_t *incy, armpl_doublecomplex_t *a, const armpl_int_t *lda);
void zgeru_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *y, const armpl_int_t *incy, armpl_doublecomplex_t *a, const armpl_int_t *lda);
void zhbmv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy, ... );
void zhemm_(const char *side, const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc, ... );
void zhemv_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy, ... );
void zher2_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *y, const armpl_int_t *incy, armpl_doublecomplex_t *a, const armpl_int_t *lda, ... );
void zher2k_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const double *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc, ... );
void zher_(const char *uplo, const armpl_int_t *n, const double *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *a, const armpl_int_t *lda, ... );
void zherk_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc, ... );
void zhpmv_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy, ... );
void zhpr2_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *y, const armpl_int_t *incy, armpl_doublecomplex_t *a, ... );
void zhpr_(const char *uplo, const armpl_int_t *n, const double *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *a, ... );
void zrotg_(armpl_doublecomplex_t *ca, const armpl_doublecomplex_t *cb, double *c, armpl_doublecomplex_t *s);
void zsbmv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy, ... );
void zscal_(const armpl_int_t *n, const armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, const armpl_int_t *incx);
void zswap_(const armpl_int_t *n, armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *y, const armpl_int_t *incy);
void zsymm_(const char *side, const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc, ... );
void zsyr2k_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc, ... );
void zsyrk_(const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, const armpl_int_t *ldc, ... );
void ztbmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *x, const armpl_int_t *incx, ... );
void ztbsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *x, const armpl_int_t *incx, ... );
void ztpmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *x, const armpl_int_t *incx, ... );
void ztpsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *x, const armpl_int_t *incx, ... );
void ztrmm_(const char *side, const char *uplo, const char *transa, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, ... );
void ztrmv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *x, const armpl_int_t *incx, ... );
void ztrsm_(const char *side, const char *uplo, const char *transa, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, ... );
void ztrsv_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *x, const armpl_int_t *incx, ... );
void zwaxpby_(const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, const armpl_doublecomplex_t *y, const armpl_int_t *incy, armpl_doublecomplex_t *w, const armpl_int_t *incw);

/* BLAS-like extensions */
void comatcopy(char order, char transa, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t alpha, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
void cimatcopy(char order, char transa, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t alpha, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t ldb);
void domatcopy(char order, char transa, armpl_int_t m, armpl_int_t n, double alpha, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
void dimatcopy(char order, char transa, armpl_int_t m, armpl_int_t n, double alpha, double *a, armpl_int_t lda, armpl_int_t ldb);
void simatcopy(char order, char transa, armpl_int_t m, armpl_int_t n, float alpha, float *a, armpl_int_t lda, armpl_int_t ldb);
void somatcopy(char order, char transa, armpl_int_t m, armpl_int_t n, float alpha, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
void zimatcopy(char order, char transa, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t alpha, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t ldb);
void zomatcopy(char order, char transa, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t alpha, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);

/* LAPACK routines */
void cbbcsd_(const char *jobu1, const char *jobu2, const char *jobv1t, const char *jobv2t, const char *trans, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *theta, float *phi, armpl_singlecomplex_t *u1, const armpl_int_t *ldu1, armpl_singlecomplex_t *u2, const armpl_int_t *ldu2, armpl_singlecomplex_t *v1t, const armpl_int_t *ldv1t, armpl_singlecomplex_t *v2t, const armpl_int_t *ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void cbdsqr_(const char *uplo, const armpl_int_t *n, const armpl_int_t *ncvt, const armpl_int_t *nru, const armpl_int_t *ncc, float *d, float *e, armpl_singlecomplex_t *vt, const armpl_int_t *ldvt, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *c, const armpl_int_t *ldc, float *rwork, armpl_int_t *info, ... );
void cgbbrd_(const char *vect, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ncc, const armpl_int_t *kl, const armpl_int_t *ku, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *d, float *e, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *pt, const armpl_int_t *ldpt, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgbcon_(const char *norm, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgbequ_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void cgbequb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void cgbrfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgbrfsx_(const char *trans, const char *equed, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgbsv_(const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info);
void cgbsvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgbsvxx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgbtf2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void cgbtrf_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void cgbtrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cgebak_(const char *job, const char *side, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const float *scale, const armpl_int_t *m, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_int_t *info, ... );
void cgebal_(const char *job, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, armpl_int_t *info, ... );
void cgebd2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tauq, armpl_singlecomplex_t *taup, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgebrd_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tauq, armpl_singlecomplex_t *taup, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgecon_(const char *norm, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgedmd_(const char *jobs, const char *jobz, const char *jobr, const char *jobf, const armpl_int_t *whtsvd, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *ldx, armpl_singlecomplex_t *y, const armpl_int_t *ldy, const armpl_int_t *nrnk, const float *tol, armpl_int_t *k, armpl_singlecomplex_t *eigs, armpl_singlecomplex_t *z, const armpl_int_t *ldz, float *res, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *w, const armpl_int_t *ldw, armpl_singlecomplex_t *s, const armpl_int_t *lds, armpl_singlecomplex_t *zwork, const armpl_int_t *lzwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ...);
void cgedmdq_(const char *jobs, const char *jobz, const char *jobr, const char *jobq, const char *jobt, const char *jobf, const armpl_int_t *whtsvd, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *f, const armpl_int_t *ldf, armpl_singlecomplex_t *x, const armpl_int_t *ldx, armpl_singlecomplex_t *y, const armpl_int_t *ldy, const armpl_int_t *nrnk, const float *tol, armpl_int_t *k, armpl_singlecomplex_t *eigs, armpl_singlecomplex_t *z, const armpl_int_t *ldz, float *res, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_singlecomplex_t *s, const armpl_int_t *lds, const armpl_int_t *lzwork, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ...);
void cgeequ_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void cgeequb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void cgees_(const char *jobvs, const char *sort, ARMPL_CGEES_SELECT select, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *sdim, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vs, const armpl_int_t *ldvs, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void cgeesx_(const char *jobvs, const char *sort, ARMPL_CGEESX_SELECT select, const char *sense, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *sdim, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vs, const armpl_int_t *ldvs, float *rconde, float *rcondv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void cgeev_(const char *jobvl, const char *jobvr, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void cgeevx_(const char *balanc, const char *jobvl, const char *jobvr, const char *sense, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void cgehd2_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgehrd_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgejsv_(const char *joba, const char *jobu, const char *jobv, const char *jobr, const char *jobt, const char *jobp, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *sva, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_singlecomplex_t *cwork, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void cgelq2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgelq_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *tsize, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgelqf_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgelqt3_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void cgelqt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgels_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgelsd_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, float *s, const float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void cgelss_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, float *s, const float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info);
void cgelst_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgelsy_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *jpvt, const float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info);
void cgemlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *t, const armpl_int_t *tsize, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgemlqt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cgemqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *t, const armpl_int_t *tsize, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgemqrt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *nb, const armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cgeql2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgeqlf_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgeqp3_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info);
void cgeqp3rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *kmax, const float *abstol, const float *reltol, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *k, float *maxc2nrmk, float *relmaxc2nrmk, armpl_int_t *jpiv, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void cgeqr2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgeqr2p_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgeqr_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *tsize, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgeqrf_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgeqrfp_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgeqrt2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void cgeqrt3_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void cgeqrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgerfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgerfsx_(const char *trans, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgerq2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgerqf_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgesc2_(const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *rhs, const armpl_int_t *ipiv, const armpl_int_t *jpiv, float *scale);
void cgesdd_(const char *jobz, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *s, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *vt, const armpl_int_t *ldvt, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void cgesv_(const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info);
void cgesvd_(const char *jobu, const char *jobvt, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *s, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *vt, const armpl_int_t *ldvt, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void cgesvdq_(const char *joba, const char *jobp, const char *jobr, const char *jobu, const char *jobv, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *s, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_int_t *numrank, armpl_int_t *iwork, armpl_int_t *liwork, armpl_singlecomplex_t *cwork, const armpl_int_t *lcwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void cgesvdx_(const char *jobu, const char *jobvt, const char *range, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *ns, float *s, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *vt, const armpl_int_t *ldvt, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void cgesvj_(const char *joba, const char *jobu, const char *jobv, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *sva, const armpl_int_t *mv, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_singlecomplex_t *cwork, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void cgesvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgesvxx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgetc2_(const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *jpiv, armpl_int_t *info);
void cgetf2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void cgetrf2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void cgetrf_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void cgetri_(const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgetrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cgetsls_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgetsqrhrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb1, const armpl_int_t *nb1, const armpl_int_t *nb2, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cggbak_(const char *job, const char *side, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const float *lscale, const float *rscale, const armpl_int_t *m, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_int_t *info, ... );
void cggbal_(const char *job, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *work, armpl_int_t *info, ... );
void cgges3_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_CGGES3_SELCTG selctg, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, const armpl_int_t *ldvsl, armpl_singlecomplex_t *vsr, const armpl_int_t *ldvsr, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void cgges_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_CGGES_SELCTG selctg, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, const armpl_int_t *ldvsl, armpl_singlecomplex_t *vsr, const armpl_int_t *ldvsr, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void cggesx_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_CGGESX_SELCTG selctg, const char *sense, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, const armpl_int_t *ldvsl, armpl_singlecomplex_t *vsr, const armpl_int_t *ldvsr, float *rconde, float *rcondv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void cggev3_(const char *jobvl, const char *jobvr, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void cggev_(const char *jobvl, const char *jobvr, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void cggevx_(const char *balanc, const char *jobvl, const char *jobvr, const char *sense, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void cggglm_(const armpl_int_t *n, const armpl_int_t *m, const armpl_int_t *p, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *d, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cgghd3_(const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgghrd_(const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *info, ... );
void cgglse_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *p, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *c, armpl_singlecomplex_t *d, armpl_singlecomplex_t *x, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cggqrf_(const armpl_int_t *n, const armpl_int_t *m, const armpl_int_t *p, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *taua, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *taub, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cggrqf_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *taua, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *taub, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cggsvd3_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *p, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, float *alpha, float *beta, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void cggsvp3_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, const float *tola, const float *tolb, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_int_t *iwork, float *rwork, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgsvj0_(const char *jobv, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *d, float *sva, const armpl_int_t *mv, armpl_singlecomplex_t *v, const armpl_int_t *ldv, const float *eps, const float *sfmin, const float *tol, const armpl_int_t *nsweep, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgsvj1_(const char *jobv, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *n1, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *d, float *sva, const armpl_int_t *mv, armpl_singlecomplex_t *v, const armpl_int_t *ldv, const float *eps, const float *sfmin, const float *tol, const armpl_int_t *nsweep, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cgtcon_(const char *norm, const armpl_int_t *n, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cgtrfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *dlf, const armpl_singlecomplex_t *df, const armpl_singlecomplex_t *duf, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgtsv_(const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info);
void cgtsvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, armpl_singlecomplex_t *dlf, armpl_singlecomplex_t *df, armpl_singlecomplex_t *duf, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cgttrf_(const armpl_int_t *n, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, armpl_int_t *info);
void cgttrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cgtts2_(const armpl_int_t *itrans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb);
void chb2st_kernels_(const char *uplo, const armpl_int_t *wantz, const armpl_int_t *ttype, const armpl_int_t *st, const armpl_int_t *ed, const armpl_int_t *sweep, const armpl_int_t *n, const armpl_int_t *nb, const armpl_int_t *ib, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *v, armpl_singlecomplex_t *tau, const armpl_int_t *ldvt, const armpl_singlecomplex_t *work, ... );
void chbev_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void chbev_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void chbevd_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void chbevd_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void chbevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *q, const armpl_int_t *ldq, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void chbevx_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *q, const armpl_int_t *ldq, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void chbgst_(const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *bb, const armpl_int_t *ldbb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void chbgv_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *bb, const armpl_int_t *ldbb, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void chbgvd_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *bb, const armpl_int_t *ldbb, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void chbgvx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *bb, const armpl_int_t *ldbb, armpl_singlecomplex_t *q, const armpl_int_t *ldq, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void chbtrd_(const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *d, float *e, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void checon_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void checon_3_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void checon_rook_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cheequb_(char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *s, float *scond, float *amax, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cheev_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *w, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void cheev_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *w, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void cheevd_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *w, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void cheevd_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *w, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void cheevr_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *isuppz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void cheevr_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *isuppz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void cheevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void cheevx_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void chegs2_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void chegst_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void chegv_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, float *w, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void chegv_2stage_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, float *w, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void chegvd_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, float *w, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void chegvx_(const armpl_int_t *itype, const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void cherfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cherfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *s, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void chesv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chesv_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chesv_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chesv_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chesv_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chesvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void chesvxx_(const char *fact, char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *s, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cheswapr_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *i1, const armpl_int_t *i2, ... );
void chetd2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tau, armpl_int_t *info, ... );
void chetf2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void chetf2_rk_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void chetf2_rook_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void chetrd_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrd_2stage_(const char *vect, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *hous2, const armpl_int_t *lhous2, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrd_hb2st_(const char *stage1, const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *d, float *e, armpl_singlecomplex_t *hous, const armpl_int_t *lhous, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrd_he2hb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrf_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrf_aa_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrf_aa_2stage_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrf_rk_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrf_rook_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetri2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetri2x_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void chetri_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void chetri_3_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetri_3x_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void chetri_rook_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void chetrs2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void chetrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void chetrs_3_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void chetrs_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void chetrs_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tb, const armpl_int_t *ltb, const armpl_int_t *ipiv, const armpl_int_t *ipiv2, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void chetrs_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void chfrk_(const char *transr, const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *beta, armpl_singlecomplex_t *c, ... );
void chgeqz_(const char *job, const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *h, const armpl_int_t *ldh, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
char chla_transtype_(const armpl_int_t *trans);
void chpcon_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void chpev_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void chpevd_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void chpevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void chpgst_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *bp, armpl_int_t *info, ... );
void chpgv_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void chpgvd_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void chpgvx_(const armpl_int_t *itype, const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void chprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void chpsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void chpsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void chptrd_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, float *d, float *e, armpl_singlecomplex_t *tau, armpl_int_t *info, ... );
void chptrf_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_int_t *info, ... );
void chptri_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void chptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void chsein_(const char *side, const char *eigsrc, const char *initv, const armpl_int_t *select, const armpl_int_t *n, const armpl_singlecomplex_t *h, const armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *ifaill, armpl_int_t *ifailr, armpl_int_t *info, ... );
void chseqr_(const char *job, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *h, const armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cla_gbamv_(const armpl_int_t *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const float *alpha, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy);
float cla_gbrcond_c_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const float *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
float cla_gbrcond_x_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_singlecomplex_t *x, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
void cla_gbrfsx_extended_(const armpl_int_t *prec_type, const armpl_int_t *trans_type, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_int_t *colequ, const float *c, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info);
float cla_gbrpvgrw_(const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *ncols, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *afb, const armpl_int_t *ldafb);
void cla_geamv_(const armpl_int_t *trans, const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy);
float cla_gercond_c_(const char *trans, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
float cla_gercond_x_(const char *trans, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *x, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
void cla_gerfsx_extended_(const armpl_int_t *prec_type, const armpl_int_t *trans_type, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const float *c, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *errs_n, float *errs_c, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info);
float cla_gerpvgrw_(const armpl_int_t *n, const armpl_int_t *ncols, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf);
void cla_heamv_(const armpl_int_t *uplo, const armpl_int_t *n, const float *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy);
float cla_hercond_c_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
float cla_hercond_x_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *x, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
void cla_herfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const float *c, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
float cla_herpvgrw_(const char *uplo, const armpl_int_t *n, const armpl_int_t *info, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, float *work, ... );
void cla_lin_berr_(const armpl_int_t *n, const armpl_int_t *nz, const armpl_int_t *nrhs, const armpl_singlecomplex_t *res, const float *ayb, float *berr);
float cla_porcond_c_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const float *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
float cla_porcond_x_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_singlecomplex_t *x, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
void cla_porfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *colequ, const float *c, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
float cla_porpvgrw_(const char *uplo, const armpl_int_t *ncols, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, float *work, ... );
void cla_syamv_(const armpl_int_t *uplo, const armpl_int_t *n, const float *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy);
float cla_syrcond_c_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
float cla_syrcond_x_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *x, armpl_int_t *info, const armpl_singlecomplex_t *work, const float *rwork, ... );
void cla_syrfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const float *c, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
float cla_syrpvgrw_(const char *uplo, const armpl_int_t *n, const armpl_int_t *info, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, float *work, ... );
void cla_wwaddw_(const armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, const armpl_singlecomplex_t *w);
void clabrd_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tauq, armpl_singlecomplex_t *taup, armpl_singlecomplex_t *x, const armpl_int_t *ldx, armpl_singlecomplex_t *y, const armpl_int_t *ldy);
void clacgv_(const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *incx);
void clacn2_(const armpl_int_t *n, armpl_singlecomplex_t *v, armpl_singlecomplex_t *x, float *est, armpl_int_t *kase, armpl_int_t *isave);
void clacon_(const armpl_int_t *n, armpl_singlecomplex_t *v, armpl_singlecomplex_t *x, float *est, armpl_int_t *kase);
void clacp2_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, ... );
void clacpy_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, ... );
void clacrm_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, armpl_singlecomplex_t *c, const armpl_int_t *ldc, float *rwork);
void clacrt_(const armpl_int_t *n, armpl_singlecomplex_t *cx, const armpl_int_t *incx, armpl_singlecomplex_t *cy, const armpl_int_t *incy, const armpl_singlecomplex_t *c, const armpl_singlecomplex_t *s);
SINGLECOMPLEX_RET_VALUE cladiv_(SINGLECOMPLEX_RET_PARAM const armpl_singlecomplex_t *x, const armpl_singlecomplex_t *y);
void claed0_(const armpl_int_t *qsiz, const armpl_int_t *n, float *d, float *e, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *qstore, const armpl_int_t *ldqs, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void claed7_(const armpl_int_t *n, const armpl_int_t *cutpnt, const armpl_int_t *qsiz, const armpl_int_t *tlvls, const armpl_int_t *curlvl, const armpl_int_t *curpbm, float *d, armpl_singlecomplex_t *q, const armpl_int_t *ldq, const float *rho, armpl_int_t *indxq, float *qstore, armpl_int_t *qptr, const armpl_int_t *prmptr, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const float *givnum, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void claed8_(armpl_int_t *k, const armpl_int_t *n, const armpl_int_t *qsiz, armpl_singlecomplex_t *q, const armpl_int_t *ldq, float *d, float *rho, const armpl_int_t *cutpnt, const float *z, float *dlamda, armpl_singlecomplex_t *q2, const armpl_int_t *ldq2, float *w, armpl_int_t *indxp, armpl_int_t *indx, const armpl_int_t *indxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, float *givnum, armpl_int_t *info);
void claein_(const armpl_int_t *rightv, const armpl_int_t *noinit, const armpl_int_t *n, const armpl_singlecomplex_t *h, const armpl_int_t *ldh, const armpl_singlecomplex_t *w, armpl_singlecomplex_t *v, armpl_singlecomplex_t *b, const armpl_int_t *ldb, float *rwork, const float *eps3, const float *smlnum, armpl_int_t *info);
void claesy_(const armpl_singlecomplex_t *a, const armpl_singlecomplex_t *b, const armpl_singlecomplex_t *c, armpl_singlecomplex_t *rt1, armpl_singlecomplex_t *rt2, armpl_singlecomplex_t *evscal, armpl_singlecomplex_t *cs1, armpl_singlecomplex_t *sn1);
void claev2_(const armpl_singlecomplex_t *a, const armpl_singlecomplex_t *b, const armpl_singlecomplex_t *c, float *rt1, float *rt2, float *cs1, armpl_singlecomplex_t *sn1);
void clag2z_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *sa, const armpl_int_t *ldsa, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info);
void clags2_(const armpl_int_t *upper, const float *a1, const armpl_singlecomplex_t *a2, const float *a3, const float *b1, const armpl_singlecomplex_t *b2, const float *b3, float *csu, armpl_singlecomplex_t *snu, float *csv, armpl_singlecomplex_t *snv, float *csq, armpl_singlecomplex_t *snq);
void clagtm_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const float *alpha, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *x, const armpl_int_t *ldx, const float *beta, armpl_singlecomplex_t *b, const armpl_int_t *ldb, ... );
void clahef_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void clahef_aa_(const char *uplo, const armpl_int_t *j1, const armpl_int_t *m, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *h, const armpl_int_t *ldh, armpl_singlecomplex_t *work, ... );
void clahef_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void clahef_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void clahqr_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *h, const armpl_int_t *ldh, armpl_singlecomplex_t *w, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *info);
void clahr2_(const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *y, const armpl_int_t *ldy);
void claic1_(const armpl_int_t *job, const armpl_int_t *j, const armpl_singlecomplex_t *x, const float *sest, const armpl_singlecomplex_t *w, const armpl_singlecomplex_t *gamma, float *sestpr, armpl_singlecomplex_t *s, armpl_singlecomplex_t *c);
void clals0_(const armpl_int_t *icompq, const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, const armpl_int_t *nrhs, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *bx, const armpl_int_t *ldbx, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const armpl_int_t *ldgcol, const float *givnum, const armpl_int_t *ldgnum, const float *poles, const float *difl, const float *difr, const float *z, const armpl_int_t *k, const float *c, const float *s, float *rwork, armpl_int_t *info);
void clalsa_(const armpl_int_t *icompq, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *bx, const armpl_int_t *ldbx, const float *u, const armpl_int_t *ldu, const float *vt, const armpl_int_t *k, const float *difl, const float *difr, const float *z, const float *poles, const armpl_int_t *givptr, const armpl_int_t *givcol, const armpl_int_t *ldgcol, const armpl_int_t *perm, const float *givnum, const float *c, const float *s, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void clalsd_(const char *uplo, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *nrhs, float *d, float *e, armpl_singlecomplex_t *b, const armpl_int_t *ldb, const float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void clamswlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void clamtsqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
float clangb_(const char *norm, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *work, ... );
float clange_(const char *norm, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *work, ... );
float clangt_(const char *norm, const armpl_int_t *n, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, ... );
float clanhb_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *work, ... );
float clanhe_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *work, ... );
float clanhf_(const char *norm, const char *transr, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, float *work, ... );
float clanhp_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, float *work, ... );
float clanhs_(const char *norm, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *work, ... );
float clanht_(const char *norm, const armpl_int_t *n, const float *d, const armpl_singlecomplex_t *e, ... );
float clansb_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *work, ... );
float clansp_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, float *work, ... );
float clansy_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *work, ... );
float clantb_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *work, ... );
float clantp_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_singlecomplex_t *ap, float *work, ... );
float clantr_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *work, ... );
void clapll_(const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *y, const armpl_int_t *incy, float *ssmin);
void clapmr_(const armpl_int_t *forwrd, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *ldx, armpl_int_t *k);
void clapmt_(const armpl_int_t *forwrd, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *ldx, armpl_int_t *k);
void claqgb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const float *r, const float *c, const float *rowcnd, const float *colcnd, const float *amax, char *equed, ... );
void claqge_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *r, const float *c, const float *rowcnd, const float *colcnd, const float *amax, char *equed, ... );
void claqhb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *s, const float *scond, const float *amax, char *equed, ... );
void claqhe_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *s, const float *scond, const float *amax, char *equed, ... );
void claqhp_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, const float *s, const float *scond, const float *amax, char *equed, ... );
void claqp2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *offset, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, float *vn1, float *vn2, armpl_singlecomplex_t *work);
void claqp2rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *ioffset, const armpl_int_t *kmax, const float *abstol, const float *reltol, const armpl_int_t *kp1, const float *maxc2nrm, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *k, float *maxc2nrmk, float *relmaxc2nrmk, armpl_int_t *jpiv, armpl_singlecomplex_t *tau, float *vn1, float *vn2, armpl_singlecomplex_t *work, armpl_int_t *info);
void claqp3rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *ioffset, const armpl_int_t *nb, const float *abstol, const float *reltol, const armpl_int_t *kp1, const float *maxc2nrm, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *done, armpl_int_t *kb, float *maxc2nrmk, float *relmaxc2nrmk, armpl_int_t *jpiv, armpl_singlecomplex_t *tau, float *vn1, float *vn2, armpl_singlecomplex_t *auxv, armpl_singlecomplex_t *f, const armpl_int_t *ldf, armpl_int_t *iwork, armpl_int_t *info);
void claqps_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *offset, const armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, float *vn1, float *vn2, armpl_singlecomplex_t *auxv, armpl_singlecomplex_t *f, const armpl_int_t *ldf);
void claqr0_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *h, const armpl_int_t *ldh, armpl_singlecomplex_t *w, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void claqr1_(const armpl_int_t *n, const armpl_singlecomplex_t *h, const armpl_int_t *ldh, const armpl_singlecomplex_t *s1, armpl_singlecomplex_t *s2, armpl_singlecomplex_t *v);
void claqr2_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nw, armpl_singlecomplex_t *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_singlecomplex_t *sh, armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_int_t *nh, armpl_singlecomplex_t *t, const armpl_int_t *ldt, const armpl_int_t *nv, armpl_singlecomplex_t *wv, const armpl_int_t *ldwv, armpl_singlecomplex_t *work, const armpl_int_t *lwork);
void claqr3_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nw, armpl_singlecomplex_t *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_singlecomplex_t *sh, armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_int_t *nh, armpl_singlecomplex_t *t, const armpl_int_t *ldt, const armpl_int_t *nv, armpl_singlecomplex_t *wv, const armpl_int_t *ldwv, armpl_singlecomplex_t *work, const armpl_int_t *lwork);
void claqr4_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *h, const armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void claqr5_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *kacc22, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nshfts, armpl_singlecomplex_t *s, armpl_singlecomplex_t *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_singlecomplex_t *u, const armpl_int_t *ldu, const armpl_int_t *nv, armpl_singlecomplex_t *wv, const armpl_int_t *ldwv, const armpl_int_t *nh, armpl_singlecomplex_t *wh, const armpl_int_t *ldwh);
void claqsb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const float *s, const float *scond, const float *amax, char *equed, ... );
void claqsp_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, const float *s, const float *scond, const float *amax, char *equed, ... );
void claqsy_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *s, const float *scond, const float *amax, char *equed, ... );
void claqz0_(const char *wants, const char *wantq, const char *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t rec, armpl_int_t *info, ... );
void claqz1_(const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *k, const armpl_int_t *istartm, const armpl_int_t *istopm, const armpl_int_t *ihi, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_int_t *nq, const armpl_int_t *qstart, armpl_singlecomplex_t *q, const armpl_int_t *ldq, const armpl_int_t *nz, const armpl_int_t *zstart, armpl_singlecomplex_t *z, const armpl_int_t *ldz);
void claqz2_(const armpl_int_t *ilschur, const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *nw, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *qc, const armpl_int_t *ldqc, armpl_singlecomplex_t *zc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *rec, armpl_int_t *info);
void claqz3_(const armpl_int_t *ilschur, const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *nshifts, const armpl_int_t *nblock_desired, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *qc, const armpl_int_t *ldqc, armpl_singlecomplex_t *zc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void clar1v_(const armpl_int_t *n, const armpl_int_t *b1, const armpl_int_t *bn, const float *lambda, const float *d, const float *l, const float *ld, const float *lld, const float *pivmin, const float *gaptol, armpl_singlecomplex_t *z, const armpl_int_t *wantnc, armpl_int_t *negcnt, float *ztz, float *mingma, armpl_int_t *r, armpl_int_t *isuppz, float *nrminv, float *resid, float *rqcorr, float *work);
void clar2v_(const armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, armpl_singlecomplex_t *z, const armpl_int_t *incx, const float *c, const armpl_singlecomplex_t *s, const armpl_int_t *incc);
void clarcm_(const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *c, const armpl_int_t *ldc, float *rwork);
void clarf_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *v, const armpl_int_t *incv, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, ... );
void clarfb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *ldwork, ... );
void clarfg_(const armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *tau);
void clarfgp_(const armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *tau);
void clarft_(const char *direct, const char *storev, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, const armpl_int_t *ldt, ... );
void clarfx_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *v, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, ... );
void clarfy_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *v, const armpl_int_t *incv, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, ... );
void clargv_(const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *y, const armpl_int_t *incy, float *c, const armpl_int_t *incc);
void clarnv_(const armpl_int_t *idist, armpl_int_t *iseed, const armpl_int_t *n, armpl_singlecomplex_t *x);
void clarrv_(const armpl_int_t *n, const float *vl, const float *vu, float *d, float *l, float *pivmin, const armpl_int_t *isplit, const armpl_int_t *m, const armpl_int_t *dol, const armpl_int_t *dou, const float *minrgp, const float *rtol1, const float *rtol2, float *w, float *werr, float *wgap, const armpl_int_t *iblock, const armpl_int_t *indexw, const float *gers, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *iwork, armpl_int_t *info);
void clarscl2_(const armpl_int_t *m, const armpl_int_t *n, const float *d, armpl_singlecomplex_t *x, const armpl_int_t *ldx);
void clartg_(const armpl_singlecomplex_t *f, const armpl_singlecomplex_t *g, float *cs, armpl_singlecomplex_t *sn, armpl_singlecomplex_t *r);
void clartv_(const armpl_int_t *n, armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *y, const armpl_int_t *incy, const float *c, const armpl_singlecomplex_t *s, const armpl_int_t *incc);
void clarz_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_singlecomplex_t *v, const armpl_int_t *incv, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, ... );
void clarzb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *ldwork, ... );
void clarzt_(const char *direct, const char *storev, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, const armpl_int_t *ldt, ... );
void clascl2_(const armpl_int_t *m, const armpl_int_t *n, const float *d, armpl_singlecomplex_t *x, const armpl_int_t *ldx);
void clascl_(const char *type, const armpl_int_t *kl, const armpl_int_t *ku, const float *cfrom, const float *cto, const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void claset_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *a, const armpl_int_t *lda, ... );
void clasr_(const char *side, const char *pivot, const char *direct, const armpl_int_t *m, const armpl_int_t *n, const float *c, const float *s, armpl_singlecomplex_t *a, const armpl_int_t *lda, ... );
void classq_(const armpl_int_t *n, const armpl_singlecomplex_t *x, const armpl_int_t *incx, float *scale, float *sumsq);
void claswlq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void claswp_(const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *k1, const armpl_int_t *k2, const armpl_int_t *ipiv, const armpl_int_t *incx);
void clasyf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void clasyf_aa_(const char *uplo, const armpl_int_t *j1, const armpl_int_t *m, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *h, const armpl_int_t *ldh, armpl_singlecomplex_t *work, ... );
void clasyf_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void clasyf_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void clatbs_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_int_t *kd, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *x, float *scale, float *cnorm, armpl_int_t *info, ... );
void clatdf_(const armpl_int_t *ijob, const armpl_int_t *n, const armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *rhs, float *rdsum, float *rdscal, const armpl_int_t *ipiv, const armpl_int_t *jpiv);
void clatps_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *x, float *scale, float *cnorm, armpl_int_t *info, ... );
void clatrd_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, float *e, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *w, const armpl_int_t *ldw, ... );
void clatrs_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *x, float *scale, float *cnorm, armpl_int_t *info, ... );
void clatrs3_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *scale, float *cnorm, float *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void clatrz_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work);
void clatsqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void clauu2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void clauum_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void claunhr_col_getrfnp_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *A, const armpl_int_t *lda, armpl_singlecomplex_t *D, armpl_int_t *info);
void claunhr_col_getrfnp2_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *A, const armpl_int_t *lda, armpl_singlecomplex_t *D, armpl_int_t *info);
void cpbcon_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cpbequ_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *s, float *scond, float *amax, armpl_int_t *info, ... );
void cpbrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cpbstf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void cpbsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cpbsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *afb, const armpl_int_t *ldafb, char *equed, float *s, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cpbtf2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void cpbtrf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void cpbtrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cpftrf_(const char *transr, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *info, ... );
void cpftri_(const char *transr, const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *info, ... );
void cpftrs_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cpocon_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cpoequ_(const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *s, float *scond, float *amax, armpl_int_t *info);
void cpoequb_(const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *s, float *scond, float *amax, armpl_int_t *info);
void cporfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cporfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const float *s, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cposv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cposvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *af, const armpl_int_t *ldaf, char *equed, float *s, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cposvxx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *af, const armpl_int_t *ldaf, char *equed, float *s, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cpotf2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void cpotrf2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void cpotrf_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void cpotri_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void cpotrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cppcon_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, const float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cppequ_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, float *s, float *scond, float *amax, armpl_int_t *info, ... );
void cpprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cppsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cppsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, char *equed, float *s, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cpptrf_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *info, ... );
void cpptri_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *info, ... );
void cpptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cpstf2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, const float *tol, float *work, armpl_int_t *info, ... );
void cpstrf_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, const float *tol, float *work, armpl_int_t *info, ... );
void cptcon_(const armpl_int_t *n, const float *d, const armpl_singlecomplex_t *e, const float *anorm, float *rcond, float *rwork, armpl_int_t *info);
void cpteqr_(const char *compz, const armpl_int_t *n, float *d, float *e, armpl_singlecomplex_t *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void cptrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *d, const armpl_singlecomplex_t *e, const float *df, const armpl_singlecomplex_t *ef, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cptsv_(const armpl_int_t *n, const armpl_int_t *nrhs, float *d, armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info);
void cptsvx_(const char *fact, const armpl_int_t *n, const armpl_int_t *nrhs, const float *d, const armpl_singlecomplex_t *e, float *df, armpl_singlecomplex_t *ef, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cpttrf_(const armpl_int_t *n, float *d, armpl_singlecomplex_t *e, armpl_int_t *info);
void cpttrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *d, const armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cptts2_(const armpl_int_t *iuplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *d, const armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, const armpl_int_t *ldb);
void crot_(const armpl_int_t *n, armpl_singlecomplex_t *cx, const armpl_int_t *incx, armpl_singlecomplex_t *cy, const armpl_int_t *incy, const float *c, const armpl_singlecomplex_t *s);
void crscl_(const armpl_int_t *n, const armpl_singlecomplex_t *a, armpl_singlecomplex_t *x, const armpl_int_t *incx);
void cspcon_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cspmv_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy, ... );
void cspr_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *ap, ... );
void csprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void cspsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void cspsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void csptrf_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_int_t *info, ... );
void csptri_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void csptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void csrscl_(const armpl_int_t *n, const float *sa, armpl_singlecomplex_t *sx, const armpl_int_t *incx);
void cstedc_(const char *compz, const armpl_int_t *n, float *d, float *e, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void cstegr_(const char *jobz, const char *range, const armpl_int_t *n, float *d, float *e, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *isuppz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void cstein_(const armpl_int_t *n, const float *d, const float *e, const armpl_int_t *m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, armpl_singlecomplex_t *z, const armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info);
void cstemr_(const char *jobz, const char *range, const armpl_int_t *n, float *d, float *e, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, const armpl_int_t *ldz, const armpl_int_t *nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void csteqr_(const char *compz, const armpl_int_t *n, float *d, float *e, armpl_singlecomplex_t *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void csycon_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void csycon_3_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void csycon_rook_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void csyconv_(const char *uplo, const char *way, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *e, armpl_int_t *info, ... );
void csyconvf_(const char *uplo, const char *way, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void csyconvf_rook_(const char *uplo, const char *way, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_int_t *info, ... );
void csyequb_(char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *s, float *scond, float *amax, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void csymv_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *x, const armpl_int_t *incx, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, const armpl_int_t *incy, ... );
void csyr_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *x, const armpl_int_t *incx, armpl_singlecomplex_t *a, const armpl_int_t *lda, ... );
void csyrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void csyrfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *s, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void csysv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csysv_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csysv_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csysv_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csysv_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csysvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, armpl_int_t *info, ... );
void csysvxx_(const char *fact, char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *s, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void csyswapr_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *i1, const armpl_int_t *i2, ... );
void csytf2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void csytf2_rk_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void csytf2_rook_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void csytrf_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csytrf_aa_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csytrf_aa_2stage_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csytrf_rk_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csytrf_rook_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csytri2_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csytri2x_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void csytri_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void csytri_3_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csytri_3x_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void csytri_rook_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void csytrs2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void csytrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void csytrs_3_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void csytrs_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void csytrs_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tb, const armpl_int_t *ltb, const armpl_int_t *ipiv, const armpl_int_t *ipiv2, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void csytrs_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ctbcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void ctbrfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void ctbtrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ab, const armpl_int_t *ldab, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ctfsm_(const char *transr, const char *side, const char *uplo, const char *trans, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, const armpl_int_t *ldb, ... );
void ctftri_(const char *transr, const char *uplo, const char *diag, const armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *info, ... );
void ctfttp_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *arf, armpl_singlecomplex_t *ap, armpl_int_t *info, ... );
void ctfttr_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *arf, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void ctgevc_(const char *side, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const armpl_singlecomplex_t *s, const armpl_int_t *lds, const armpl_singlecomplex_t *p, const armpl_int_t *ldp, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void ctgex2_(const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, const armpl_int_t *j1, armpl_int_t *info);
void ctgexc_(const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, const armpl_int_t *ifst, armpl_int_t *ilst, armpl_int_t *info);
void ctgsen_(const armpl_int_t *ijob, const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *select, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *m, float *pl, float *pr, float *dif, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info);
void ctgsja_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, const float *tola, const float *tolb, float *alpha, float *beta, armpl_singlecomplex_t *u, const armpl_int_t *ldu, armpl_singlecomplex_t *v, const armpl_int_t *ldv, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *work, armpl_int_t *ncycle, armpl_int_t *info, ... );
void ctgsna_(const char *job, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, const armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, float *s, float *dif, const armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void ctgsy2_(const char *trans, const armpl_int_t *ijob, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *c, const armpl_int_t *ldc, const armpl_singlecomplex_t *d, const armpl_int_t *ldd, const armpl_singlecomplex_t *e, const armpl_int_t *lde, armpl_singlecomplex_t *f, const armpl_int_t *ldf, float *scale, float *rdsum, float *rdscal, armpl_int_t *info, ... );
void ctgsyl_(const char *trans, const armpl_int_t *ijob, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *c, const armpl_int_t *ldc, const armpl_singlecomplex_t *d, const armpl_int_t *ldd, const armpl_singlecomplex_t *e, const armpl_int_t *lde, armpl_singlecomplex_t *f, const armpl_int_t *ldf, float *scale, float *dif, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void ctpcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_singlecomplex_t *ap, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void ctplqt2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void ctplqt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_int_t *mb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, armpl_int_t *info);
void ctpmlqt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_int_t *mb, const armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void ctpmqrt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_int_t *nb, const armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void ctpqrt2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void ctpqrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, armpl_int_t *info);
void ctprfb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_singlecomplex_t *v, const armpl_int_t *ldv, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *work, const armpl_int_t *ldwork, ... );
void ctprfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void ctptri_(const char *uplo, const char *diag, const armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *info, ... );
void ctptrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ctpttf_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *arf, armpl_int_t *info, ... );
void ctpttr_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void ctrcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void ctrevc3_(const char *side, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void ctrevc_(const char *side, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void ctrexc_(const char *compq, const armpl_int_t *n, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *q, const armpl_int_t *ldq, const armpl_int_t *ifst, const armpl_int_t *ilst, armpl_int_t *info, ... );
void ctrrfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, const armpl_singlecomplex_t *x, const armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info, ... );
void ctrsen_(const char *job, const char *compq, const armpl_int_t *select, const armpl_int_t *n, armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *w, armpl_int_t *m, float *s, float *sep, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ctrsna_(const char *job, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, const armpl_singlecomplex_t *vl, const armpl_int_t *ldvl, const armpl_singlecomplex_t *vr, const armpl_int_t *ldvr, float *s, float *sep, const armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, const armpl_int_t *ldwork, float *rwork, armpl_int_t *info, ... );
void ctrsyl_(const char *trana, const char *tranb, const armpl_int_t *isgn, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *c, const armpl_int_t *ldc, float *scale, armpl_int_t *info, ... );
void ctrsyl3_(const char *trana, const char *tranb, const armpl_int_t *isgn, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_singlecomplex_t *c, const armpl_int_t *ldc, float *scale, float *swork, const armpl_int_t *ldswork, armpl_int_t *info, ... );
void ctrti2_(const char *uplo, const char *diag, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void ctrtri_(const char *uplo, const char *diag, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void ctrtrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ctrttf_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *arf, armpl_int_t *info, ... );
void ctrttp_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *ap, armpl_int_t *info, ... );
void ctzrzf_(const armpl_int_t *m, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cunbdb1_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_singlecomplex_t *x11, const armpl_int_t *ldx11, armpl_singlecomplex_t *x21, const armpl_int_t *ldx21, float *theta, float *phi, armpl_singlecomplex_t *taup1, armpl_singlecomplex_t *taup2, armpl_singlecomplex_t *tauq1, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cunbdb2_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_singlecomplex_t *x11, const armpl_int_t *ldx11, armpl_singlecomplex_t *x21, const armpl_int_t *ldx21, float *theta, float *phi, armpl_singlecomplex_t *taup1, armpl_singlecomplex_t *taup2, armpl_singlecomplex_t *tauq1, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cunbdb3_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_singlecomplex_t *x11, const armpl_int_t *ldx11, armpl_singlecomplex_t *x21, const armpl_int_t *ldx21, float *theta, float *phi, armpl_singlecomplex_t *taup1, armpl_singlecomplex_t *taup2, armpl_singlecomplex_t *tauq1, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cunbdb4_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_singlecomplex_t *x11, const armpl_int_t *ldx11, armpl_singlecomplex_t *x21, const armpl_int_t *ldx21, float *theta, float *phi, armpl_singlecomplex_t *taup1, armpl_singlecomplex_t *taup2, armpl_singlecomplex_t *tauq1, armpl_singlecomplex_t *phantom, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cunbdb5_(const armpl_int_t *m1, const armpl_int_t *m2, const armpl_int_t *n, armpl_singlecomplex_t *x1, const armpl_int_t *incx1, armpl_singlecomplex_t *x2, const armpl_int_t *incx2, armpl_singlecomplex_t *q1, const armpl_int_t *ldq1, armpl_singlecomplex_t *q2, const armpl_int_t *ldq2, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cunbdb6_(const armpl_int_t *m1, const armpl_int_t *m2, const armpl_int_t *n, armpl_singlecomplex_t *x1, const armpl_int_t *incx1, armpl_singlecomplex_t *x2, const armpl_int_t *incx2, armpl_singlecomplex_t *q1, const armpl_int_t *ldq1, armpl_singlecomplex_t *q2, const armpl_int_t *ldq2, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cunbdb_(const char *trans, const char *signs, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_singlecomplex_t *x11, const armpl_int_t *ldx11, armpl_singlecomplex_t *x12, const armpl_int_t *ldx12, armpl_singlecomplex_t *x21, const armpl_int_t *ldx21, armpl_singlecomplex_t *x22, const armpl_int_t *ldx22, float *theta, float *phi, armpl_singlecomplex_t *taup1, armpl_singlecomplex_t *taup2, armpl_singlecomplex_t *tauq1, armpl_singlecomplex_t *tauq2, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cuncsd2by1_(const char *jobu1, const char *jobu2, const char *jobv1t, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_singlecomplex_t *x11, const armpl_int_t *ldx11, armpl_singlecomplex_t *x21, const armpl_int_t *ldx21, float *theta, armpl_singlecomplex_t *u1, const armpl_int_t *ldu1, armpl_singlecomplex_t *u2, const armpl_int_t *ldu2, armpl_singlecomplex_t *v1t, const armpl_int_t *ldv1t, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void cuncsd_(const char *jobu1, const char *jobu2, const char *jobv1t, const char *jobv2t, const char *trans, const char *signs, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_singlecomplex_t *x11, const armpl_int_t *ldx11, armpl_singlecomplex_t *x12, const armpl_int_t *ldx12, armpl_singlecomplex_t *x21, const armpl_int_t *ldx21, armpl_singlecomplex_t *x22, const armpl_int_t *ldx22, float *theta, armpl_singlecomplex_t *u1, const armpl_int_t *ldu1, armpl_singlecomplex_t *u2, const armpl_int_t *ldu2, armpl_singlecomplex_t *v1t, const armpl_int_t *ldv1t, armpl_singlecomplex_t *v2t, const armpl_int_t *ldv2t, armpl_singlecomplex_t *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void cung2l_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cung2r_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cungbr_(const char *vect, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunghr_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cungl2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cunglq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cungql_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cungqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cungr2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cungrq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cungtr_(const char *uplo, const armpl_int_t *n, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cungtsqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cungtsqr_row_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void cunhr_col_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *t, const armpl_int_t *ldt, armpl_singlecomplex_t *d, armpl_int_t *info);
void cunm22_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *n1, const armpl_int_t *n2, const armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunm2l_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cunm2r_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cunmbr_(const char *vect, const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunmhr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunml2_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cunmlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunmql_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunmqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunmr2_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cunmr3_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cunmrq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunmrz_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cunmtr_(const char *side, const char *uplo, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void cupgtr_(const char *uplo, const armpl_int_t *n, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *q, const armpl_int_t *ldq, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void cupmtr_(const char *side, const char *uplo, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, const armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info, ... );
void dbbcsd_(const char *jobu1, const char *jobu2, const char *jobv1t, const char *jobv2t, const char *trans, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *theta, double *phi, double *u1, const armpl_int_t *ldu1, double *u2, const armpl_int_t *ldu2, double *v1t, const armpl_int_t *ldv1t, double *v2t, const armpl_int_t *ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dbdsdc_(const char *uplo, const char *compq, const armpl_int_t *n, double *d, double *e, double *u, const armpl_int_t *ldu, double *vt, const armpl_int_t *ldvt, double *q, armpl_int_t *iq, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dbdsqr_(const char *uplo, const armpl_int_t *n, const armpl_int_t *ncvt, const armpl_int_t *nru, const armpl_int_t *ncc, double *d, double *e, double *vt, const armpl_int_t *ldvt, double *u, const armpl_int_t *ldu, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dbdsvdx_(const char *uplo, const char *jobz, const char *range, const armpl_int_t *n, const double *d, const double *e, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *ns, double *s, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void ddisna_(const char *job, const armpl_int_t *m, const armpl_int_t *n, const double *d, double *sep, armpl_int_t *info, ... );
void dgbbrd_(const char *vect, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ncc, const armpl_int_t *kl, const armpl_int_t *ku, double *ab, const armpl_int_t *ldab, double *d, double *e, double *q, const armpl_int_t *ldq, double *pt, const armpl_int_t *ldpt, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dgbcon_(const char *norm, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const double *ab, const armpl_int_t *ldab, const armpl_int_t *ipiv, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgbequ_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const double *ab, const armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void dgbequb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const double *ab, const armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void dgbrfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const double *ab, const armpl_int_t *ldab, const double *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgbrfsx_(const char *trans, const char *equed, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const double *ab, const armpl_int_t *ldab, const double *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgbsv_(const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, double *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info);
void dgbsvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, double *ab, const armpl_int_t *ldab, double *afb, const armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgbsvxx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, double *ab, const armpl_int_t *ldab, double *afb, const armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgbtf2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, double *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void dgbtrf_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, double *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void dgbtrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const double *ab, const armpl_int_t *ldab, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dgebak_(const char *job, const char *side, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const double *scale, const armpl_int_t *m, double *v, const armpl_int_t *ldv, armpl_int_t *info, ... );
void dgebal_(const char *job, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, armpl_int_t *info, ... );
void dgebd2_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *d, double *e, double *tauq, double *taup, double *work, armpl_int_t *info);
void dgebrd_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *d, double *e, double *tauq, double *taup, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgecon_(const char *norm, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgedmd_(const char *jobs, const char *jobz, const char *jobr, const char *jobf, const armpl_int_t *whtsvd, const armpl_int_t *m, const armpl_int_t *n, float *x, const armpl_int_t *ldx, float *y, const armpl_int_t *ldy, const armpl_int_t *nrnk, const float *tol, armpl_int_t *k, float *reig, float *imeig, float *z, const armpl_int_t *ldz, float *res, float *b, const armpl_int_t *ldb, float *w, const armpl_int_t *ldw, float *s, const armpl_int_t *lds, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ...);
void dgedmdq_(const char *jobs, const char *jobz, const char *jobr, const char *jobq, const char *jobt, const char *jobf, const armpl_int_t *whtsvd, const armpl_int_t *m, const armpl_int_t *n, float *f, const armpl_int_t *ldf, float *x, const armpl_int_t *ldx, float *y, const armpl_int_t *ldy, const armpl_int_t *nrnk, const float *tol, armpl_int_t *k, float *reig, float *imeig, float *z, const armpl_int_t *ldz, float *res, float *b, const armpl_int_t *ldb, float *v, const armpl_int_t *ldv, float *s, const armpl_int_t *lds, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ...);
void dgeequ_(const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void dgeequb_(const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void dgees_(const char *jobvs, const char *sort, ARMPL_DGEES_SELECT select, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, const armpl_int_t *ldvs, double *work, const armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void dgeesx_(const char *jobvs, const char *sort, ARMPL_DGEESX_SELECT select, const char *sense, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, const armpl_int_t *ldvs, double *rconde, double *rcondv, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void dgeev_(const char *jobvl, const char *jobvr, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *wr, double *wi, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgeevx_(const char *balanc, const char *jobvl, const char *jobvr, const char *sense, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *wr, double *wi, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgehd2_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *a, const armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgehrd_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *a, const armpl_int_t *lda, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgejsv_(const char *joba, const char *jobu, const char *jobv, const char *jobr, const char *jobt, const char *jobp, const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *sva, double *u, const armpl_int_t *ldu, double *v, const armpl_int_t *ldv, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgelq2_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgelq_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *tsize, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgelqf_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgelqt3_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *ldt, armpl_int_t *info);
void dgelqt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *ldt, double *work, armpl_int_t *info);
void dgels_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgelsd_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *s, const double *rcond, armpl_int_t *rank, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info);
void dgelss_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *s, const double *rcond, armpl_int_t *rank, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgelst_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgelsy_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, armpl_int_t *jpvt, const double *rcond, armpl_int_t *rank, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgemlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *t, const armpl_int_t *tsize, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgemlqt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const double *v, const armpl_int_t *ldv, const double *t, const armpl_int_t *ldt, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dgemqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *t, const armpl_int_t *tsize, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgemqrt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *nb, const double *v, const armpl_int_t *ldv, const double *t, const armpl_int_t *ldt, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dgeql2_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgeqlf_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgeqp3_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *jpvt, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgeqp3rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *kmax, const double *abstol, const double *reltol, double *a, const armpl_int_t *lda, armpl_int_t *k, double *maxc2nrmk, double *relmaxc2nrmk, armpl_int_t *jpiv, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info);
void dgeqr2_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgeqr2p_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgeqr_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *tsize, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgeqrf_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgeqrfp_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgeqrt2_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *ldt, armpl_int_t *info);
void dgeqrt3_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *ldt, armpl_int_t *info);
void dgeqrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *ldt, double *work, armpl_int_t *info);
void dgerfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgerfsx_(const char *trans, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgerq2_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgerqf_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgesc2_(const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *rhs, const armpl_int_t *ipiv, const armpl_int_t *jpiv, double *scale);
void dgesdd_(const char *jobz, const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *s, double *u, const armpl_int_t *ldu, double *vt, const armpl_int_t *ldvt, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgesv_(const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info);
void dgesvd_(const char *jobu, const char *jobvt, const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *s, double *u, const armpl_int_t *ldu, double *vt, const armpl_int_t *ldvt, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgesvdq_(const char *joba, const char *jobp, const char *jobr, const char *jobu, const char *jobv, const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *s, double *u, const armpl_int_t *ldu, double *v, const armpl_int_t *ldv, armpl_int_t *numrank, armpl_int_t *iwork, armpl_int_t *liwork, double *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void dgesvdx_(const char *jobu, const char *jobvt, const char *range, const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *ns, double *s, double *u, const armpl_int_t *ldu, double *vt, const armpl_int_t *ldvt, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgesvj_(const char *joba, const char *jobu, const char *jobv, const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *sva, const armpl_int_t *mv, double *v, const armpl_int_t *ldv, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgesvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgesvxx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgetc2_(const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *jpiv, armpl_int_t *info);
void dgetf2_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void dgetrf2_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void dgetrf_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void dgetri_(const armpl_int_t *n, double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgetrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dgetsls_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgetsqrhrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb1, const armpl_int_t *nb1, const armpl_int_t *nb2, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *ldt, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dggbak_(const char *job, const char *side, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const double *lscale, const double *rscale, const armpl_int_t *m, double *v, const armpl_int_t *ldv, armpl_int_t *info, ... );
void dggbal_(const char *job, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *work, armpl_int_t *info, ... );
void dgges3_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_DGGES3_SELCTG selctg, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, const armpl_int_t *ldvsl, double *vsr, const armpl_int_t *ldvsr, double *work, const armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void dgges_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_DGGES_DELCTG delctg, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, const armpl_int_t *ldvsl, double *vsr, const armpl_int_t *ldvsr, double *work, const armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void dggesx_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_DGGESX_DELCTG delctg, const char *sense, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, const armpl_int_t *ldvsl, double *vsr, const armpl_int_t *ldvsr, double *rconde, double *rcondv, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void dggev3_(const char *jobvl, const char *jobvr, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dggev_(const char *jobvl, const char *jobvr, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dggevx_(const char *balanc, const char *jobvl, const char *jobvr, const char *sense, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void dggglm_(const armpl_int_t *n, const armpl_int_t *m, const armpl_int_t *p, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *d, double *x, double *y, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dgghd3_(const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgghrd_(const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, armpl_int_t *info, ... );
void dgglse_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *p, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *c, double *d, double *x, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dggqrf_(const armpl_int_t *n, const armpl_int_t *m, const armpl_int_t *p, double *a, const armpl_int_t *lda, double *taua, double *b, const armpl_int_t *ldb, double *taub, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dggrqf_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *taua, double *b, const armpl_int_t *ldb, double *taub, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dggsvd3_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *p, armpl_int_t *k, armpl_int_t *l, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *alpha, double *beta, double *u, const armpl_int_t *ldu, double *v, const armpl_int_t *ldv, double *q, const armpl_int_t *ldq, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dggsvp3_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, const double *tola, const double *tolb, armpl_int_t *k, armpl_int_t *l, double *u, const armpl_int_t *ldu, double *v, const armpl_int_t *ldv, double *q, const armpl_int_t *ldq, armpl_int_t *iwork, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgsvj0_(const char *jobv, const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *d, double *sva, const armpl_int_t *mv, double *v, const armpl_int_t *ldv, const double *eps, const double *sfmin, const double *tol, const armpl_int_t *nsweep, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgsvj1_(const char *jobv, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *n1, double *a, const armpl_int_t *lda, double *d, double *sva, const armpl_int_t *mv, double *v, const armpl_int_t *ldv, const double *eps, const double *sfmin, const double *tol, const armpl_int_t *nsweep, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dgtcon_(const char *norm, const armpl_int_t *n, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgtrfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const double *dl, const double *d, const double *du, const double *dlf, const double *df, const double *duf, const double *du2, const armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgtsv_(const armpl_int_t *n, const armpl_int_t *nrhs, double *dl, double *d, double *du, double *b, const armpl_int_t *ldb, armpl_int_t *info);
void dgtsvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const double *dl, const double *d, const double *du, double *dlf, double *df, double *duf, double *du2, armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dgttrf_(const armpl_int_t *n, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv, armpl_int_t *info);
void dgttrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dgtts2_(const armpl_int_t *itrans, const armpl_int_t *n, const armpl_int_t *nrhs, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb);
void dhgeqz_(const char *job, const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *h, const armpl_int_t *ldh, double *t, const armpl_int_t *ldt, double *alphar, double *alphai, double *beta, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dhsein_(const char *side, const char *eigsrc, const char *initv, armpl_int_t *select, const armpl_int_t *n, const double *h, const armpl_int_t *ldh, double *wr, const double *wi, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *ifaill, armpl_int_t *ifailr, armpl_int_t *info, ... );
void dhseqr_(const char *job, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *h, const armpl_int_t *ldh, double *wr, double *wi, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
armpl_int_t disnan_(const double *din);
void dla_gbamv_(const armpl_int_t *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const double *alpha, const double *ab, const armpl_int_t *ldab, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy);
double dla_gbrcond_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const double *ab, const armpl_int_t *ldab, const double *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_int_t *cmode, const double *c, armpl_int_t *info, double *work, armpl_int_t *iwork, ... );
void dla_gbrfsx_extended_(const armpl_int_t *prec_type, const armpl_int_t *trans_type, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const double *ab, const armpl_int_t *ldab, const double *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_int_t *colequ, const double *c, const double *b, const armpl_int_t *ldb, double *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info);
double dla_gbrpvgrw_(const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *ncols, const double *ab, const armpl_int_t *ldab, const double *afb, const armpl_int_t *ldafb);
void dla_geamv_(const armpl_int_t *trans, const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *a, const armpl_int_t *lda, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy);
double dla_gercond_(const char *trans, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *cmode, const double *c, armpl_int_t *info, double *work, armpl_int_t *iwork, ... );
void dla_gerfsx_extended_(const armpl_int_t *prec_type, const armpl_int_t *trans_type, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const double *c, const double *b, const armpl_int_t *ldb, double *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *errs_n, double *errs_c, double *res, double *ayb, double *dy, double *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info);
double dla_gerpvgrw_(const armpl_int_t *n, const armpl_int_t *ncols, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf);
void dla_lin_berr_(const armpl_int_t *n, const armpl_int_t *nz, const armpl_int_t *nrhs, const double *res, const double *ayb, double *berr);
double dla_porcond_(const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *cmode, const double *c, armpl_int_t *info, double *work, armpl_int_t *iwork, ... );
void dla_porfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *colequ, const double *c, const double *b, const armpl_int_t *ldb, double *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
double dla_porpvgrw_(const char *uplo, const armpl_int_t *ncols, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, double *work, ... );
void dla_syamv_(const armpl_int_t *uplo, const armpl_int_t *n, const double *alpha, const double *a, const armpl_int_t *lda, const double *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy);
double dla_syrcond_(const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *cmode, const double *c, armpl_int_t *info, double *work, armpl_int_t *iwork, ... );
void dla_syrfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const double *c, const double *b, const armpl_int_t *ldb, double *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
double dla_syrpvgrw_(const char *uplo, const armpl_int_t *n, const armpl_int_t *info, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, double *work, ... );
void dla_wwaddw_(const armpl_int_t *n, double *x, double *y, const double *w);
void dlabad_(double *small, double *large);
void dlabrd_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, double *a, const armpl_int_t *lda, double *d, double *e, double *tauq, double *taup, double *x, const armpl_int_t *ldx, double *y, const armpl_int_t *ldy);
void dlacn2_(const armpl_int_t *n, double *v, double *x, armpl_int_t *isgn, double *est, armpl_int_t *kase, armpl_int_t *isave);
void dlacon_(const armpl_int_t *n, double *v, double *x, armpl_int_t *isgn, double *est, armpl_int_t *kase);
void dlacpy_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, ... );
void dladiv_(const double *a, const double *b, const double *c, const double *d, double *p, double *q);
void dlae2_(const double *a, const double *b, const double *c, double *rt1, double *rt2);
void dlaebz_(const armpl_int_t *ijob, const armpl_int_t *nitmax, const armpl_int_t *n, const armpl_int_t *mmax, const armpl_int_t *minp, const armpl_int_t *nbmin, const double *abstol, const double *reltol, const double *pivmin, const double *d, const double *e, const double *e2, armpl_int_t *nval, double *ab, double *c, armpl_int_t *mout, armpl_int_t *nab, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlaed0_(const armpl_int_t *icompq, const armpl_int_t *qsiz, const armpl_int_t *n, double *d, const double *e, double *q, const armpl_int_t *ldq, double *qstore, const armpl_int_t *ldqs, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlaed1_(const armpl_int_t *n, double *d, double *q, const armpl_int_t *ldq, armpl_int_t *indxq, const double *rho, const armpl_int_t *cutpnt, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlaed2_(armpl_int_t *k, const armpl_int_t *n, const armpl_int_t *n1, double *d, double *q, const armpl_int_t *ldq, armpl_int_t *indxq, double *rho, const double *z, double *dlamda, double *w, double *q2, armpl_int_t *indx, armpl_int_t *indxc, armpl_int_t *indxp, armpl_int_t *coltyp, armpl_int_t *info);
void dlaed3_(const armpl_int_t *k, const armpl_int_t *n, const armpl_int_t *n1, double *d, double *q, const armpl_int_t *ldq, const double *rho, double *dlamda, const double *q2, const armpl_int_t *indx, const armpl_int_t *ctot, double *w, double *s, armpl_int_t *info);
void dlaed4_(const armpl_int_t *n, const armpl_int_t *i, const double *d, const double *z, double *delta, const double *rho, double *dlam, armpl_int_t *info);
void dlaed5_(const armpl_int_t *i, const double *d, const double *z, double *delta, const double *rho, double *dlam);
void dlaed6_(const armpl_int_t *kniter, const armpl_int_t *orgati, const double *rho, const double *d, const double *z, const double *finit, double *tau, armpl_int_t *info);
void dlaed7_(const armpl_int_t *icompq, const armpl_int_t *n, const armpl_int_t *qsiz, const armpl_int_t *tlvls, const armpl_int_t *curlvl, const armpl_int_t *curpbm, double *d, double *q, const armpl_int_t *ldq, armpl_int_t *indxq, const double *rho, const armpl_int_t *cutpnt, double *qstore, armpl_int_t *qptr, const armpl_int_t *prmptr, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const double *givnum, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlaed8_(const armpl_int_t *icompq, armpl_int_t *k, const armpl_int_t *n, const armpl_int_t *qsiz, double *d, double *q, const armpl_int_t *ldq, const armpl_int_t *indxq, double *rho, const armpl_int_t *cutpnt, const double *z, double *dlamda, double *q2, const armpl_int_t *ldq2, double *w, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, double *givnum, armpl_int_t *indxp, armpl_int_t *indx, armpl_int_t *info);
void dlaed9_(const armpl_int_t *k, const armpl_int_t *kstart, const armpl_int_t *kstop, const armpl_int_t *n, double *d, double *q, const armpl_int_t *ldq, const double *rho, const double *dlamda, const double *w, double *s, const armpl_int_t *lds, armpl_int_t *info);
void dlaeda_(const armpl_int_t *n, const armpl_int_t *tlvls, const armpl_int_t *curlvl, const armpl_int_t *curpbm, const armpl_int_t *prmptr, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const double *givnum, const double *q, const armpl_int_t *qptr, double *z, double *ztemp, armpl_int_t *info);
void dlaein_(const armpl_int_t *rightv, const armpl_int_t *noinit, const armpl_int_t *n, const double *h, const armpl_int_t *ldh, const double *wr, const double *wi, double *vr, double *vi, double *b, const armpl_int_t *ldb, double *work, const double *eps3, const double *smlnum, const double *bignum, armpl_int_t *info);
void dlaev2_(const double *a, const double *b, const double *c, double *rt1, double *rt2, double *cs1, double *sn1);
void dlaexc_(const armpl_int_t *wantq, const armpl_int_t *n, double *t, const armpl_int_t *ldt, double *q, const armpl_int_t *ldq, const armpl_int_t *j1, const armpl_int_t *n1, const armpl_int_t *n2, double *work, armpl_int_t *info);
void dlag2_(const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, const double *safmin, double *scale1, double *scale2, double *wr1, double *wr2, double *wi);
void dlag2s_(const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, float *sa, const armpl_int_t *ldsa, armpl_int_t *info);
void dlags2_(const armpl_int_t *upper, const double *a1, const double *a2, const double *a3, const double *b1, const double *b2, const double *b3, double *csu, double *snu, double *csv, double *snv, double *csq, double *snq);
void dlagtf_(const armpl_int_t *n, double *a, const double *lambda, double *b, double *c, const double *tol, double *d, armpl_int_t *in, armpl_int_t *info);
void dlagtm_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const double *alpha, const double *dl, const double *d, const double *du, const double *x, const armpl_int_t *ldx, const double *beta, double *b, const armpl_int_t *ldb, ... );
void dlagts_(const armpl_int_t *job, const armpl_int_t *n, const double *a, const double *b, const double *c, const double *d, const armpl_int_t *in, double *y, double *tol, armpl_int_t *info);
void dlagv2_(double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *csl, double *snl, double *csr, double *snr);
void dlahqr_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *h, const armpl_int_t *ldh, double *wr, double *wi, const armpl_int_t *iloz, const armpl_int_t *ihiz, double *z, const armpl_int_t *ldz, armpl_int_t *info);
void dlahr2_(const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *nb, double *a, const armpl_int_t *lda, double *tau, double *t, const armpl_int_t *ldt, double *y, const armpl_int_t *ldy);
void dlaic1_(const armpl_int_t *job, const armpl_int_t *j, const double *x, const double *sest, const double *w, const double *gamma, double *sestpr, double *s, double *c);
armpl_int_t dlaisnan_(const double *din1, const double *din2);
void dlaln2_(const armpl_int_t *ltrans, const armpl_int_t *na, const armpl_int_t *nw, const double *smin, const double *ca, const double *a, const armpl_int_t *lda, const double *d1, const double *d2, const double *b, const armpl_int_t *ldb, const double *wr, const double *wi, double *x, const armpl_int_t *ldx, double *scale, double *xnorm, armpl_int_t *info);
void dlals0_(const armpl_int_t *icompq, const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, const armpl_int_t *nrhs, double *b, const armpl_int_t *ldb, double *bx, const armpl_int_t *ldbx, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const armpl_int_t *ldgcol, const double *givnum, const armpl_int_t *ldgnum, const double *poles, const double *difl, const double *difr, const double *z, const armpl_int_t *k, const double *c, const double *s, double *work, armpl_int_t *info);
void dlalsa_(const armpl_int_t *icompq, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *nrhs, double *b, const armpl_int_t *ldb, double *bx, const armpl_int_t *ldbx, const double *u, const armpl_int_t *ldu, const double *vt, const armpl_int_t *k, const double *difl, const double *difr, const double *z, const double *poles, const armpl_int_t *givptr, const armpl_int_t *givcol, const armpl_int_t *ldgcol, const armpl_int_t *perm, const double *givnum, const double *c, const double *s, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlalsd_(const char *uplo, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *nrhs, double *d, double *e, double *b, const armpl_int_t *ldb, const double *rcond, armpl_int_t *rank, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
double dlamch_(const char *cmach, ... );
void dlamrg_(const armpl_int_t *n1, const armpl_int_t *n2, const double *a, const armpl_int_t *dtrd1, const armpl_int_t *dtrd2, armpl_int_t *index);
void dlamswlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_int_t *nb, double *a, const armpl_int_t *lda, const double *t, const armpl_int_t *ldt, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dlamtsqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_int_t *nb, double *a, const armpl_int_t *lda, const double *t, const armpl_int_t *ldt, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
armpl_int_t dlaneg_(const armpl_int_t *n, const double *d, const double *lld, const double *sigma, const double *pivmin, const armpl_int_t *r);
double dlangb_(const char *norm, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const double *ab, const armpl_int_t *ldab, double *work, ... );
double dlange_(const char *norm, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *work, ... );
double dlangt_(const char *norm, const armpl_int_t *n, const double *dl, const double *d, const double *du, ... );
double dlanhs_(const char *norm, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *work, ... );
double dlansb_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const double *ab, const armpl_int_t *ldab, double *work, ... );
double dlansf_(const char *norm, const char *transr, const char *uplo, const armpl_int_t *n, const double *a, double *work, ... );
double dlansp_(const char *norm, const char *uplo, const armpl_int_t *n, const double *ap, double *work, ... );
double dlanst_(const char *norm, const armpl_int_t *n, const double *d, const double *e, ... );
double dlansy_(const char *norm, const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *work, ... );
double dlantb_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const double *ab, const armpl_int_t *ldab, double *work, ... );
double dlantp_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const double *ap, double *work, ... );
double dlantr_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *work, ... );
void dlanv2_(double *a, double *b, double *c, double *d, double *rt1r, double *rt1i, double *rt2r, double *rt2i, double *cs, double *sn);
void dlaorhr_col_getrfnp_(const armpl_int_t *m, const armpl_int_t *n, double *A, const armpl_int_t *lda, double *D, armpl_int_t *info);
void dlaorhr_col_getrfnp2_(const armpl_int_t *m, const armpl_int_t *n, double *A, const armpl_int_t *lda, double *D, armpl_int_t *info);
void dlapll_(const armpl_int_t *n, double *x, const armpl_int_t *incx, double *y, const armpl_int_t *incy, double *ssmin);
void dlapmr_(const armpl_int_t *forwrd, const armpl_int_t *m, const armpl_int_t *n, double *x, const armpl_int_t *ldx, armpl_int_t *k);
void dlapmt_(const armpl_int_t *forwrd, const armpl_int_t *m, const armpl_int_t *n, double *x, const armpl_int_t *ldx, armpl_int_t *k);
double dlapy2_(const double *x, const double *y);
double dlapy3_(const double *x, const double *y, const double *z);
void dlaqgb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, double *ab, const armpl_int_t *ldab, const double *r, const double *c, const double *rowcnd, const double *colcnd, const double *amax, char *equed, ... );
void dlaqge_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *r, const double *c, const double *rowcnd, const double *colcnd, const double *amax, char *equed, ... );
void dlaqp2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *offset, double *a, const armpl_int_t *lda, armpl_int_t *jpvt, double *tau, double *vn1, double *vn2, double *work);
void dlaqp2rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *ioffset, const armpl_int_t *kmax, const double *abstol, const double *reltol, const armpl_int_t *kp1, const double *maxc2nrm, double *a, const armpl_int_t *lda, armpl_int_t *k, double *maxc2nrmk, double *relmaxc2nrmk, armpl_int_t *jpiv, double *tau, double *vn1, double *vn2, double *work, armpl_int_t *info);
void dlaqp3rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *ioffset, const armpl_int_t *nb, const double *abstol, const double *reltol, const armpl_int_t *kp1, const double *maxc2nrm, double *a, const armpl_int_t *lda, armpl_int_t *done, armpl_int_t *kb, double *maxc2nrmk, double *relmaxc2nrmk, armpl_int_t *jpiv, double *tau, double *vn1, double *vn2, double *auxv, double *f, const armpl_int_t *ldf, armpl_int_t *iwork, armpl_int_t *info);
void dlaqps_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *offset, const armpl_int_t *nb, armpl_int_t *kb, double *a, const armpl_int_t *lda, armpl_int_t *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *f, const armpl_int_t *ldf);
void dlaqr0_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *h, const armpl_int_t *ldh, double *wr, double *wi, const armpl_int_t *iloz, const armpl_int_t *ihiz, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dlaqr1_(const armpl_int_t *n, const double *h, const armpl_int_t *ldh, const double *sr1, double *si1, double *sr2, double *si2, double *v);
void dlaqr2_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nw, double *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, double *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, double *sr, double *si, double *v, const armpl_int_t *ldv, const armpl_int_t *nh, double *t, const armpl_int_t *ldt, const armpl_int_t *nv, double *wv, const armpl_int_t *ldwv, double *work, const armpl_int_t *lwork);
void dlaqr3_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nw, double *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, double *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, double *sr, double *si, double *v, const armpl_int_t *ldv, const armpl_int_t *nh, double *t, const armpl_int_t *ldt, const armpl_int_t *nv, double *wv, const armpl_int_t *ldwv, double *work, const armpl_int_t *lwork);
void dlaqr4_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *h, const armpl_int_t *ldh, double *wr, double *wi, const armpl_int_t *iloz, const armpl_int_t *ihiz, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dlaqr5_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *kacc22, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nshfts, double *sr, double *si, double *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, double *z, const armpl_int_t *ldz, double *v, const armpl_int_t *ldv, double *u, const armpl_int_t *ldu, const armpl_int_t *nv, double *wv, const armpl_int_t *ldwv, const armpl_int_t *nh, double *wh, const armpl_int_t *ldwh);
void dlaqsb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, const double *s, const double *scond, const double *amax, char *equed, ... );
void dlaqsp_(const char *uplo, const armpl_int_t *n, double *ap, const double *s, const double *scond, const double *amax, char *equed, ... );
void dlaqsy_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *s, const double *scond, const double *amax, char *equed, ... );
void dlaqtr_(const armpl_int_t *ltran, const armpl_int_t *lreal, const armpl_int_t *n, const double *t, const armpl_int_t *ldt, const double *b, const double *w, double *scale, double *x, double *work, armpl_int_t *info);
void dlaqz0_(const char *wants, const char *wantq, const char *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, const armpl_int_t rec, armpl_int_t *info, ... );
void dlaqz1_(const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, const double *sr1, const double *sr2, const double *si, const double *beta1, const double *beta2, double *v);
void dlaqz2_(const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *k, const armpl_int_t *istartm, const armpl_int_t *istopm, const armpl_int_t *ihi, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, const armpl_int_t *nq, const armpl_int_t *qstart, double *q, const armpl_int_t *ldq, const armpl_int_t *nz, const armpl_int_t *zstart, double *z, const armpl_int_t *ldz);
void dlaqz3_(const armpl_int_t *ilschur, const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *nw, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, double *alphar, double *alphai, double *beta, double *qc, const armpl_int_t *ldqc, double *zc, double *work, const armpl_int_t *lwork, const armpl_int_t *rec, armpl_int_t *info);
void dlaqz4_(const armpl_int_t *ilschur, const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *nshifts, const armpl_int_t *nblock_desired, const double *sr, const double *si, const double *ss, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, double *qc, const armpl_int_t *ldqc, double *zc, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dlar1v_(const armpl_int_t *n, const armpl_int_t *b1, const armpl_int_t *bn, const double *lambda, const double *d, const double *l, const double *ld, const double *lld, const double *pivmin, const double *gaptol, double *z, const armpl_int_t *wantnc, armpl_int_t *negcnt, double *ztz, double *mingma, armpl_int_t *r, armpl_int_t *isuppz, double *nrminv, double *resid, double *rqcorr, double *work);
void dlar2v_(const armpl_int_t *n, double *x, double *y, double *z, const armpl_int_t *incx, const double *c, const double *s, const armpl_int_t *incc);
void dlarf_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const double *v, const armpl_int_t *incv, const double *tau, double *c, const armpl_int_t *ldc, double *work, ... );
void dlarfb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *v, const armpl_int_t *ldv, const double *t, const armpl_int_t *ldt, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *ldwork, ... );
void dlarfg_(const armpl_int_t *n, double *alpha, double *x, const armpl_int_t *incx, double *tau);
void dlarfgp_(const armpl_int_t *n, double *alpha, double *x, const armpl_int_t *incx, double *tau);
void dlarft_(const char *direct, const char *storev, const armpl_int_t *n, const armpl_int_t *k, const double *v, const armpl_int_t *ldv, const double *tau, double *t, const armpl_int_t *ldt, ... );
void dlarfx_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const double *v, const double *tau, double *c, const armpl_int_t *ldc, double *work, ... );
void dlarfy_(const char *uplo, const armpl_int_t *n, const double *v, const armpl_int_t *incv, const double *tau, double *c, const armpl_int_t *ldc, double *work, ... );
void dlargv_(const armpl_int_t *n, double *x, const armpl_int_t *incx, double *y, const armpl_int_t *incy, double *c, const armpl_int_t *incc);
double dlarmm_(const double *anorm, const double *bnorm, const double *cnorm);
void dlarnv_(const armpl_int_t *idist, armpl_int_t *iseed, const armpl_int_t *n, double *x);
void dlarra_(const armpl_int_t *n, const double *d, double *e, double *e2, const double *spltol, const double *tnrm, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *info);
void dlarrb_(const armpl_int_t *n, const double *d, const double *lld, const armpl_int_t *ifirst, const armpl_int_t *ilast, const double *rtol1, const double *rtol2, const armpl_int_t *offset, double *w, double *wgap, double *werr, double *work, armpl_int_t *iwork, const double *pivmin, const double *spdiam, const armpl_int_t *twist, armpl_int_t *info);
void dlarrc_(const char *jobt, const armpl_int_t *n, const double *vl, const double *vu, const double *d, const double *e, const double *pivmin, armpl_int_t *eigcnt, armpl_int_t *lcnt, armpl_int_t *rcnt, armpl_int_t *info, ... );
void dlarrd_(const char *range, const char *order, const armpl_int_t *n, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *gers, const double *reltol, const double *d, const double *e, const double *e2, const double *pivmin, const armpl_int_t *nsplit, const armpl_int_t *isplit, armpl_int_t *m, double *w, double *werr, double *wl, double *wu, armpl_int_t *iblock, armpl_int_t *indexw, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dlarre_(const char *range, const armpl_int_t *n, double *vl, double *vu, const armpl_int_t *il, const armpl_int_t *iu, double *d, double *e, double *e2, const double *rtol1, const double *rtol2, const double *spltol, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *m, double *w, double *werr, double *wgap, armpl_int_t *iblock, armpl_int_t *indexw, double *gers, double *pivmin, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dlarrf_(const armpl_int_t *n, const double *d, const double *l, const double *ld, const armpl_int_t *clstrt, const armpl_int_t *clend, const double *w, double *wgap, const double *werr, const double *spdiam, const double *clgapl, double *clgapr, const double *pivmin, double *sigma, double *dplus, double *lplus, double *work, armpl_int_t *info);
void dlarrj_(const armpl_int_t *n, const double *d, const double *e2, const armpl_int_t *ifirst, const armpl_int_t *ilast, const double *rtol, const armpl_int_t *offset, double *w, double *werr, double *work, armpl_int_t *iwork, const double *pivmin, const double *spdiam, armpl_int_t *info);
void dlarrk_(const armpl_int_t *n, const armpl_int_t *iw, const double *gl, const double *gu, const double *d, const double *e2, const double *pivmin, const double *reltol, double *w, double *werr, armpl_int_t *info);
void dlarrr_(const armpl_int_t *n, const double *d, double *e, armpl_int_t *info);
void dlarrv_(const armpl_int_t *n, const double *vl, const double *vu, double *d, double *l, double *pivmin, const armpl_int_t *isplit, const armpl_int_t *m, const armpl_int_t *dol, const armpl_int_t *dou, const double *minrgp, const double *rtol1, const double *rtol2, double *w, double *werr, double *wgap, const armpl_int_t *iblock, const armpl_int_t *indexw, const double *gers, double *z, const armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlarscl2_(const armpl_int_t *m, const armpl_int_t *n, const double *d, double *x, const armpl_int_t *ldx);
void dlartg_(const double *f, const double *g, double *cs, double *sn, double *r);
void dlartgp_(const double *f, const double *g, double *cs, double *sn, double *r);
void dlartgs_(const double *x, const double *y, const double *sigma, double *cs, double *sn);
void dlartv_(const armpl_int_t *n, double *x, const armpl_int_t *incx, double *y, const armpl_int_t *incy, const double *c, const double *s, const armpl_int_t *incc);
void dlaruv_(armpl_int_t *iseed, const armpl_int_t *n, double *x);
void dlarz_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const double *v, const armpl_int_t *incv, const double *tau, double *c, const armpl_int_t *ldc, double *work, ... );
void dlarzb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const double *v, const armpl_int_t *ldv, const double *t, const armpl_int_t *ldt, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *ldwork, ... );
void dlarzt_(const char *direct, const char *storev, const armpl_int_t *n, const armpl_int_t *k, double *v, const armpl_int_t *ldv, const double *tau, double *t, const armpl_int_t *ldt, ... );
void dlas2_(const double *f, const double *g, const double *h, double *ssmin, double *ssmax);
void dlascl2_(const armpl_int_t *m, const armpl_int_t *n, const double *d, double *x, const armpl_int_t *ldx);
void dlascl_(const char *type, const armpl_int_t *kl, const armpl_int_t *ku, const double *cfrom, const double *cto, const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dlasd0_(const armpl_int_t *n, const armpl_int_t *sqre, double *d, double *e, double *u, const armpl_int_t *ldu, double *vt, const armpl_int_t *ldvt, const armpl_int_t *smlsiz, armpl_int_t *iwork, double *work, armpl_int_t *info);
void dlasd1_(const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, double *d, double *alpha, double *beta, double *u, const armpl_int_t *ldu, double *vt, const armpl_int_t *ldvt, armpl_int_t *idxq, armpl_int_t *iwork, double *work, armpl_int_t *info);
void dlasd2_(const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, armpl_int_t *k, double *d, double *z, const double *alpha, const double *beta, double *u, const armpl_int_t *ldu, double *vt, const armpl_int_t *ldvt, double *dsigma, double *u2, const armpl_int_t *ldu2, double *vt2, const armpl_int_t *ldvt2, armpl_int_t *idxp, armpl_int_t *idx, armpl_int_t *idxc, armpl_int_t *idxq, armpl_int_t *coltyp, armpl_int_t *info);
void dlasd3_(const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, const armpl_int_t *k, double *d, double *q, const armpl_int_t *ldq, const double *dsigma, double *u, const armpl_int_t *ldu, double *u2, const armpl_int_t *ldu2, double *vt, const armpl_int_t *ldvt, double *vt2, const armpl_int_t *ldvt2, const armpl_int_t *idxc, const armpl_int_t *ctot, const double *z, armpl_int_t *info);
void dlasd4_(const armpl_int_t *n, const armpl_int_t *i, const double *d, const double *z, double *delta, const double *rho, double *sigma, double *work, armpl_int_t *info);
void dlasd5_(const armpl_int_t *i, const double *d, const double *z, double *delta, const double *rho, double *dsigma, double *work);
void dlasd6_(const armpl_int_t *icompq, const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, double *d, double *vf, double *vl, double *alpha, double *beta, armpl_int_t *idxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, const armpl_int_t *ldgcol, double *givnum, const armpl_int_t *ldgnum, double *poles, double *difl, double *difr, double *z, armpl_int_t *k, double *c, double *s, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlasd7_(const armpl_int_t *icompq, const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, armpl_int_t *k, double *d, double *z, double *zw, double *vf, double *vfw, double *vl, double *vlw, const double *alpha, const double *beta, double *dsigma, armpl_int_t *idx, armpl_int_t *idxp, const armpl_int_t *idxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, const armpl_int_t *ldgcol, double *givnum, const armpl_int_t *ldgnum, double *c, double *s, armpl_int_t *info);
void dlasd8_(const armpl_int_t *icompq, const armpl_int_t *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, const armpl_int_t *lddifr, double *dsigma, double *work, armpl_int_t *info);
void dlasda_(const armpl_int_t *icompq, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *sqre, double *d, const double *e, double *u, const armpl_int_t *ldu, double *vt, armpl_int_t *k, double *difl, double *difr, double *z, double *poles, armpl_int_t *givptr, armpl_int_t *givcol, const armpl_int_t *ldgcol, armpl_int_t *perm, double *givnum, double *c, double *s, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlasdq_(const char *uplo, const armpl_int_t *sqre, const armpl_int_t *n, const armpl_int_t *ncvt, const armpl_int_t *nru, const armpl_int_t *ncc, double *d, double *e, double *vt, const armpl_int_t *ldvt, double *u, const armpl_int_t *ldu, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dlasdt_(const armpl_int_t *n, armpl_int_t *lvl, armpl_int_t *nd, armpl_int_t *inode, armpl_int_t *ndiml, armpl_int_t *ndimr, const armpl_int_t *msub);
void dlaset_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *beta, double *a, const armpl_int_t *lda, ... );
void dlasq1_(const armpl_int_t *n, double *d, double *e, double *work, armpl_int_t *info);
void dlasq2_(const armpl_int_t *n, double *z, armpl_int_t *info);
void dlasq3_(const armpl_int_t *i0, const armpl_int_t *n0, const double *z, armpl_int_t *pp, double *dmin, double *sigma, double *desig, const double *qmax, armpl_int_t *nfail, armpl_int_t *iter, armpl_int_t *ndiv, const armpl_int_t *ieee, armpl_int_t *ttype, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *g, double *tau);
void dlasq4_(const armpl_int_t *i0, const armpl_int_t *n0, const double *z, const armpl_int_t *pp, armpl_int_t *n0in, const double *dmin, const double *dmin1, const double *dmin2, const double *dn, const double *dn1, const double *dn2, double *tau, armpl_int_t *ttype, double *g);
void dlasq5_(const armpl_int_t *i0, const armpl_int_t *n0, const double *z, const armpl_int_t *pp, const double *tau, const double *sigma, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2, const armpl_int_t *ieee, const double *eps);
void dlasq6_(const armpl_int_t *i0, const armpl_int_t *n0, const double *z, const armpl_int_t *pp, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2);
void dlasr_(const char *side, const char *pivot, const char *direct, const armpl_int_t *m, const armpl_int_t *n, const double *c, const double *s, double *a, const armpl_int_t *lda, ... );
void dlasrt_(const char *id, const armpl_int_t *n, double *d, armpl_int_t *info, ... );
void dlassq_(const armpl_int_t *n, const double *x, const armpl_int_t *incx, double *scale, double *sumsq);
void dlasv2_(const double *f, const double *g, const double *h, double *ssmin, double *ssmax, double *snr, double *csr, double *snl, double *csl);
void dlaswlq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *ldt, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dlaswp_(const armpl_int_t *n, double *a, const armpl_int_t *lda, const armpl_int_t *k1, const armpl_int_t *k2, const armpl_int_t *ipiv, const armpl_int_t *incx);
void dlasy2_(const armpl_int_t *ltranl, const armpl_int_t *ltranr, const armpl_int_t *isgn, const armpl_int_t *n1, const armpl_int_t *n2, const double *tl, const armpl_int_t *ldtl, const double *tr, const armpl_int_t *ldtr, const double *b, const armpl_int_t *ldb, double *scale, double *x, const armpl_int_t *ldx, double *xnorm, armpl_int_t *info);
void dlasyf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void dlasyf_aa_(const char *uplo, const armpl_int_t *j1, const armpl_int_t *m, const armpl_int_t *nb, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *h, const armpl_int_t *ldh, double *work, ... );
void dlasyf_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, double *a, const armpl_int_t *lda, double *e, armpl_int_t *ipiv, double *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void dlasyf_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void dlat2s_(const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, float *sa, const armpl_int_t *ldsa, armpl_int_t *info, ... );
void dlatbs_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_int_t *kd, const double *ab, const armpl_int_t *ldab, double *x, double *scale, double *cnorm, armpl_int_t *info, ... );
void dlatdf_(const armpl_int_t *ijob, const armpl_int_t *n, const double *z, const armpl_int_t *ldz, double *rhs, double *rdsum, double *rdscal, const armpl_int_t *ipiv, const armpl_int_t *jpiv);
void dlatps_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const double *ap, double *x, double *scale, double *cnorm, armpl_int_t *info, ... );
void dlatrd_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, double *a, const armpl_int_t *lda, double *e, double *tau, double *w, const armpl_int_t *ldw, ... );
void dlatrs_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *x, double *scale, double *cnorm, armpl_int_t *info, ... );
void dlatrs3_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, double *x, const armpl_int_t *ldx, double *scale, double *cnorm, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dlatrz_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, double *a, const armpl_int_t *lda, double *tau, double *work);
void dlatsqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, double *a, const armpl_int_t *lda, double *t, const armpl_int_t *ldt, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dlauu2_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dlauum_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dopgtr_(const char *uplo, const armpl_int_t *n, const double *ap, const double *tau, double *q, const armpl_int_t *ldq, double *work, armpl_int_t *info, ... );
void dopmtr_(const char *side, const char *uplo, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const double *ap, const double *tau, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dorbdb1_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *x11, const armpl_int_t *ldx11, double *x21, const armpl_int_t *ldx21, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorbdb2_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *x11, const armpl_int_t *ldx11, double *x21, const armpl_int_t *ldx21, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorbdb3_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *x11, const armpl_int_t *ldx11, double *x21, const armpl_int_t *ldx21, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorbdb4_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *x11, const armpl_int_t *ldx11, double *x21, const armpl_int_t *ldx21, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *phantom, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorbdb5_(const armpl_int_t *m1, const armpl_int_t *m2, const armpl_int_t *n, double *x1, const armpl_int_t *incx1, double *x2, const armpl_int_t *incx2, double *q1, const armpl_int_t *ldq1, double *q2, const armpl_int_t *ldq2, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorbdb6_(const armpl_int_t *m1, const armpl_int_t *m2, const armpl_int_t *n, double *x1, const armpl_int_t *incx1, double *x2, const armpl_int_t *incx2, double *q1, const armpl_int_t *ldq1, double *q2, const armpl_int_t *ldq2, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorbdb_(const char *trans, const char *signs, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *x11, const armpl_int_t *ldx11, double *x12, const armpl_int_t *ldx12, double *x21, const armpl_int_t *ldx21, double *x22, const armpl_int_t *ldx22, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *tauq2, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dorcsd2by1_(const char *jobu1, const char *jobu2, const char *jobv1t, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *x11, const armpl_int_t *ldx11, double *x21, const armpl_int_t *ldx21, double *theta, double *u1, const armpl_int_t *ldu1, double *u2, const armpl_int_t *ldu2, double *v1t, const armpl_int_t *ldv1t, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dorcsd_(const char *jobu1, const char *jobu2, const char *jobv1t, const char *jobv2t, const char *trans, const char *signs, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *x11, const armpl_int_t *ldx11, double *x12, const armpl_int_t *ldx12, double *x21, const armpl_int_t *ldx21, double *x22, const armpl_int_t *ldx22, double *theta, double *u1, const armpl_int_t *ldu1, double *u2, const armpl_int_t *ldu2, double *v1t, const armpl_int_t *ldv1t, double *v2t, const armpl_int_t *ldv2t, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dorg2l_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, armpl_int_t *info);
void dorg2r_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, armpl_int_t *info);
void dorgbr_(const char *vect, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dorghr_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, double *a, const armpl_int_t *lda, const double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorgl2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, armpl_int_t *info);
void dorglq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorgql_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorgqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorgr2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, armpl_int_t *info);
void dorgrq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, double *a, const armpl_int_t *lda, const double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorgtr_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dorgtsqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, double *a, const armpl_int_t *lda, const double *t, const armpl_int_t *ldt, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorgtsqr_row_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, double *a, const armpl_int_t *lda, const double *t, const armpl_int_t *ldt, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dorhr_col_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, double *a, const armpl_int_t *lda, const double *t, const armpl_int_t *ldt, double *d, armpl_int_t *info);
void dorm22_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *n1, const armpl_int_t *n2, const double *q, const armpl_int_t *ldq, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dorm2l_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dorm2r_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dormbr_(const char *vect, const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dormhr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dorml2_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dormlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dormql_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dormqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dormr2_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dormr3_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, armpl_int_t *info, ... );
void dormrq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dormrz_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dormtr_(const char *side, const char *uplo, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *tau, double *c, const armpl_int_t *ldc, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dpbcon_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const double *ab, const armpl_int_t *ldab, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dpbequ_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const double *ab, const armpl_int_t *ldab, double *s, double *scond, double *amax, armpl_int_t *info, ... );
void dpbrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const double *ab, const armpl_int_t *ldab, const double *afb, const armpl_int_t *ldafb, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dpbstf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void dpbsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, double *ab, const armpl_int_t *ldab, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dpbsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, double *ab, const armpl_int_t *ldab, double *afb, const armpl_int_t *ldafb, char *equed, double *s, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dpbtf2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void dpbtrf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void dpbtrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const double *ab, const armpl_int_t *ldab, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dpftrf_(const char *transr, const char *uplo, const armpl_int_t *n, double *a, armpl_int_t *info, ... );
void dpftri_(const char *transr, const char *uplo, const armpl_int_t *n, double *a, armpl_int_t *info, ... );
void dpftrs_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dpocon_(const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dpoequ_(const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *s, double *scond, double *amax, armpl_int_t *info);
void dpoequb_(const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *s, double *scond, double *amax, armpl_int_t *info);
void dporfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dporfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const double *s, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dposv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dposvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *af, const armpl_int_t *ldaf, char *equed, double *s, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dposvxx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *af, const armpl_int_t *ldaf, char *equed, double *s, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dpotf2_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dpotrf2_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dpotrf_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dpotri_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dpotrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dppcon_(const char *uplo, const armpl_int_t *n, const double *ap, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dppequ_(const char *uplo, const armpl_int_t *n, const double *ap, double *s, double *scond, double *amax, armpl_int_t *info, ... );
void dpprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *ap, const double *afp, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dppsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *ap, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dppsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *ap, double *afp, char *equed, double *s, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dpptrf_(const char *uplo, const armpl_int_t *n, double *ap, armpl_int_t *info, ... );
void dpptri_(const char *uplo, const armpl_int_t *n, double *ap, armpl_int_t *info, ... );
void dpptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *ap, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dpstf2_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, const double *tol, double *work, armpl_int_t *info, ... );
void dpstrf_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, const double *tol, double *work, armpl_int_t *info, ... );
void dptcon_(const armpl_int_t *n, const double *d, const double *e, const double *anorm, double *rcond, double *work, armpl_int_t *info);
void dpteqr_(const char *compz, const armpl_int_t *n, double *d, double *e, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void dptrfs_(const armpl_int_t *n, const armpl_int_t *nrhs, const double *d, const double *e, const double *df, const double *ef, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *info);
void dptsv_(const armpl_int_t *n, const armpl_int_t *nrhs, double *d, double *e, double *b, const armpl_int_t *ldb, armpl_int_t *info);
void dptsvx_(const char *fact, const armpl_int_t *n, const armpl_int_t *nrhs, const double *d, const double *e, double *df, double *ef, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *info, ... );
void dpttrf_(const armpl_int_t *n, double *d, double *e, armpl_int_t *info);
void dpttrs_(const armpl_int_t *n, const armpl_int_t *nrhs, const double *d, const double *e, double *b, const armpl_int_t *ldb, armpl_int_t *info);
void dptts2_(const armpl_int_t *n, const armpl_int_t *nrhs, const double *d, const double *e, double *b, const armpl_int_t *ldb);
void drscl_(const armpl_int_t *n, const double *sa, double *sx, const armpl_int_t *incx);
void dsb2st_kernels_(const char *uplo, const armpl_int_t *wantz, const armpl_int_t *ttype, const armpl_int_t *st, const armpl_int_t *ed, const armpl_int_t *sweep, const armpl_int_t *n, const armpl_int_t *nb, const armpl_int_t *ib, double *a, const armpl_int_t *lda, double *v, double *tau, const armpl_int_t *ldvt, const double *work, ... );
void dsbev_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void dsbev_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsbevd_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsbevd_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsbevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, double *q, const armpl_int_t *ldq, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dsbevx_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, double *q, const armpl_int_t *ldq, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dsbgst_(const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, double *ab, const armpl_int_t *ldab, const double *bb, const armpl_int_t *ldbb, double *x, const armpl_int_t *ldx, double *work, armpl_int_t *info, ... );
void dsbgv_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, double *ab, const armpl_int_t *ldab, double *bb, const armpl_int_t *ldbb, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void dsbgvd_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, double *ab, const armpl_int_t *ldab, double *bb, const armpl_int_t *ldbb, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsbgvx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, double *ab, const armpl_int_t *ldab, double *bb, const armpl_int_t *ldbb, double *q, const armpl_int_t *ldq, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dsbtrd_(const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, double *d, double *e, double *q, const armpl_int_t *ldq, double *work, armpl_int_t *info, ... );
double dsecnd_(void);
void dsfrk_(const char *transr, const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double *a, const armpl_int_t *lda, const double *beta, double *c, ... );
void dsgesv_(const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *work, float *swork, armpl_int_t *iter, armpl_int_t *info);
void dspcon_(const char *uplo, const armpl_int_t *n, const double *ap, const armpl_int_t *ipiv, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dspev_(const char *jobz, const char *uplo, const armpl_int_t *n, double *ap, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void dspevd_(const char *jobz, const char *uplo, const armpl_int_t *n, double *ap, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dspevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, double *ap, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dspgst_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, double *ap, const double *bp, armpl_int_t *info, ... );
void dspgv_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, double *ap, double *bp, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void dspgvd_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, double *ap, double *bp, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dspgvx_(const armpl_int_t *itype, const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, double *ap, double *bp, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dsposv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *work, float *swork, armpl_int_t *iter, armpl_int_t *info, ... );
void dsprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *ap, const double *afp, const armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dspsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *ap, armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dspsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *ap, double *afp, armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dsptrd_(const char *uplo, const armpl_int_t *n, double *ap, double *d, double *e, double *tau, armpl_int_t *info, ... );
void dsptrf_(const char *uplo, const armpl_int_t *n, double *ap, armpl_int_t *ipiv, armpl_int_t *info, ... );
void dsptri_(const char *uplo, const armpl_int_t *n, double *ap, const armpl_int_t *ipiv, double *work, armpl_int_t *info, ... );
void dsptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *ap, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dstebz_(const char *range, const char *order, const armpl_int_t *n, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, const double *d, const double *e, armpl_int_t *m, armpl_int_t *nsplit, double *w, armpl_int_t *iblock, armpl_int_t *isplit, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dstedc_(const char *compz, const armpl_int_t *n, double *d, double *e, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dstegr_(const char *jobz, const char *range, const armpl_int_t *n, double *d, double *e, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, armpl_int_t *isuppz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dstein_(const armpl_int_t *n, const double *d, const double *e, const armpl_int_t *m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info);
void dstemr_(const char *jobz, const char *range, const armpl_int_t *n, double *d, double *e, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, const armpl_int_t *nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsteqr_(const char *compz, const armpl_int_t *n, double *d, double *e, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void dsterf_(const armpl_int_t *n, double *d, double *e, armpl_int_t *info);
void dstev_(const char *jobz, const armpl_int_t *n, double *d, double *e, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void dstevd_(const char *jobz, const armpl_int_t *n, double *d, double *e, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dstevr_(const char *jobz, const char *range, const armpl_int_t *n, double *d, double *e, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, armpl_int_t *isuppz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dstevx_(const char *jobz, const char *range, const armpl_int_t *n, double *d, double *e, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dsycon_(const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dsycon_3_(const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *e, const armpl_int_t *ipiv, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dsycon_rook_(const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dsyconv_(const char *uplo, const char *way, const armpl_int_t *n, double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *e, armpl_int_t *info, ... );
void dsyconvf_(const char *uplo, const char *way, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void dsyconvf_rook_(const char *uplo, const char *way, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *e, const armpl_int_t *ipiv, armpl_int_t *info, ... );
void dsyequb_(char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *s, double *scond, double *amax, double *work, armpl_int_t *info, ... );
void dsyev_(const char *jobz, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *w, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsyev_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *w, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsyevd_(const char *jobz, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *w, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsyevd_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *w, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsyevr_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, armpl_int_t *isuppz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsyevr_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, armpl_int_t *isuppz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsyevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dsyevx_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dsygs2_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dsygst_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dsygv_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *w, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsygv_2stage_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *w, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsygvd_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *w, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dsygvx_(const armpl_int_t *itype, const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, double *z, const armpl_int_t *ldz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void dsyrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dsyrfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *s, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dsysv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsysv_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsysv_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsysv_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *e, armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsysv_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsysvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, double *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, const double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dsysvxx_(const char *fact, char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, double *a, const armpl_int_t *lda, double *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *s, double *b, const armpl_int_t *ldb, double *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dsyswapr_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const armpl_int_t *i1, const armpl_int_t *i2, ... );
void dsytd2_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *d, double *e, double *tau, armpl_int_t *info, ... );
void dsytf2_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void dsytf2_rk_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void dsytf2_rook_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void dsytrd_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *d, double *e, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrd_2stage_(const char *vect, const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *d, double *e, double *tau, double *hous2, const armpl_int_t *lhous2, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrd_sb2st_(const char *stage1, const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *ab, const armpl_int_t *ldab, double *d, double *e, double *hous, const armpl_int_t *lhous, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrd_sy2sb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, double *a, const armpl_int_t *lda, double *ab, const armpl_int_t *ldab, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrf_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrf_aa_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrf_aa_2stage_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrf_rk_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *e, armpl_int_t *ipiv, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrf_rook_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *ipiv, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytri2_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytri2x_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void dsytri_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *work, armpl_int_t *info, ... );
void dsytri_3_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *e, const armpl_int_t *ipiv, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytri_3x_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const double *e, const armpl_int_t *ipiv, double *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void dsytri_rook_(const char *uplo, const armpl_int_t *n, double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *work, armpl_int_t *info, ... );
void dsytrs2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, double *work, armpl_int_t *info, ... );
void dsytrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dsytrs_3_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *e, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dsytrs_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, const double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dsytrs_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, double *tb, const armpl_int_t *ltb, const armpl_int_t *ipiv, const armpl_int_t *ipiv2, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dsytrs_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const armpl_int_t *ipiv, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dtbcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const double *ab, const armpl_int_t *ldab, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtbrfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const double *ab, const armpl_int_t *ldab, const double *b, const armpl_int_t *ldb, const double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtbtrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const double *ab, const armpl_int_t *ldab, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dtfsm_(const char *transr, const char *side, const char *uplo, const char *trans, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const double *a, double *b, const armpl_int_t *ldb, ... );
void dtftri_(const char *transr, const char *uplo, const char *diag, const armpl_int_t *n, double *a, armpl_int_t *info, ... );
void dtfttp_(const char *transr, const char *uplo, const armpl_int_t *n, const double *arf, double *ap, armpl_int_t *info, ... );
void dtfttr_(const char *transr, const char *uplo, const armpl_int_t *n, const double *arf, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dtgevc_(const char *side, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const double *s, const armpl_int_t *lds, const double *p, const armpl_int_t *ldp, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *info, ... );
void dtgex2_(const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, const armpl_int_t *j1, const armpl_int_t *n1, const armpl_int_t *n2, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dtgexc_(const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, armpl_int_t *ifst, armpl_int_t *ilst, double *work, const armpl_int_t *lwork, armpl_int_t *info);
void dtgsen_(const armpl_int_t *ijob, const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *select, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *q, const armpl_int_t *ldq, double *z, const armpl_int_t *ldz, armpl_int_t *m, double *pl, double *pr, double *dif, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info);
void dtgsja_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, const double *tola, const double *tolb, double *alpha, double *beta, double *u, const armpl_int_t *ldu, double *v, const armpl_int_t *ldv, double *q, const armpl_int_t *ldq, double *work, armpl_int_t *ncycle, armpl_int_t *info, ... );
void dtgsna_(const char *job, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, const double *vl, const armpl_int_t *ldvl, const double *vr, const armpl_int_t *ldvr, double *s, double *dif, const armpl_int_t *mm, armpl_int_t *m, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtgsy2_(const char *trans, const armpl_int_t *ijob, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, double *c, const armpl_int_t *ldc, const double *d, const armpl_int_t *ldd, const double *e, const armpl_int_t *lde, double *f, const armpl_int_t *ldf, double *scale, double *rdsum, double *rdscal, armpl_int_t *iwork, armpl_int_t *pq, armpl_int_t *info, ... );
void dtgsyl_(const char *trans, const armpl_int_t *ijob, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, double *c, const armpl_int_t *ldc, const double *d, const armpl_int_t *ldd, const double *e, const armpl_int_t *lde, double *f, const armpl_int_t *ldf, double *scale, double *dif, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtpcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const double *ap, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtplqt2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *t, const armpl_int_t *ldt, armpl_int_t *info);
void dtplqt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_int_t *mb, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *t, const armpl_int_t *ldt, double *work, armpl_int_t *info);
void dtpmlqt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_int_t *mb, const double *v, const armpl_int_t *ldv, const double *t, const armpl_int_t *ldt, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *work, armpl_int_t *info, ... );
void dtpmqrt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_int_t *nb, const double *v, const armpl_int_t *ldv, const double *t, const armpl_int_t *ldt, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *work, armpl_int_t *info, ... );
void dtpqrt2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *t, const armpl_int_t *ldt, armpl_int_t *info);
void dtpqrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_int_t *nb, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *t, const armpl_int_t *ldt, double *work, armpl_int_t *info);
void dtprfb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const double *v, const armpl_int_t *ldv, const double *t, const armpl_int_t *ldt, double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, double *work, const armpl_int_t *ldwork, ... );
void dtprfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const double *ap, const double *b, const armpl_int_t *ldb, const double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtptri_(const char *uplo, const char *diag, const armpl_int_t *n, double *ap, armpl_int_t *info, ... );
void dtptrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const double *ap, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dtpttf_(const char *transr, const char *uplo, const armpl_int_t *n, const double *ap, double *arf, armpl_int_t *info, ... );
void dtpttr_(const char *uplo, const armpl_int_t *n, const double *ap, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dtrcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtrevc3_(const char *side, const char *howmny, armpl_int_t *select, const armpl_int_t *n, const double *t, const armpl_int_t *ldt, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, double *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void dtrevc_(const char *side, const char *howmny, armpl_int_t *select, const armpl_int_t *n, const double *t, const armpl_int_t *ldt, double *vl, const armpl_int_t *ldvl, double *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *info, ... );
void dtrexc_(const char *compq, const armpl_int_t *n, double *t, const armpl_int_t *ldt, double *q, const armpl_int_t *ldq, armpl_int_t *ifst, armpl_int_t *ilst, double *work, armpl_int_t *info, ... );
void dtrrfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, const double *x, const armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtrsen_(const char *job, const char *compq, const armpl_int_t *select, const armpl_int_t *n, double *t, const armpl_int_t *ldt, double *q, const armpl_int_t *ldq, double *wr, double *wi, armpl_int_t *m, double *s, double *sep, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void dtrsna_(const char *job, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const double *t, const armpl_int_t *ldt, const double *vl, const armpl_int_t *ldvl, const double *vr, const armpl_int_t *ldvr, double *s, double *sep, const armpl_int_t *mm, armpl_int_t *m, double *work, const armpl_int_t *ldwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void dtrsyl_(const char *trana, const char *tranb, const armpl_int_t *isgn, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, double *c, const armpl_int_t *ldc, double *scale, armpl_int_t *info, ... );
void dtrsyl3_(const char *trana, const char *tranb, const armpl_int_t *isgn, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, double *c, const armpl_int_t *ldc, double *scale, armpl_int_t *iwork, const armpl_int_t *liwork, double *swork, const armpl_int_t *ldswork, armpl_int_t *info, ... );
void dtrti2_(const char *uplo, const char *diag, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dtrtri_(const char *uplo, const char *diag, const armpl_int_t *n, double *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void dtrtrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const double *a, const armpl_int_t *lda, double *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void dtrttf_(const char *transr, const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *arf, armpl_int_t *info, ... );
void dtrttp_(const char *uplo, const armpl_int_t *n, const double *a, const armpl_int_t *lda, double *ap, armpl_int_t *info, ... );
void dtzrzf_(const armpl_int_t *m, const armpl_int_t *n, double *a, const armpl_int_t *lda, double *tau, double *work, const armpl_int_t *lwork, armpl_int_t *info);
double dzsum1_(const armpl_int_t *n, const armpl_doublecomplex_t *cx, const armpl_int_t *incx);
armpl_int_t icmax1_(const armpl_int_t *n, const armpl_singlecomplex_t *cx, const armpl_int_t *incx);
armpl_int_t ieeeck_(const armpl_int_t *ispec, const float *zero, const float *one);
armpl_int_t ilaclc_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda);
armpl_int_t ilaclr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_singlecomplex_t *a, const armpl_int_t *lda);
armpl_int_t iladiag_(const char *diag, ... );
armpl_int_t iladlc_(const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda);
armpl_int_t iladlr_(const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda);
armpl_int_t ilaenv2stage_(const armpl_int_t *ispec, const char *name, const char *opts, const armpl_int_t *n1, const armpl_int_t *n2, const armpl_int_t *n3, const armpl_int_t *n4, ... );
armpl_int_t ilaenv_(const armpl_int_t *ispec, const char *name, const char *opts, const armpl_int_t *n1, const armpl_int_t *n2, const armpl_int_t *n3, const armpl_int_t *n4, ... );
void ilaenvset_(const armpl_int_t *ispec, const char *name, const char *opts, const armpl_int_t *n1, const armpl_int_t *n2, const armpl_int_t *n3, const armpl_int_t *n4, const armpl_int_t *nvalue, armpl_int_t *info, ... );
armpl_int_t ilaprec_(const char *prec, ... );
armpl_int_t ilaslc_(const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda);
armpl_int_t ilaslr_(const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda);
armpl_int_t ilatrans_(const char *trans, ... );
armpl_int_t ilauplo_(const char *uplo, ... );
void ilaver_(armpl_int_t *vers_major, armpl_int_t *vers_minor, armpl_int_t *vers_patch);
armpl_int_t ilazlc_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda);
armpl_int_t ilazlr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda);
armpl_int_t iparam2stage_(const armpl_int_t *ispec, const char *name, const char *opts, const armpl_int_t *ni, const armpl_int_t *nbi, const armpl_int_t *ibi, const armpl_int_t *nxi, ... );
armpl_int_t iparmq_(const armpl_int_t *ispec, const char *name, const char *opts, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *lwork, ... );
armpl_int_t izmax1_(const armpl_int_t *n, const armpl_doublecomplex_t *zx, const armpl_int_t *incx);
armpl_int_t lsamen_(const armpl_int_t *n, const char *ca, const char *cb, ... );
void sbbcsd_(const char *jobu1, const char *jobu2, const char *jobv1t, const char *jobv2t, const char *trans, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *theta, float *phi, float *u1, const armpl_int_t *ldu1, float *u2, const armpl_int_t *ldu2, float *v1t, const armpl_int_t *ldv1t, float *v2t, const armpl_int_t *ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sbdsdc_(const char *uplo, const char *compq, const armpl_int_t *n, float *d, float *e, float *u, const armpl_int_t *ldu, float *vt, const armpl_int_t *ldvt, float *q, armpl_int_t *iq, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sbdsqr_(const char *uplo, const armpl_int_t *n, const armpl_int_t *ncvt, const armpl_int_t *nru, const armpl_int_t *ncc, float *d, float *e, float *vt, const armpl_int_t *ldvt, float *u, const armpl_int_t *ldu, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sbdsvdx_(const char *uplo, const char *jobz, const char *range, const armpl_int_t *n, const float *d, const float *e, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *ns, float *s, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
float scsum1_(const armpl_int_t *n, const armpl_singlecomplex_t *cx, const armpl_int_t *incx);
void sdisna_(const char *job, const armpl_int_t *m, const armpl_int_t *n, const float *d, float *sep, armpl_int_t *info, ... );
float second_(void);
void sgbbrd_(const char *vect, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ncc, const armpl_int_t *kl, const armpl_int_t *ku, float *ab, const armpl_int_t *ldab, float *d, float *e, float *q, const armpl_int_t *ldq, float *pt, const armpl_int_t *ldpt, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sgbcon_(const char *norm, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const float *ab, const armpl_int_t *ldab, const armpl_int_t *ipiv, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgbequ_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const float *ab, const armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void sgbequb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const float *ab, const armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void sgbrfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const float *ab, const armpl_int_t *ldab, const float *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgbrfsx_(const char *trans, const char *equed, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const float *ab, const armpl_int_t *ldab, const float *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgbsv_(const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, float *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info);
void sgbsvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, float *ab, const armpl_int_t *ldab, float *afb, const armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgbsvxx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, float *ab, const armpl_int_t *ldab, float *afb, const armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgbtf2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, float *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void sgbtrf_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, float *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void sgbtrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const float *ab, const armpl_int_t *ldab, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void sgebak_(const char *job, const char *side, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const float *scale, const armpl_int_t *m, float *v, const armpl_int_t *ldv, armpl_int_t *info, ... );
void sgebal_(const char *job, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, armpl_int_t *info, ... );
void sgebd2_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *d, float *e, float *tauq, float *taup, float *work, armpl_int_t *info);
void sgebrd_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *d, float *e, float *tauq, float *taup, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgecon_(const char *norm, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgedmd_(const char *jobs, const char *jobz, const char *jobr, const char *jobf, const armpl_int_t *whtsvd, const armpl_int_t *m, const armpl_int_t *n, float *x, const armpl_int_t *ldx, float *y, const armpl_int_t *ldy, const armpl_int_t *nrnk, const float *tol, armpl_int_t *k, float *reig, float *imeig, float *z, const armpl_int_t *ldz, float *res, float *b, const armpl_int_t *ldb, float *w, const armpl_int_t *ldw, float *s, const armpl_int_t *lds, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ...);
void sgedmdq_(const char *jobs, const char *jobz, const char *jobr, const char *jobq, const char *jobt, const char *jobf, const armpl_int_t *whtsvd, const armpl_int_t *m, const armpl_int_t *n, float *f, const armpl_int_t *ldf, float *x, const armpl_int_t *ldx, float *y, const armpl_int_t *ldy, const armpl_int_t *nrnk, const float *tol, armpl_int_t *k, float *reig, float *imeig, float *z, const armpl_int_t *ldz, float *res, float *b, const armpl_int_t *ldb, float *v, const armpl_int_t *ldv, float *s, const armpl_int_t *lds, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ...);
void sgeequ_(const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void sgeequb_(const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void sgees_(const char *jobvs, const char *sort, ARMPL_SGEES_SELECT select, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, const armpl_int_t *ldvs, float *work, const armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void sgeesx_(const char *jobvs, const char *sort, ARMPL_SGEESX_SELECT select, const char *sense, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, const armpl_int_t *ldvs, float *rconde, float *rcondv, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void sgeev_(const char *jobvl, const char *jobvr, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *wr, float *wi, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgeevx_(const char *balanc, const char *jobvl, const char *jobvr, const char *sense, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *wr, float *wi, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgehd2_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *a, const armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgehrd_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *a, const armpl_int_t *lda, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgejsv_(const char *joba, const char *jobu, const char *jobv, const char *jobr, const char *jobt, const char *jobp, const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *sva, float *u, const armpl_int_t *ldu, float *v, const armpl_int_t *ldv, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgelq2_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgelq_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *tsize, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgelqf_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgelqt3_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *ldt, armpl_int_t *info);
void sgelqt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *ldt, float *work, armpl_int_t *info);
void sgels_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgelsd_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *s, const float *rcond, armpl_int_t *rank, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info);
void sgelss_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *s, const float *rcond, armpl_int_t *rank, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgelst_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgelsy_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, armpl_int_t *jpvt, const float *rcond, armpl_int_t *rank, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgemlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *t, const armpl_int_t *tsize, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgemlqt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const float *v, const armpl_int_t *ldv, const float *t, const armpl_int_t *ldt, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sgemqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *t, const armpl_int_t *tsize, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgemqrt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *nb, const float *v, const armpl_int_t *ldv, const float *t, const armpl_int_t *ldt, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sgeql2_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgeqlf_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgeqp3_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *jpvt, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgeqp3rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *kmax, const float *abstol, const float *reltol, float *a, const armpl_int_t *lda, armpl_int_t *k, float *maxc2nrmk, float *relmaxc2nrmk, armpl_int_t *jpiv, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info);
void sgeqr2_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgeqr2p_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgeqr_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *tsize, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgeqrf_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgeqrfp_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgeqrt2_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *ldt, armpl_int_t *info);
void sgeqrt3_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *ldt, armpl_int_t *info);
void sgeqrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *ldt, float *work, armpl_int_t *info);
void sgerfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgerfsx_(const char *trans, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgerq2_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgerqf_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgesc2_(const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *rhs, const armpl_int_t *ipiv, const armpl_int_t *jpiv, float *scale);
void sgesdd_(const char *jobz, const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *s, float *u, const armpl_int_t *ldu, float *vt, const armpl_int_t *ldvt, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgesv_(const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info);
void sgesvd_(const char *jobu, const char *jobvt, const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *s, float *u, const armpl_int_t *ldu, float *vt, const armpl_int_t *ldvt, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgesvdq_(const char *joba, const char *jobp, const char *jobr, const char *jobu, const char *jobv, const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *s, float *u, const armpl_int_t *ldu, float *v, const armpl_int_t *ldv, armpl_int_t *numrank, armpl_int_t *iwork, armpl_int_t *liwork, float *work, const armpl_int_t *lwork, float *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void sgesvdx_(const char *jobu, const char *jobvt, const char *range, const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *ns, float *s, float *u, const armpl_int_t *ldu, float *vt, const armpl_int_t *ldvt, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgesvj_(const char *joba, const char *jobu, const char *jobv, const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *sva, const armpl_int_t *mv, float *v, const armpl_int_t *ldv, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgesvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgesvxx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgetc2_(const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *jpiv, armpl_int_t *info);
void sgetf2_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void sgetrf2_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void sgetrf_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void sgetri_(const armpl_int_t *n, float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgetrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void sgetsls_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgetsqrhrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb1, const armpl_int_t *nb1, const armpl_int_t *nb2, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *ldt, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sggbak_(const char *job, const char *side, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const float *lscale, const float *rscale, const armpl_int_t *m, float *v, const armpl_int_t *ldv, armpl_int_t *info, ... );
void sggbal_(const char *job, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *work, armpl_int_t *info, ... );
void sgges3_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_SGGES3_SELCTG selctg, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, const armpl_int_t *ldvsl, float *vsr, const armpl_int_t *ldvsr, float *work, const armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void sgges_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_SGGES_SELCTG selctg, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, const armpl_int_t *ldvsl, float *vsr, const armpl_int_t *ldvsr, float *work, const armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void sggesx_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_SGGESX_SELCTG selctg, const char *sense, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, const armpl_int_t *ldvsl, float *vsr, const armpl_int_t *ldvsr, float *rconde, float *rcondv, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void sggev3_(const char *jobvl, const char *jobvr, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sggev_(const char *jobvl, const char *jobvr, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sggevx_(const char *balanc, const char *jobvl, const char *jobvr, const char *sense, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void sggglm_(const armpl_int_t *n, const armpl_int_t *m, const armpl_int_t *p, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *d, float *x, float *y, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sgghd3_(const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgghrd_(const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, armpl_int_t *info, ... );
void sgglse_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *p, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *c, float *d, float *x, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sggqrf_(const armpl_int_t *n, const armpl_int_t *m, const armpl_int_t *p, float *a, const armpl_int_t *lda, float *taua, float *b, const armpl_int_t *ldb, float *taub, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sggrqf_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *taua, float *b, const armpl_int_t *ldb, float *taub, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sggsvd3_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *p, armpl_int_t *k, armpl_int_t *l, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *alpha, float *beta, float *u, const armpl_int_t *ldu, float *v, const armpl_int_t *ldv, float *q, const armpl_int_t *ldq, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void sggsvp3_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, const float *tola, const float *tolb, armpl_int_t *k, armpl_int_t *l, float *u, const armpl_int_t *ldu, float *v, const armpl_int_t *ldv, float *q, const armpl_int_t *ldq, armpl_int_t *iwork, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgsvj0_(const char *jobv, const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *d, float *sva, const armpl_int_t *mv, float *v, const armpl_int_t *ldv, const float *eps, const float *sfmin, const float *tol, const armpl_int_t *nsweep, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgsvj1_(const char *jobv, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *n1, float *a, const armpl_int_t *lda, float *d, float *sva, const armpl_int_t *mv, float *v, const armpl_int_t *ldv, const float *eps, const float *sfmin, const float *tol, const armpl_int_t *nsweep, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sgtcon_(const char *norm, const armpl_int_t *n, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgtrfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const float *dl, const float *d, const float *du, const float *dlf, const float *df, const float *duf, const float *du2, const armpl_int_t *ipiv, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgtsv_(const armpl_int_t *n, const armpl_int_t *nrhs, float *dl, float *d, float *du, float *b, const armpl_int_t *ldb, armpl_int_t *info);
void sgtsvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const float *dl, const float *d, const float *du, float *dlf, float *df, float *duf, float *du2, armpl_int_t *ipiv, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sgttrf_(const armpl_int_t *n, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv, armpl_int_t *info);
void sgttrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void sgtts2_(const armpl_int_t *itrans, const armpl_int_t *n, const armpl_int_t *nrhs, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb);
void shgeqz_(const char *job, const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *h, const armpl_int_t *ldh, float *t, const armpl_int_t *ldt, float *alphar, float *alphai, float *beta, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void shsein_(const char *side, const char *eigsrc, const char *initv, armpl_int_t *select, const armpl_int_t *n, const float *h, const armpl_int_t *ldh, float *wr, const float *wi, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *ifaill, armpl_int_t *ifailr, armpl_int_t *info, ... );
void shseqr_(const char *job, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *h, const armpl_int_t *ldh, float *wr, float *wi, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
armpl_int_t sisnan_(const float *sin);
void sla_gbamv_(const armpl_int_t *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const float *alpha, const float *ab, const armpl_int_t *ldab, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy);
float sla_gbrcond_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const float *ab, const armpl_int_t *ldab, const float *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_int_t *cmode, const float *c, armpl_int_t *info, float *work, armpl_int_t *iwork, ... );
void sla_gbrfsx_extended_(const armpl_int_t *prec_type, const armpl_int_t *trans_type, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const float *ab, const armpl_int_t *ldab, const float *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_int_t *colequ, const float *c, const float *b, const armpl_int_t *ldb, float *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info);
float sla_gbrpvgrw_(const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *ncols, const float *ab, const armpl_int_t *ldab, const float *afb, const armpl_int_t *ldafb);
void sla_geamv_(const armpl_int_t *trans, const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *a, const armpl_int_t *lda, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy);
float sla_gercond_(const char *trans, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *cmode, const float *c, armpl_int_t *info, float *work, armpl_int_t *iwork, ... );
void sla_gerfsx_extended_(const armpl_int_t *prec_type, const armpl_int_t *trans_type, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const float *c, const float *b, const armpl_int_t *ldb, float *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *errs_n, float *errs_c, float *res, float *ayb, float *dy, float *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info);
float sla_gerpvgrw_(const armpl_int_t *n, const armpl_int_t *ncols, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf);
void sla_lin_berr_(const armpl_int_t *n, const armpl_int_t *nz, const armpl_int_t *nrhs, const float *res, const float *ayb, float *berr);
float sla_porcond_(const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *cmode, const float *c, armpl_int_t *info, float *work, armpl_int_t *iwork, ... );
void sla_porfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *colequ, const float *c, const float *b, const armpl_int_t *ldb, float *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
float sla_porpvgrw_(const char *uplo, const armpl_int_t *ncols, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, float *work, ... );
void sla_syamv_(const armpl_int_t *uplo, const armpl_int_t *n, const float *alpha, const float *a, const armpl_int_t *lda, const float *x, const armpl_int_t *incx, const float *beta, float *y, const armpl_int_t *incy);
float sla_syrcond_(const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *cmode, const float *c, armpl_int_t *info, float *work, armpl_int_t *iwork, ... );
void sla_syrfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const float *c, const float *b, const armpl_int_t *ldb, float *y, const armpl_int_t *ldy, float *berr_out, const armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, const float *rcond, const armpl_int_t *ithresh, const float *rthresh, const float *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
float sla_syrpvgrw_(const char *uplo, const armpl_int_t *n, const armpl_int_t *info, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, float *work, ... );
void sla_wwaddw_(const armpl_int_t *n, float *x, float *y, const float *w);
void slabad_(float *small, float *large);
void slabrd_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, float *a, const armpl_int_t *lda, float *d, float *e, float *tauq, float *taup, float *x, const armpl_int_t *ldx, float *y, const armpl_int_t *ldy);
void slacn2_(const armpl_int_t *n, float *v, float *x, armpl_int_t *isgn, float *est, armpl_int_t *kase, armpl_int_t *isave);
void slacon_(const armpl_int_t *n, float *v, float *x, armpl_int_t *isgn, float *est, armpl_int_t *kase);
void slacpy_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, ... );
void sladiv_(const float *a, const float *b, const float *c, const float *d, float *p, float *q);
void slae2_(const float *a, const float *b, const float *c, float *rt1, float *rt2);
void slaebz_(const armpl_int_t *ijob, const armpl_int_t *nitmax, const armpl_int_t *n, const armpl_int_t *mmax, const armpl_int_t *minp, const armpl_int_t *nbmin, const float *abstol, const float *reltol, const float *pivmin, const float *d, const float *e, const float *e2, armpl_int_t *nval, float *ab, float *c, armpl_int_t *mout, armpl_int_t *nab, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slaed0_(const armpl_int_t *icompq, const armpl_int_t *qsiz, const armpl_int_t *n, float *d, const float *e, float *q, const armpl_int_t *ldq, float *qstore, const armpl_int_t *ldqs, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slaed1_(const armpl_int_t *n, float *d, float *q, const armpl_int_t *ldq, armpl_int_t *indxq, const float *rho, const armpl_int_t *cutpnt, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slaed2_(armpl_int_t *k, const armpl_int_t *n, const armpl_int_t *n1, float *d, float *q, const armpl_int_t *ldq, armpl_int_t *indxq, float *rho, const float *z, float *dlamda, float *w, float *q2, armpl_int_t *indx, armpl_int_t *indxc, armpl_int_t *indxp, armpl_int_t *coltyp, armpl_int_t *info);
void slaed3_(const armpl_int_t *k, const armpl_int_t *n, const armpl_int_t *n1, float *d, float *q, const armpl_int_t *ldq, const float *rho, float *dlamda, const float *q2, const armpl_int_t *indx, const armpl_int_t *ctot, float *w, float *s, armpl_int_t *info);
void slaed4_(const armpl_int_t *n, const armpl_int_t *i, const float *d, const float *z, float *delta, const float *rho, float *dlam, armpl_int_t *info);
void slaed5_(const armpl_int_t *i, const float *d, const float *z, float *delta, const float *rho, float *dlam);
void slaed6_(const armpl_int_t *kniter, const armpl_int_t *orgati, const float *rho, const float *d, const float *z, const float *finit, float *tau, armpl_int_t *info);
void slaed7_(const armpl_int_t *icompq, const armpl_int_t *n, const armpl_int_t *qsiz, const armpl_int_t *tlvls, const armpl_int_t *curlvl, const armpl_int_t *curpbm, float *d, float *q, const armpl_int_t *ldq, armpl_int_t *indxq, const float *rho, const armpl_int_t *cutpnt, float *qstore, armpl_int_t *qptr, const armpl_int_t *prmptr, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const float *givnum, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slaed8_(const armpl_int_t *icompq, armpl_int_t *k, const armpl_int_t *n, const armpl_int_t *qsiz, float *d, float *q, const armpl_int_t *ldq, const armpl_int_t *indxq, float *rho, const armpl_int_t *cutpnt, const float *z, float *dlamda, float *q2, const armpl_int_t *ldq2, float *w, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, float *givnum, armpl_int_t *indxp, armpl_int_t *indx, armpl_int_t *info);
void slaed9_(const armpl_int_t *k, const armpl_int_t *kstart, const armpl_int_t *kstop, const armpl_int_t *n, float *d, float *q, const armpl_int_t *ldq, const float *rho, const float *dlamda, const float *w, float *s, const armpl_int_t *lds, armpl_int_t *info);
void slaeda_(const armpl_int_t *n, const armpl_int_t *tlvls, const armpl_int_t *curlvl, const armpl_int_t *curpbm, const armpl_int_t *prmptr, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const float *givnum, const float *q, const armpl_int_t *qptr, float *z, float *ztemp, armpl_int_t *info);
void slaein_(const armpl_int_t *rightv, const armpl_int_t *noinit, const armpl_int_t *n, const float *h, const armpl_int_t *ldh, const float *wr, const float *wi, float *vr, float *vi, float *b, const armpl_int_t *ldb, float *work, const float *eps3, const float *smlnum, const float *bignum, armpl_int_t *info);
void slaev2_(const float *a, const float *b, const float *c, float *rt1, float *rt2, float *cs1, float *sn1);
void slaexc_(const armpl_int_t *wantq, const armpl_int_t *n, float *t, const armpl_int_t *ldt, float *q, const armpl_int_t *ldq, const armpl_int_t *j1, const armpl_int_t *n1, const armpl_int_t *n2, float *work, armpl_int_t *info);
void slag2_(const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, const float *safmin, float *scale1, float *scale2, float *wr1, float *wr2, float *wi);
void slag2d_(const armpl_int_t *m, const armpl_int_t *n, const float *sa, const armpl_int_t *ldsa, double *a, const armpl_int_t *lda, armpl_int_t *info);
void slags2_(const armpl_int_t *upper, const float *a1, const float *a2, const float *a3, const float *b1, const float *b2, const float *b3, float *csu, float *snu, float *csv, float *snv, float *csq, float *snq);
void slagtf_(const armpl_int_t *n, float *a, const float *lambda, float *b, float *c, const float *tol, float *d, armpl_int_t *in, armpl_int_t *info);
void slagtm_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const float *alpha, const float *dl, const float *d, const float *du, const float *x, const armpl_int_t *ldx, const float *beta, float *b, const armpl_int_t *ldb, ... );
void slagts_(const armpl_int_t *job, const armpl_int_t *n, const float *a, const float *b, const float *c, const float *d, const armpl_int_t *in, float *y, float *tol, armpl_int_t *info);
void slagv2_(float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *csl, float *snl, float *csr, float *snr);
void slahqr_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *h, const armpl_int_t *ldh, float *wr, float *wi, const armpl_int_t *iloz, const armpl_int_t *ihiz, float *z, const armpl_int_t *ldz, armpl_int_t *info);
void slahr2_(const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *nb, float *a, const armpl_int_t *lda, float *tau, float *t, const armpl_int_t *ldt, float *y, const armpl_int_t *ldy);
void slaic1_(const armpl_int_t *job, const armpl_int_t *j, const float *x, const float *sest, const float *w, const float *gamma, float *sestpr, float *s, float *c);
armpl_int_t slaisnan_(const float *sin1, const float *sin2);
void slaln2_(const armpl_int_t *ltrans, const armpl_int_t *na, const armpl_int_t *nw, const float *smin, const float *ca, const float *a, const armpl_int_t *lda, const float *d1, const float *d2, const float *b, const armpl_int_t *ldb, const float *wr, const float *wi, float *x, const armpl_int_t *ldx, float *scale, float *xnorm, armpl_int_t *info);
void slals0_(const armpl_int_t *icompq, const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, const armpl_int_t *nrhs, const float *b, const armpl_int_t *ldb, float *bx, const armpl_int_t *ldbx, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const armpl_int_t *ldgcol, const float *givnum, const armpl_int_t *ldgnum, const float *poles, const float *difl, const float *difr, const float *z, const armpl_int_t *k, const float *c, const float *s, float *work, armpl_int_t *info);
void slalsa_(const armpl_int_t *icompq, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *nrhs, float *b, const armpl_int_t *ldb, float *bx, const armpl_int_t *ldbx, const float *u, const armpl_int_t *ldu, const float *vt, const armpl_int_t *k, const float *difl, const float *difr, const float *z, const float *poles, const armpl_int_t *givptr, const armpl_int_t *givcol, const armpl_int_t *ldgcol, const armpl_int_t *perm, const float *givnum, const float *c, const float *s, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slalsd_(const char *uplo, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *nrhs, float *d, float *e, float *b, const armpl_int_t *ldb, const float *rcond, armpl_int_t *rank, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
float slamch_(const char *cmach, ... );
void slamrg_(const armpl_int_t *n1, const armpl_int_t *n2, const float *a, const armpl_int_t *strd1, const armpl_int_t *strd2, armpl_int_t *index);
void slamswlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_int_t *nb, float *a, const armpl_int_t *lda, const float *t, const armpl_int_t *ldt, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void slamtsqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_int_t *nb, float *a, const armpl_int_t *lda, const float *t, const armpl_int_t *ldt, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
armpl_int_t slaneg_(const armpl_int_t *n, const float *d, const float *lld, const float *sigma, const float *pivmin, const armpl_int_t *r);
float slangb_(const char *norm, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const float *ab, const armpl_int_t *ldab, float *work, ... );
float slange_(const char *norm, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *work, ... );
float slangt_(const char *norm, const armpl_int_t *n, const float *dl, const float *d, const float *du, ... );
float slanhs_(const char *norm, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *work, ... );
float slansb_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const float *ab, const armpl_int_t *ldab, float *work, ... );
float slansf_(const char *norm, const char *transr, const char *uplo, const armpl_int_t *n, const float *a, float *work, ... );
float slansp_(const char *norm, const char *uplo, const armpl_int_t *n, const float *ap, float *work, ... );
float slanst_(const char *norm, const armpl_int_t *n, const float *d, const float *e, ... );
float slansy_(const char *norm, const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *work, ... );
float slantb_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const float *ab, const armpl_int_t *ldab, float *work, ... );
float slantp_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const float *ap, float *work, ... );
float slantr_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *work, ... );
void slanv2_(float *a, float *b, float *c, float *d, float *rt1r, float *rt1i, float *rt2r, float *rt2i, float *cs, float *sn);
void slaorhr_col_getrfnp_(const armpl_int_t *m, const armpl_int_t *n, float *A, const armpl_int_t *lda, float *D, armpl_int_t *info);
void slaorhr_col_getrfnp2_(const armpl_int_t *m, const armpl_int_t *n, float *A, const armpl_int_t *lda, float *D, armpl_int_t *info);
void slapll_(const armpl_int_t *n, float *x, const armpl_int_t *incx, float *y, const armpl_int_t *incy, float *ssmin);
void slapmr_(const armpl_int_t *forwrd, const armpl_int_t *m, const armpl_int_t *n, float *x, const armpl_int_t *ldx, armpl_int_t *k);
void slapmt_(const armpl_int_t *forwrd, const armpl_int_t *m, const armpl_int_t *n, float *x, const armpl_int_t *ldx, armpl_int_t *k);
float slapy2_(const float *x, const float *y);
float slapy3_(const float *x, const float *y, const float *z);
void slaqgb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, float *ab, const armpl_int_t *ldab, const float *r, const float *c, const float *rowcnd, const float *colcnd, const float *amax, char *equed, ... );
void slaqge_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *r, const float *c, const float *rowcnd, const float *colcnd, const float *amax, char *equed, ... );
void slaqp2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *offset, float *a, const armpl_int_t *lda, armpl_int_t *jpvt, float *tau, float *vn1, float *vn2, float *work);
void slaqp2rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *ioffset, const armpl_int_t *kmax, const double *abstol, const double *reltol, const armpl_int_t *kp1, const double *maxc2nrm, float *a, const armpl_int_t *lda, armpl_int_t *k, double *maxc2nrmk, double *relmaxc2nrmk, armpl_int_t *jpiv, float *tau, float *vn1, float *vn2, float *work, armpl_int_t *info);
void slaqp3rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *ioffset, const armpl_int_t *nb, const float *abstol, const float *reltol, const armpl_int_t *kp1, const float *maxc2nrm, float *a, const armpl_int_t *lda, armpl_int_t *done, armpl_int_t *kb, float *maxc2nrmk, float *relmaxc2nrmk, armpl_int_t *jpiv, float *tau, float *vn1, float *vn2, float *auxv, float *f, const armpl_int_t *ldf, armpl_int_t *iwork, armpl_int_t *info);
void slaqps_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *offset, const armpl_int_t *nb, armpl_int_t *kb, float *a, const armpl_int_t *lda, armpl_int_t *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *f, const armpl_int_t *ldf);
void slaqr0_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *h, const armpl_int_t *ldh, float *wr, float *wi, const armpl_int_t *iloz, const armpl_int_t *ihiz, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void slaqr1_(const armpl_int_t *n, const float *h, const armpl_int_t *ldh, const float *sr1, float *si1, float *sr2, float *si2, float *v);
void slaqr2_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nw, float *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, float *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, float *sr, float *si, float *v, const armpl_int_t *ldv, const armpl_int_t *nh, float *t, const armpl_int_t *ldt, const armpl_int_t *nv, float *wv, const armpl_int_t *ldwv, float *work, const armpl_int_t *lwork);
void slaqr3_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nw, float *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, float *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, float *sr, float *si, float *v, const armpl_int_t *ldv, const armpl_int_t *nh, float *t, const armpl_int_t *ldt, const armpl_int_t *nv, float *wv, const armpl_int_t *ldwv, float *work, const armpl_int_t *lwork);
void slaqr4_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *h, const armpl_int_t *ldh, float *wr, float *wi, const armpl_int_t *iloz, const armpl_int_t *ihiz, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void slaqr5_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *kacc22, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nshfts, float *sr, float *si, float *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, float *z, const armpl_int_t *ldz, float *v, const armpl_int_t *ldv, float *u, const armpl_int_t *ldu, const armpl_int_t *nv, float *wv, const armpl_int_t *ldwv, const armpl_int_t *nh, float *wh, const armpl_int_t *ldwh);
void slaqsb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, const float *s, const float *scond, const float *amax, char *equed, ... );
void slaqsp_(const char *uplo, const armpl_int_t *n, float *ap, const float *s, const float *scond, const float *amax, char *equed, ... );
void slaqsy_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *s, const float *scond, const float *amax, char *equed, ... );
void slaqtr_(const armpl_int_t *ltran, const armpl_int_t *lreal, const armpl_int_t *n, const float *t, const armpl_int_t *ldt, const float *b, const float *w, float *scale, float *x, float *work, armpl_int_t *info);
void slaqz0_(const char *wants, const char *wantq, const char *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, const armpl_int_t rec, armpl_int_t *info, ... );
void slaqz1_(const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, const float *sr1, const float *sr2, const float *si, const float *beta1, const float *beta2, float *v);
void slaqz2_(const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *k, const armpl_int_t *istartm, const armpl_int_t *istopm, const armpl_int_t *ihi, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, const armpl_int_t *nq, const armpl_int_t *qstart, float *q, const armpl_int_t *ldq, const armpl_int_t *nz, const armpl_int_t *zstart, float *z, const armpl_int_t *ldz);
void slaqz3_(const armpl_int_t *ilschur, const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *nw, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, float *alphar, float *alphai, float *beta, float *qc, const armpl_int_t *ldqc, float *zc, float *work, const armpl_int_t *lwork, const armpl_int_t *rec, armpl_int_t *info);
void slaqz4_(const armpl_int_t *ilschur, const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *nshifts, const armpl_int_t *nblock_desired, const float *sr, const float *si, const float *ss, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, float *qc, const armpl_int_t *ldqc, float *zc, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void slar1v_(const armpl_int_t *n, const armpl_int_t *b1, const armpl_int_t *bn, const float *lambda, const float *d, const float *l, const float *ld, const float *lld, const float *pivmin, const float *gaptol, float *z, const armpl_int_t *wantnc, armpl_int_t *negcnt, float *ztz, float *mingma, armpl_int_t *r, armpl_int_t *isuppz, float *nrminv, float *resid, float *rqcorr, float *work);
void slar2v_(const armpl_int_t *n, float *x, float *y, float *z, const armpl_int_t *incx, const float *c, const float *s, const armpl_int_t *incc);
void slarf_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const float *v, const armpl_int_t *incv, const float *tau, float *c, const armpl_int_t *ldc, float *work, ... );
void slarfb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *v, const armpl_int_t *ldv, const float *t, const armpl_int_t *ldt, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *ldwork, ... );
void slarfg_(const armpl_int_t *n, float *alpha, float *x, const armpl_int_t *incx, float *tau);
void slarfgp_(const armpl_int_t *n, float *alpha, float *x, const armpl_int_t *incx, float *tau);
void slarft_(const char *direct, const char *storev, const armpl_int_t *n, const armpl_int_t *k, const float *v, const armpl_int_t *ldv, const float *tau, float *t, const armpl_int_t *ldt, ... );
void slarfx_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const float *v, const float *tau, float *c, const armpl_int_t *ldc, float *work, ... );
void slarfy_(const char *uplo, const armpl_int_t *n, const float *v, const armpl_int_t *incv, const float *tau, float *c, const armpl_int_t *ldc, float *work, ... );
void slargv_(const armpl_int_t *n, float *x, const armpl_int_t *incx, float *y, const armpl_int_t *incy, float *c, const armpl_int_t *incc);
float slarmm_(const float *anorm, const float *bnorm, const float *cnorm);
void slarnv_(const armpl_int_t *idist, armpl_int_t *iseed, const armpl_int_t *n, float *x);
void slarra_(const armpl_int_t *n, const float *d, float *e, float *e2, const float *spltol, const float *tnrm, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *info);
void slarrb_(const armpl_int_t *n, const float *d, const float *lld, const armpl_int_t *ifirst, const armpl_int_t *ilast, const float *rtol1, const float *rtol2, const armpl_int_t *offset, float *w, float *wgap, float *werr, float *work, armpl_int_t *iwork, const float *pivmin, const float *spdiam, const armpl_int_t *twist, armpl_int_t *info);
void slarrc_(const char *jobt, const armpl_int_t *n, const float *vl, const float *vu, const float *d, const float *e, const float *pivmin, armpl_int_t *eigcnt, armpl_int_t *lcnt, armpl_int_t *rcnt, armpl_int_t *info, ... );
void slarrd_(const char *range, const char *order, const armpl_int_t *n, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *gers, const float *reltol, const float *d, const float *e, const float *e2, const float *pivmin, const armpl_int_t *nsplit, const armpl_int_t *isplit, armpl_int_t *m, float *w, float *werr, float *wl, float *wu, armpl_int_t *iblock, armpl_int_t *indexw, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void slarre_(const char *range, const armpl_int_t *n, float *vl, float *vu, const armpl_int_t *il, const armpl_int_t *iu, float *d, float *e, float *e2, const float *rtol1, const float *rtol2, const float *spltol, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *m, float *w, float *werr, float *wgap, armpl_int_t *iblock, armpl_int_t *indexw, float *gers, float *pivmin, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void slarrf_(const armpl_int_t *n, const float *d, const float *l, const float *ld, const armpl_int_t *clstrt, const armpl_int_t *clend, const float *w, float *wgap, const float *werr, const float *spdiam, const float *clgapl, float *clgapr, const float *pivmin, float *sigma, float *dplus, float *lplus, float *work, armpl_int_t *info);
void slarrj_(const armpl_int_t *n, const float *d, const float *e2, const armpl_int_t *ifirst, const armpl_int_t *ilast, const float *rtol, const armpl_int_t *offset, float *w, float *werr, float *work, armpl_int_t *iwork, const float *pivmin, const float *spdiam, armpl_int_t *info);
void slarrk_(const armpl_int_t *n, const armpl_int_t *iw, const float *gl, const float *gu, const float *d, const float *e2, const float *pivmin, const float *reltol, float *w, float *werr, armpl_int_t *info);
void slarrr_(const armpl_int_t *n, const float *d, float *e, armpl_int_t *info);
void slarrv_(const armpl_int_t *n, const float *vl, const float *vu, float *d, float *l, float *pivmin, const armpl_int_t *isplit, const armpl_int_t *m, const armpl_int_t *dol, const armpl_int_t *dou, const float *minrgp, const float *rtol1, const float *rtol2, float *w, float *werr, float *wgap, const armpl_int_t *iblock, const armpl_int_t *indexw, const float *gers, float *z, const armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slarscl2_(const armpl_int_t *m, const armpl_int_t *n, const float *d, float *x, const armpl_int_t *ldx);
void slartg_(const float *f, const float *g, float *cs, float *sn, float *r);
void slartgp_(const float *f, const float *g, float *cs, float *sn, float *r);
void slartgs_(const float *x, const float *y, const float *sigma, float *cs, float *sn);
void slartv_(const armpl_int_t *n, float *x, const armpl_int_t *incx, float *y, const armpl_int_t *incy, const float *c, const float *s, const armpl_int_t *incc);
void slaruv_(armpl_int_t *iseed, const armpl_int_t *n, float *x);
void slarz_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const float *v, const armpl_int_t *incv, const float *tau, float *c, const armpl_int_t *ldc, float *work, ... );
void slarzb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const float *v, const armpl_int_t *ldv, const float *t, const armpl_int_t *ldt, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *ldwork, ... );
void slarzt_(const char *direct, const char *storev, const armpl_int_t *n, const armpl_int_t *k, float *v, const armpl_int_t *ldv, const float *tau, float *t, const armpl_int_t *ldt, ... );
void slas2_(const float *f, const float *g, const float *h, float *ssmin, float *ssmax);
void slascl2_(const armpl_int_t *m, const armpl_int_t *n, const float *d, float *x, const armpl_int_t *ldx);
void slascl_(const char *type, const armpl_int_t *kl, const armpl_int_t *ku, const float *cfrom, const float *cto, const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void slasd0_(const armpl_int_t *n, const armpl_int_t *sqre, float *d, float *e, float *u, const armpl_int_t *ldu, float *vt, const armpl_int_t *ldvt, const armpl_int_t *smlsiz, armpl_int_t *iwork, float *work, armpl_int_t *info);
void slasd1_(const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, float *d, float *alpha, float *beta, float *u, const armpl_int_t *ldu, float *vt, const armpl_int_t *ldvt, armpl_int_t *idxq, armpl_int_t *iwork, float *work, armpl_int_t *info);
void slasd2_(const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, armpl_int_t *k, float *d, float *z, const float *alpha, const float *beta, float *u, const armpl_int_t *ldu, float *vt, const armpl_int_t *ldvt, float *dsigma, float *u2, const armpl_int_t *ldu2, float *vt2, const armpl_int_t *ldvt2, armpl_int_t *idxp, armpl_int_t *idx, armpl_int_t *idxc, armpl_int_t *idxq, armpl_int_t *coltyp, armpl_int_t *info);
void slasd3_(const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, const armpl_int_t *k, float *d, float *q, const armpl_int_t *ldq, float *dsigma, float *u, const armpl_int_t *ldu, const float *u2, const armpl_int_t *ldu2, float *vt, const armpl_int_t *ldvt, float *vt2, const armpl_int_t *ldvt2, const armpl_int_t *idxc, const armpl_int_t *ctot, float *z, armpl_int_t *info);
void slasd4_(const armpl_int_t *n, const armpl_int_t *i, const float *d, const float *z, float *delta, const float *rho, float *sigma, float *work, armpl_int_t *info);
void slasd5_(const armpl_int_t *i, const float *d, const float *z, float *delta, const float *rho, float *dsigma, float *work);
void slasd6_(const armpl_int_t *icompq, const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, float *d, float *vf, float *vl, float *alpha, float *beta, armpl_int_t *idxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, const armpl_int_t *ldgcol, float *givnum, const armpl_int_t *ldgnum, float *poles, float *difl, float *difr, float *z, armpl_int_t *k, float *c, float *s, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slasd7_(const armpl_int_t *icompq, const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, armpl_int_t *k, float *d, float *z, float *zw, float *vf, float *vfw, float *vl, float *vlw, const float *alpha, const float *beta, float *dsigma, armpl_int_t *idx, armpl_int_t *idxp, const armpl_int_t *idxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, const armpl_int_t *ldgcol, float *givnum, const armpl_int_t *ldgnum, float *c, float *s, armpl_int_t *info);
void slasd8_(const armpl_int_t *icompq, const armpl_int_t *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, const armpl_int_t *lddifr, float *dsigma, float *work, armpl_int_t *info);
void slasda_(const armpl_int_t *icompq, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *sqre, float *d, const float *e, float *u, const armpl_int_t *ldu, float *vt, armpl_int_t *k, float *difl, float *difr, float *z, float *poles, armpl_int_t *givptr, armpl_int_t *givcol, const armpl_int_t *ldgcol, armpl_int_t *perm, float *givnum, float *c, float *s, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slasdq_(const char *uplo, const armpl_int_t *sqre, const armpl_int_t *n, const armpl_int_t *ncvt, const armpl_int_t *nru, const armpl_int_t *ncc, float *d, float *e, float *vt, const armpl_int_t *ldvt, float *u, const armpl_int_t *ldu, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void slasdt_(const armpl_int_t *n, armpl_int_t *lvl, armpl_int_t *nd, armpl_int_t *inode, armpl_int_t *ndiml, armpl_int_t *ndimr, const armpl_int_t *msub);
void slaset_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *beta, float *a, const armpl_int_t *lda, ... );
void slasq1_(const armpl_int_t *n, float *d, float *e, float *work, armpl_int_t *info);
void slasq2_(const armpl_int_t *n, float *z, armpl_int_t *info);
void slasq3_(const armpl_int_t *i0, const armpl_int_t *n0, const float *z, armpl_int_t *pp, float *dmin, float *sigma, float *desig, const float *qmax, armpl_int_t *nfail, armpl_int_t *iter, armpl_int_t *ndiv, const armpl_int_t *ieee, armpl_int_t *ttype, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *g, float *tau);
void slasq4_(const armpl_int_t *i0, const armpl_int_t *n0, const float *z, const armpl_int_t *pp, armpl_int_t *n0in, const float *dmin, const float *dmin1, const float *dmin2, const float *dn, const float *dn1, const float *dn2, float *tau, armpl_int_t *ttype, float *g);
void slasq5_(const armpl_int_t *i0, const armpl_int_t *n0, const float *z, const armpl_int_t *pp, const float *tau, const float *sigma, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2, const armpl_int_t *ieee, const float *eps);
void slasq6_(const armpl_int_t *i0, const armpl_int_t *n0, const float *z, const armpl_int_t *pp, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2);
void slasr_(const char *side, const char *pivot, const char *direct, const armpl_int_t *m, const armpl_int_t *n, const float *c, const float *s, float *a, const armpl_int_t *lda, ... );
void slasrt_(const char *id, const armpl_int_t *n, float *d, armpl_int_t *info, ... );
void slassq_(const armpl_int_t *n, const float *x, const armpl_int_t *incx, float *scale, float *sumsq);
void slasv2_(const float *f, const float *g, const float *h, float *ssmin, float *ssmax, float *snr, float *csr, float *snl, float *csl);
void slaswlq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *ldt, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void slaswp_(const armpl_int_t *n, float *a, const armpl_int_t *lda, const armpl_int_t *k1, const armpl_int_t *k2, const armpl_int_t *ipiv, const armpl_int_t *incx);
void slasy2_(const armpl_int_t *ltranl, const armpl_int_t *ltranr, const armpl_int_t *isgn, const armpl_int_t *n1, const armpl_int_t *n2, const float *tl, const armpl_int_t *ldtl, const float *tr, const armpl_int_t *ldtr, const float *b, const armpl_int_t *ldb, float *scale, float *x, const armpl_int_t *ldx, float *xnorm, armpl_int_t *info);
void slasyf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void slasyf_aa_(const char *uplo, const armpl_int_t *j1, const armpl_int_t *m, const armpl_int_t *nb, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *h, const armpl_int_t *ldh, float *work, ... );
void slasyf_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, float *a, const armpl_int_t *lda, float *e, armpl_int_t *ipiv, float *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void slasyf_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void slatbs_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_int_t *kd, const float *ab, const armpl_int_t *ldab, float *x, float *scale, float *cnorm, armpl_int_t *info, ... );
void slatdf_(const armpl_int_t *ijob, const armpl_int_t *n, const float *z, const armpl_int_t *ldz, float *rhs, float *rdsum, float *rdscal, const armpl_int_t *ipiv, const armpl_int_t *jpiv);
void slatps_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const float *ap, float *x, float *scale, float *cnorm, armpl_int_t *info, ... );
void slatrd_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, float *a, const armpl_int_t *lda, float *e, float *tau, float *w, const armpl_int_t *ldw, ... );
void slatrs_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *x, float *scale, float *cnorm, armpl_int_t *info, ... );
void slatrs3_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, float *x, const armpl_int_t *ldx, float *scale, float *cnorm, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void slatrz_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, float *a, const armpl_int_t *lda, float *tau, float *work);
void slatsqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, float *a, const armpl_int_t *lda, float *t, const armpl_int_t *ldt, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void slauu2_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void slauum_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void sopgtr_(const char *uplo, const armpl_int_t *n, const float *ap, const float *tau, float *q, const armpl_int_t *ldq, float *work, armpl_int_t *info, ... );
void sopmtr_(const char *side, const char *uplo, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const float *ap, const float *tau, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sorbdb1_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *x11, const armpl_int_t *ldx11, float *x21, const armpl_int_t *ldx21, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorbdb2_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *x11, const armpl_int_t *ldx11, float *x21, const armpl_int_t *ldx21, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorbdb3_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *x11, const armpl_int_t *ldx11, float *x21, const armpl_int_t *ldx21, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorbdb4_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *x11, const armpl_int_t *ldx11, float *x21, const armpl_int_t *ldx21, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *phantom, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorbdb5_(const armpl_int_t *m1, const armpl_int_t *m2, const armpl_int_t *n, float *x1, const armpl_int_t *incx1, float *x2, const armpl_int_t *incx2, float *q1, const armpl_int_t *ldq1, float *q2, const armpl_int_t *ldq2, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorbdb6_(const armpl_int_t *m1, const armpl_int_t *m2, const armpl_int_t *n, float *x1, const armpl_int_t *incx1, float *x2, const armpl_int_t *incx2, float *q1, const armpl_int_t *ldq1, float *q2, const armpl_int_t *ldq2, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorbdb_(const char *trans, const char *signs, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *x11, const armpl_int_t *ldx11, float *x12, const armpl_int_t *ldx12, float *x21, const armpl_int_t *ldx21, float *x22, const armpl_int_t *ldx22, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *tauq2, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sorcsd2by1_(const char *jobu1, const char *jobu2, const char *jobv1t, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *x11, const armpl_int_t *ldx11, float *x21, const armpl_int_t *ldx21, float *theta, float *u1, const armpl_int_t *ldu1, float *u2, const armpl_int_t *ldu2, float *v1t, const armpl_int_t *ldv1t, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void sorcsd_(const char *jobu1, const char *jobu2, const char *jobv1t, const char *jobv2t, const char *trans, const char *signs, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, float *x11, const armpl_int_t *ldx11, float *x12, const armpl_int_t *ldx12, float *x21, const armpl_int_t *ldx21, float *x22, const armpl_int_t *ldx22, float *theta, float *u1, const armpl_int_t *ldu1, float *u2, const armpl_int_t *ldu2, float *v1t, const armpl_int_t *ldv1t, float *v2t, const armpl_int_t *ldv2t, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void sorg2l_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, armpl_int_t *info);
void sorg2r_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, armpl_int_t *info);
void sorgbr_(const char *vect, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sorghr_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, float *a, const armpl_int_t *lda, const float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorgl2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, armpl_int_t *info);
void sorglq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorgql_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorgqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorgr2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, armpl_int_t *info);
void sorgrq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, float *a, const armpl_int_t *lda, const float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorgtr_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sorgtsqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, float *a, const armpl_int_t *lda, const float *t, const armpl_int_t *ldt, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorgtsqr_row_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, float *a, const armpl_int_t *lda, const float *t, const armpl_int_t *ldt, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void sorhr_col_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, float *a, const armpl_int_t *lda, const float *t, const armpl_int_t *ldt, float *d, armpl_int_t *info);
void sorm22_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *n1, const armpl_int_t *n2, const float *q, const armpl_int_t *ldq, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sorm2l_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sorm2r_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sormbr_(const char *vect, const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sormhr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sorml2_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sormlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sormql_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sormqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sormr2_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sormr3_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, armpl_int_t *info, ... );
void sormrq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sormrz_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void sormtr_(const char *side, const char *uplo, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *tau, float *c, const armpl_int_t *ldc, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void spbcon_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const float *ab, const armpl_int_t *ldab, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void spbequ_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const float *ab, const armpl_int_t *ldab, float *s, float *scond, float *amax, armpl_int_t *info, ... );
void spbrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const float *ab, const armpl_int_t *ldab, const float *afb, const armpl_int_t *ldafb, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void spbstf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void spbsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, float *ab, const armpl_int_t *ldab, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void spbsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, float *ab, const armpl_int_t *ldab, float *afb, const armpl_int_t *ldafb, char *equed, float *s, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void spbtf2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void spbtrf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void spbtrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const float *ab, const armpl_int_t *ldab, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void spftrf_(const char *transr, const char *uplo, const armpl_int_t *n, float *a, armpl_int_t *info, ... );
void spftri_(const char *transr, const char *uplo, const armpl_int_t *n, float *a, armpl_int_t *info, ... );
void spftrs_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void spocon_(const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void spoequ_(const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *s, float *scond, float *amax, armpl_int_t *info);
void spoequb_(const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *s, float *scond, float *amax, armpl_int_t *info);
void sporfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sporfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const float *s, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sposv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void sposvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *af, const armpl_int_t *ldaf, char *equed, float *s, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sposvxx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *af, const armpl_int_t *ldaf, char *equed, float *s, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void spotf2_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void spotrf2_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void spotrf_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void spotri_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void spotrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void sppcon_(const char *uplo, const armpl_int_t *n, const float *ap, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sppequ_(const char *uplo, const armpl_int_t *n, const float *ap, float *s, float *scond, float *amax, armpl_int_t *info, ... );
void spprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *ap, const float *afp, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sppsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *ap, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void sppsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *ap, float *afp, char *equed, float *s, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void spptrf_(const char *uplo, const armpl_int_t *n, float *ap, armpl_int_t *info, ... );
void spptri_(const char *uplo, const armpl_int_t *n, float *ap, armpl_int_t *info, ... );
void spptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *ap, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void spstf2_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, const float *tol, float *work, armpl_int_t *info, ... );
void spstrf_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, const float *tol, float *work, armpl_int_t *info, ... );
void sptcon_(const armpl_int_t *n, const float *d, const float *e, const float *anorm, float *rcond, float *work, armpl_int_t *info);
void spteqr_(const char *compz, const armpl_int_t *n, float *d, float *e, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void sptrfs_(const armpl_int_t *n, const armpl_int_t *nrhs, const float *d, const float *e, const float *df, const float *ef, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *info);
void sptsv_(const armpl_int_t *n, const armpl_int_t *nrhs, float *d, float *e, float *b, const armpl_int_t *ldb, armpl_int_t *info);
void sptsvx_(const char *fact, const armpl_int_t *n, const armpl_int_t *nrhs, const float *d, const float *e, float *df, float *ef, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *info, ... );
void spttrf_(const armpl_int_t *n, float *d, float *e, armpl_int_t *info);
void spttrs_(const armpl_int_t *n, const armpl_int_t *nrhs, const float *d, const float *e, float *b, const armpl_int_t *ldb, armpl_int_t *info);
void sptts2_(const armpl_int_t *n, const armpl_int_t *nrhs, const float *d, const float *e, float *b, const armpl_int_t *ldb);
void srscl_(const armpl_int_t *n, const float *sa, float *sx, const armpl_int_t *incx);
void ssb2st_kernels_(const char *uplo, const armpl_int_t *wantz, const armpl_int_t *ttype, const armpl_int_t *st, const armpl_int_t *ed, const armpl_int_t *sweep, const armpl_int_t *n, const armpl_int_t *nb, const armpl_int_t *ib, float *a, const armpl_int_t *lda, float *v, float *tau, const armpl_int_t *ldvt, const float *work, ... );
void ssbev_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void ssbev_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssbevd_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssbevd_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssbevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, float *q, const armpl_int_t *ldq, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void ssbevx_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, float *q, const armpl_int_t *ldq, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void ssbgst_(const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, float *ab, const armpl_int_t *ldab, const float *bb, const armpl_int_t *ldbb, float *x, const armpl_int_t *ldx, float *work, armpl_int_t *info, ... );
void ssbgv_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, float *ab, const armpl_int_t *ldab, float *bb, const armpl_int_t *ldbb, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void ssbgvd_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, float *ab, const armpl_int_t *ldab, float *bb, const armpl_int_t *ldbb, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssbgvx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, float *ab, const armpl_int_t *ldab, float *bb, const armpl_int_t *ldbb, float *q, const armpl_int_t *ldq, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void ssbtrd_(const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, float *d, float *e, float *q, const armpl_int_t *ldq, float *work, armpl_int_t *info, ... );
void ssfrk_(const char *transr, const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float *a, const armpl_int_t *lda, const float *beta, float *c, ... );
void sspcon_(const char *uplo, const armpl_int_t *n, const float *ap, const armpl_int_t *ipiv, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sspev_(const char *jobz, const char *uplo, const armpl_int_t *n, float *ap, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void sspevd_(const char *jobz, const char *uplo, const armpl_int_t *n, float *ap, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void sspevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, float *ap, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void sspgst_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, float *ap, const float *bp, armpl_int_t *info, ... );
void sspgv_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, float *ap, float *bp, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void sspgvd_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, float *ap, float *bp, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void sspgvx_(const armpl_int_t *itype, const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, float *ap, float *bp, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void ssprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *ap, const float *afp, const armpl_int_t *ipiv, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sspsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *ap, armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void sspsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *ap, float *afp, armpl_int_t *ipiv, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void ssptrd_(const char *uplo, const armpl_int_t *n, float *ap, float *d, float *e, float *tau, armpl_int_t *info, ... );
void ssptrf_(const char *uplo, const armpl_int_t *n, float *ap, armpl_int_t *ipiv, armpl_int_t *info, ... );
void ssptri_(const char *uplo, const armpl_int_t *n, float *ap, const armpl_int_t *ipiv, float *work, armpl_int_t *info, ... );
void ssptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *ap, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void sstebz_(const char *range, const char *order, const armpl_int_t *n, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, const float *d, const float *e, armpl_int_t *m, armpl_int_t *nsplit, float *w, armpl_int_t *iblock, armpl_int_t *isplit, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void sstedc_(const char *compz, const armpl_int_t *n, float *d, float *e, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void sstegr_(const char *jobz, const char *range, const armpl_int_t *n, float *d, float *e, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, armpl_int_t *isuppz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void sstein_(const armpl_int_t *n, const float *d, const float *e, const armpl_int_t *m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info);
void sstemr_(const char *jobz, const char *range, const armpl_int_t *n, float *d, float *e, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, const armpl_int_t *nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssteqr_(const char *compz, const armpl_int_t *n, float *d, float *e, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void ssterf_(const armpl_int_t *n, float *d, float *e, armpl_int_t *info);
void sstev_(const char *jobz, const armpl_int_t *n, float *d, float *e, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *info, ... );
void sstevd_(const char *jobz, const armpl_int_t *n, float *d, float *e, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void sstevr_(const char *jobz, const char *range, const armpl_int_t *n, float *d, float *e, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, armpl_int_t *isuppz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void sstevx_(const char *jobz, const char *range, const armpl_int_t *n, float *d, float *e, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void ssycon_(const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void ssycon_3_(const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *e, const armpl_int_t *ipiv, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void ssycon_rook_(const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void ssyconv_(const char *uplo, const char *way, const armpl_int_t *n, float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *e, armpl_int_t *info, ... );
void ssyconvf_(const char *uplo, const char *way, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void ssyconvf_rook_(const char *uplo, const char *way, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *e, const armpl_int_t *ipiv, armpl_int_t *info, ... );
void ssyequb_(char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *s, float *scond, float *amax, float *work, armpl_int_t *info, ... );
void ssyev_(const char *jobz, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *w, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssyev_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *w, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssyevd_(const char *jobz, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *w, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssyevd_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *w, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssyevr_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, armpl_int_t *isuppz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssyevr_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, armpl_int_t *isuppz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssyevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void ssyevx_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void ssygs2_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ssygst_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ssygv_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *w, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssygv_2stage_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *w, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssygvd_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *w, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void ssygvx_(const armpl_int_t *itype, const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, const float *vl, const float *vu, const armpl_int_t *il, const armpl_int_t *iu, const float *abstol, armpl_int_t *m, float *w, float *z, const armpl_int_t *ldz, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void ssyrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void ssyrfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const float *s, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void ssysv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssysv_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssysv_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssysv_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *e, armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssysv_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssysvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, float *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, const float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void ssysvxx_(const char *fact, char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, float *a, const armpl_int_t *lda, float *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *s, float *b, const armpl_int_t *ldb, float *x, const armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, const armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, const armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void ssyswapr_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const armpl_int_t *i1, const armpl_int_t *i2, ... );
void ssytd2_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *d, float *e, float *tau, armpl_int_t *info, ... );
void ssytf2_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void ssytf2_rk_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void ssytf2_rook_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void ssytrd_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *d, float *e, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrd_2stage_(const char *vect, const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *d, float *e, float *tau, float *hous2, const armpl_int_t *lhous2, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrd_sb2st_(const char *stage1, const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *ab, const armpl_int_t *ldab, float *d, float *e, float *hous, const armpl_int_t *lhous, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrd_sy2sb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, float *a, const armpl_int_t *lda, float *ab, const armpl_int_t *ldab, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrf_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrf_aa_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrf_aa_2stage_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrf_rk_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *e, armpl_int_t *ipiv, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrf_rook_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *ipiv, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytri2_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytri2x_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void ssytri_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *work, armpl_int_t *info, ... );
void ssytri_3_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *e, const armpl_int_t *ipiv, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytri_3x_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const float *e, const armpl_int_t *ipiv, float *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void ssytri_rook_(const char *uplo, const armpl_int_t *n, float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *work, armpl_int_t *info, ... );
void ssytrs2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, float *work, armpl_int_t *info, ... );
void ssytrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ssytrs_3_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *e, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ssytrs_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, const float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ssytrs_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, float *tb, const armpl_int_t *ltb, const armpl_int_t *ipiv, const armpl_int_t *ipiv2, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ssytrs_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const armpl_int_t *ipiv, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void stbcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const float *ab, const armpl_int_t *ldab, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void stbrfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const float *ab, const armpl_int_t *ldab, const float *b, const armpl_int_t *ldb, const float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void stbtrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const float *ab, const armpl_int_t *ldab, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void stfsm_(const char *transr, const char *side, const char *uplo, const char *trans, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const float *alpha, const float *a, float *b, const armpl_int_t *ldb, ... );
void stftri_(const char *transr, const char *uplo, const char *diag, const armpl_int_t *n, float *a, armpl_int_t *info, ... );
void stfttp_(const char *transr, const char *uplo, const armpl_int_t *n, const float *arf, float *ap, armpl_int_t *info, ... );
void stfttr_(const char *transr, const char *uplo, const armpl_int_t *n, const float *arf, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void stgevc_(const char *side, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const float *s, const armpl_int_t *lds, const float *p, const armpl_int_t *ldp, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *info, ... );
void stgex2_(const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, const armpl_int_t *j1, const armpl_int_t *n1, const armpl_int_t *n2, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void stgexc_(const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, armpl_int_t *ifst, armpl_int_t *ilst, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void stgsen_(const armpl_int_t *ijob, const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *select, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *q, const armpl_int_t *ldq, float *z, const armpl_int_t *ldz, armpl_int_t *m, float *pl, float *pr, float *dif, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info);
void stgsja_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, const float *tola, const float *tolb, float *alpha, float *beta, float *u, const armpl_int_t *ldu, float *v, const armpl_int_t *ldv, float *q, const armpl_int_t *ldq, float *work, armpl_int_t *ncycle, armpl_int_t *info, ... );
void stgsna_(const char *job, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, const float *vl, const armpl_int_t *ldvl, const float *vr, const armpl_int_t *ldvr, float *s, float *dif, const armpl_int_t *mm, armpl_int_t *m, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void stgsy2_(const char *trans, const armpl_int_t *ijob, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, float *c, const armpl_int_t *ldc, const float *d, const armpl_int_t *ldd, const float *e, const armpl_int_t *lde, float *f, const armpl_int_t *ldf, float *scale, float *rdsum, float *rdscal, armpl_int_t *iwork, armpl_int_t *pq, armpl_int_t *info, ... );
void stgsyl_(const char *trans, const armpl_int_t *ijob, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, float *c, const armpl_int_t *ldc, const float *d, const armpl_int_t *ldd, const float *e, const armpl_int_t *lde, float *f, const armpl_int_t *ldf, float *scale, float *dif, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void stpcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const float *ap, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void stplqt2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *t, const armpl_int_t *ldt, armpl_int_t *info);
void stplqt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_int_t *mb, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *t, const armpl_int_t *ldt, float *work, armpl_int_t *info);
void stpmlqt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_int_t *mb, const float *v, const armpl_int_t *ldv, const float *t, const armpl_int_t *ldt, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *work, armpl_int_t *info, ... );
void stpmqrt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_int_t *nb, const float *v, const armpl_int_t *ldv, const float *t, const armpl_int_t *ldt, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *work, armpl_int_t *info, ... );
void stpqrt2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *t, const armpl_int_t *ldt, armpl_int_t *info);
void stpqrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_int_t *nb, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *t, const armpl_int_t *ldt, float *work, armpl_int_t *info);
void stprfb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const float *v, const armpl_int_t *ldv, const float *t, const armpl_int_t *ldt, float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, float *work, const armpl_int_t *ldwork, ... );
void stprfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const float *ap, const float *b, const armpl_int_t *ldb, const float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void stptri_(const char *uplo, const char *diag, const armpl_int_t *n, float *ap, armpl_int_t *info, ... );
void stptrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const float *ap, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void stpttf_(const char *transr, const char *uplo, const armpl_int_t *n, const float *ap, float *arf, armpl_int_t *info, ... );
void stpttr_(const char *uplo, const armpl_int_t *n, const float *ap, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void strcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void strevc3_(const char *side, const char *howmny, armpl_int_t *select, const armpl_int_t *n, const float *t, const armpl_int_t *ldt, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, float *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void strevc_(const char *side, const char *howmny, armpl_int_t *select, const armpl_int_t *n, const float *t, const armpl_int_t *ldt, float *vl, const armpl_int_t *ldvl, float *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *info, ... );
void strexc_(const char *compq, const armpl_int_t *n, float *t, const armpl_int_t *ldt, float *q, const armpl_int_t *ldq, armpl_int_t *ifst, armpl_int_t *ilst, float *work, armpl_int_t *info, ... );
void strrfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, const float *x, const armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info, ... );
void strsen_(const char *job, const char *compq, const armpl_int_t *select, const armpl_int_t *n, float *t, const armpl_int_t *ldt, float *q, const armpl_int_t *ldq, float *wr, float *wi, armpl_int_t *m, float *s, float *sep, float *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void strsna_(const char *job, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const float *t, const armpl_int_t *ldt, const float *vl, const armpl_int_t *ldvl, const float *vr, const armpl_int_t *ldvr, float *s, float *sep, const armpl_int_t *mm, armpl_int_t *m, float *work, const armpl_int_t *ldwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void strsyl_(const char *trana, const char *tranb, const armpl_int_t *isgn, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, float *c, const armpl_int_t *ldc, float *scale, armpl_int_t *info, ... );
void strsyl3_(const char *trana, const char *tranb, const armpl_int_t *isgn, const armpl_int_t *m, const armpl_int_t *n, const float *a, const armpl_int_t *lda, const float *b, const armpl_int_t *ldb, float *c, const armpl_int_t *ldc, float *scale, armpl_int_t *iwork, const armpl_int_t *liwork, float *swork, const armpl_int_t *ldswork, armpl_int_t *info, ... );
void strti2_(const char *uplo, const char *diag, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void strtri_(const char *uplo, const char *diag, const armpl_int_t *n, float *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void strtrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const float *a, const armpl_int_t *lda, float *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void strttf_(const char *transr, const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *arf, armpl_int_t *info, ... );
void strttp_(const char *uplo, const armpl_int_t *n, const float *a, const armpl_int_t *lda, float *ap, armpl_int_t *info, ... );
void stzrzf_(const armpl_int_t *m, const armpl_int_t *n, float *a, const armpl_int_t *lda, float *tau, float *work, const armpl_int_t *lwork, armpl_int_t *info);
void xerbla_array_(const char *srname_array, const armpl_int_t *srname_len, const armpl_int_t *info, ... );
void zbbcsd_(const char *jobu1, const char *jobu2, const char *jobv1t, const char *jobv2t, const char *trans, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, double *theta, double *phi, armpl_doublecomplex_t *u1, const armpl_int_t *ldu1, armpl_doublecomplex_t *u2, const armpl_int_t *ldu2, armpl_doublecomplex_t *v1t, const armpl_int_t *ldv1t, armpl_doublecomplex_t *v2t, const armpl_int_t *ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void zbdsqr_(const char *uplo, const armpl_int_t *n, const armpl_int_t *ncvt, const armpl_int_t *nru, const armpl_int_t *ncc, double *d, double *e, armpl_doublecomplex_t *vt, const armpl_int_t *ldvt, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *c, const armpl_int_t *ldc, double *rwork, armpl_int_t *info, ... );
void zcgesv_(const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, armpl_doublecomplex_t *work, armpl_singlecomplex_t *swork, double *rwork, armpl_int_t *iter, armpl_int_t *info);
void zcposv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, armpl_doublecomplex_t *work, armpl_singlecomplex_t *swork, double *rwork, armpl_int_t *iter, armpl_int_t *info, ... );
void zdrscl_(const armpl_int_t *n, const double *sa, armpl_doublecomplex_t *sx, const armpl_int_t *incx);
void zgbbrd_(const char *vect, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ncc, const armpl_int_t *kl, const armpl_int_t *ku, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *d, double *e, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *pt, const armpl_int_t *ldpt, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgbcon_(const char *norm, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgbequ_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void zgbequb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void zgbrfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgbrfsx_(const char *trans, const char *equed, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgbsv_(const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info);
void zgbsvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgbsvxx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgbtf2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void zgbtrf_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void zgbtrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zgebak_(const char *job, const char *side, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const double *scale, const armpl_int_t *m, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_int_t *info, ... );
void zgebal_(const char *job, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, armpl_int_t *info, ... );
void zgebd2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tauq, armpl_doublecomplex_t *taup, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgebrd_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tauq, armpl_doublecomplex_t *taup, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgecon_(const char *norm, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgedmd_(const char *jobs, const char *jobz, const char *jobr, const char *jobf, const armpl_int_t *whtsvd, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ldx, armpl_doublecomplex_t *y, const armpl_int_t *ldy, const armpl_int_t *nrnk, const double *tol, armpl_int_t *k, armpl_doublecomplex_t *eigs, armpl_doublecomplex_t *z, const armpl_int_t *ldz, double *res, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *w, const armpl_int_t *ldw, armpl_doublecomplex_t *s, const armpl_int_t *lds, armpl_doublecomplex_t *zwork, const armpl_int_t *lzwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ...);
void zgedmdq_(const char *jobs, const char *jobz, const char *jobr, const char *jobq, const char *jobt, const char *jobf, const armpl_int_t *whtsvd, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *f, const armpl_int_t *ldf, armpl_doublecomplex_t *x, const armpl_int_t *ldx, armpl_doublecomplex_t *y, const armpl_int_t *ldy, const armpl_int_t *nrnk, const double *tol, armpl_int_t *k, armpl_doublecomplex_t *eigs, armpl_doublecomplex_t *z, const armpl_int_t *ldz, double *res, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_doublecomplex_t *s, const armpl_int_t *lds, const armpl_int_t *lzwork, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ...);
void zgeequ_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void zgeequb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void zgees_(const char *jobvs, const char *sort, ARMPL_ZGEES_SELECT select, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *sdim, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vs, const armpl_int_t *ldvs, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void zgeesx_(const char *jobvs, const char *sort, ARMPL_ZGEESX_SELECT select, const char *sense, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *sdim, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vs, const armpl_int_t *ldvs, double *rconde, double *rcondv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void zgeev_(const char *jobvl, const char *jobvr, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zgeevx_(const char *balanc, const char *jobvl, const char *jobvr, const char *sense, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zgehd2_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgehrd_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgejsv_(const char *joba, const char *jobu, const char *jobv, const char *jobr, const char *jobt, const char *jobp, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *sva, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_doublecomplex_t *cwork, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void zgelq2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgelq_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *tsize, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgelqf_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgelqt3_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void zgelqt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgels_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgelsd_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, double *s, const double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zgelss_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, double *s, const double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info);
void zgelst_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgelsy_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *jpvt, const double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info);
void zgemlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *t, const armpl_int_t *tsize, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgemlqt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zgemqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *t, const armpl_int_t *tsize, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgemqrt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *nb, const armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zgeql2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgeqlf_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgeqp3_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info);
void zgeqp3rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *kmax, const double *abstol, const double *reltol, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *k, double *maxc2nrmk, double *relmaxc2nrmk, armpl_int_t *jpiv, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zgeqr2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgeqr2p_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgeqr_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *tsize, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgeqrf_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgeqrfp_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgeqrt2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void zgeqrt3_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void zgeqrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgerfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgerfsx_(const char *trans, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgerq2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgerqf_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgesc2_(const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *rhs, const armpl_int_t *ipiv, const armpl_int_t *jpiv, double *scale);
void zgesdd_(const char *jobz, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *s, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *vt, const armpl_int_t *ldvt, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void zgesv_(const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info);
void zgesvd_(const char *jobu, const char *jobvt, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *s, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *vt, const armpl_int_t *ldvt, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zgesvdq_(const char *joba, const char *jobp, const char *jobr, const char *jobu, const char *jobv, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *s, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_int_t *numrank, armpl_int_t *iwork, armpl_int_t *liwork, armpl_doublecomplex_t *cwork, const armpl_int_t *lcwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void zgesvdx_(const char *jobu, const char *jobvt, const char *range, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *ns, double *s, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *vt, const armpl_int_t *ldvt, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void zgesvj_(const char *joba, const char *jobu, const char *jobv, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *sva, const armpl_int_t *mv, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_doublecomplex_t *cwork, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void zgesvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgesvxx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgetc2_(const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *jpiv, armpl_int_t *info);
void zgetf2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void zgetrf2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void zgetrf_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void zgetri_(const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgetrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zgetsls_(const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgetsqrhrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb1, const armpl_int_t *nb1, const armpl_int_t *nb2, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zggbak_(const char *job, const char *side, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const double *lscale, const double *rscale, const armpl_int_t *m, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_int_t *info, ... );
void zggbal_(const char *job, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *work, armpl_int_t *info, ... );
void zgges3_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_ZGGES3_SELCTG selctg, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, const armpl_int_t *ldvsl, armpl_doublecomplex_t *vsr, const armpl_int_t *ldvsr, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void zgges_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_ZGGES_DELCTG delctg, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, const armpl_int_t *ldvsl, armpl_doublecomplex_t *vsr, const armpl_int_t *ldvsr, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void zggesx_(const char *jobvsl, const char *jobvsr, const char *sort, ARMPL_ZGGESX_DELCTG delctg, const char *sense, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, const armpl_int_t *ldvsl, armpl_doublecomplex_t *vsr, const armpl_int_t *ldvsr, double *rconde, double *rcondv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void zggev3_(const char *jobvl, const char *jobvr, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zggev_(const char *jobvl, const char *jobvr, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zggevx_(const char *balanc, const char *jobvl, const char *jobvr, const char *sense, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *bwork, armpl_int_t *info, ... );
void zggglm_(const armpl_int_t *n, const armpl_int_t *m, const armpl_int_t *p, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *d, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zgghd3_(const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgghrd_(const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *info, ... );
void zgglse_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *p, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *c, armpl_doublecomplex_t *d, armpl_doublecomplex_t *x, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zggqrf_(const armpl_int_t *n, const armpl_int_t *m, const armpl_int_t *p, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *taua, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *taub, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zggrqf_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *taua, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *taub, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zggsvd3_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *p, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, double *alpha, double *beta, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void zggsvp3_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, const double *tola, const double *tolb, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_int_t *iwork, double *rwork, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgsvj0_(const char *jobv, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *d, double *sva, const armpl_int_t *mv, armpl_doublecomplex_t *v, const armpl_int_t *ldv, const double *eps, const double *sfmin, const double *tol, const armpl_int_t *nsweep, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgsvj1_(const char *jobv, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *n1, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *d, double *sva, const armpl_int_t *mv, armpl_doublecomplex_t *v, const armpl_int_t *ldv, const double *eps, const double *sfmin, const double *tol, const armpl_int_t *nsweep, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zgtcon_(const char *norm, const armpl_int_t *n, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zgtrfs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *dlf, const armpl_doublecomplex_t *df, const armpl_doublecomplex_t *duf, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgtsv_(const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info);
void zgtsvx_(const char *fact, const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, armpl_doublecomplex_t *dlf, armpl_doublecomplex_t *df, armpl_doublecomplex_t *duf, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zgttrf_(const armpl_int_t *n, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, armpl_int_t *info);
void zgttrs_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zgtts2_(const armpl_int_t *itrans, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb);
void zhb2st_kernels_(const char *uplo, const armpl_int_t *wantz, const armpl_int_t *ttype, const armpl_int_t *st, const armpl_int_t *ed, const armpl_int_t *sweep, const armpl_int_t *n, const armpl_int_t *nb, const armpl_int_t *ib, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *v, armpl_doublecomplex_t *tau, const armpl_int_t *ldvt, const armpl_doublecomplex_t *work, ... );
void zhbev_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zhbev_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zhbevd_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zhbevd_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zhbevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *q, const armpl_int_t *ldq, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void zhbevx_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *q, const armpl_int_t *ldq, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void zhbgst_(const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *bb, const armpl_int_t *ldbb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zhbgv_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *bb, const armpl_int_t *ldbb, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zhbgvd_(const char *jobz, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *bb, const armpl_int_t *ldbb, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zhbgvx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, const armpl_int_t *ka, const armpl_int_t *kb, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *bb, const armpl_int_t *ldbb, armpl_doublecomplex_t *q, const armpl_int_t *ldq, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void zhbtrd_(const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *d, double *e, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zhecon_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zhecon_3_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zhecon_rook_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zheequb_(char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *s, double *scond, double *amax, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zheev_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *w, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zheev_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *w, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zheevd_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *w, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zheevd_2stage_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *w, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zheevr_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *isuppz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zheevr_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *isuppz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zheevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void zheevx_2stage_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void zhegs2_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zhegst_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zhegv_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, double *w, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zhegv_2stage_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, double *w, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zhegvd_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, double *w, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zhegvx_(const armpl_int_t *itype, const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void zherfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zherfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *s, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zhesv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhesv_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhesv_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhesv_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhesv_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhesvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zhesvxx_(const char *fact, char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *s, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zheswapr_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *i1, const armpl_int_t *i2, ... );
void zhetd2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tau, armpl_int_t *info, ... );
void zhetf2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zhetf2_rk_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zhetf2_rook_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zhetrd_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrd_2stage_(const char *vect, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *hous2, const armpl_int_t *lhous2, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrd_hb2st_(const char *stage1, const char *vect, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *d, double *e, armpl_doublecomplex_t *hous, const armpl_int_t *lhous, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrd_he2hb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrf_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrf_aa_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrf_aa_2stage_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrf_rk_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrf_rook_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetri2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetri2x_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void zhetri_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zhetri_3_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetri_rook_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zhetri_3x_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void zhetrs2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zhetrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zhetrs_3_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zhetrs_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zhetrs_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tb, const armpl_int_t *ltb, const armpl_int_t *ipiv, const armpl_int_t *ipiv2, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zhetrs_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zhfrk_(const char *transr, const char *uplo, const char *trans, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *beta, armpl_doublecomplex_t *c, ... );
void zhgeqz_(const char *job, const char *compq, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *h, const armpl_int_t *ldh, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zhpcon_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zhpev_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zhpevd_(const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zhpevx_(const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void zhpgst_(const armpl_int_t *itype, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *bp, armpl_int_t *info, ... );
void zhpgv_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zhpgvd_(const armpl_int_t *itype, const char *jobz, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zhpgvx_(const armpl_int_t *itype, const char *jobz, const char *range, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info, ... );
void zhprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zhpsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zhpsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zhptrd_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, double *d, double *e, armpl_doublecomplex_t *tau, armpl_int_t *info, ... );
void zhptrf_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zhptri_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zhptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zhsein_(const char *side, const char *eigsrc, const char *initv, const armpl_int_t *select, const armpl_int_t *n, const armpl_doublecomplex_t *h, const armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *ifaill, armpl_int_t *ifailr, armpl_int_t *info, ... );
void zhseqr_(const char *job, const char *compz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *h, const armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zla_gbamv_(const armpl_int_t *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const double *alpha, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy);
double zla_gbrcond_c_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const double *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
double zla_gbrcond_x_(const char *trans, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_doublecomplex_t *x, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
void zla_gbrfsx_extended_(const armpl_int_t *prec_type, const armpl_int_t *trans_type, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, const armpl_int_t *ipiv, const armpl_int_t *colequ, const double *c, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info);
double zla_gbrpvgrw_(const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_int_t *ncols, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *afb, const armpl_int_t *ldafb);
void zla_geamv_(const armpl_int_t *trans, const armpl_int_t *m, const armpl_int_t *n, const double *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy);
double zla_gercond_c_(const char *trans, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
double zla_gercond_x_(const char *trans, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *x, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
void zla_gerfsx_extended_(const armpl_int_t *prec_type, const armpl_int_t *trans_type, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const double *c, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *errs_n, double *errs_c, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info);
double zla_gerpvgrw_(const armpl_int_t *n, const armpl_int_t *ncols, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf);
void zla_heamv_(const armpl_int_t *uplo, const armpl_int_t *n, const double *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy);
double zla_hercond_c_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
double zla_hercond_x_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *x, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
void zla_herfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const double *c, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
double zla_herpvgrw_(const char *uplo, const armpl_int_t *n, const armpl_int_t *info, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, double *work, ... );
void zla_lin_berr_(const armpl_int_t *n, const armpl_int_t *nz, const armpl_int_t *nrhs, const armpl_doublecomplex_t *res, const double *ayb, double *berr);
double zla_porcond_c_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const double *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
double zla_porcond_x_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_doublecomplex_t *x, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
void zla_porfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *colequ, const double *c, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
double zla_porpvgrw_(const char *uplo, const armpl_int_t *ncols, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, double *work, ... );
void zla_syamv_(const armpl_int_t *uplo, const armpl_int_t *n, const double *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const double *beta, double *y, const armpl_int_t *incy);
double zla_syrcond_c_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *c, const armpl_int_t *capply, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
double zla_syrcond_x_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *x, armpl_int_t *info, const armpl_doublecomplex_t *work, const double *rwork, ... );
void zla_syrfsx_extended_(const armpl_int_t *prec_type, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_int_t *colequ, const double *c, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *y, const armpl_int_t *ldy, double *berr_out, const armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, const double *rcond, const armpl_int_t *ithresh, const double *rthresh, const double *dz_ub, const armpl_int_t *ignore_cwise, armpl_int_t *info, ... );
double zla_syrpvgrw_(const char *uplo, const armpl_int_t *n, const armpl_int_t *info, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, double *work, ... );
void zla_wwaddw_(const armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, const armpl_doublecomplex_t *w);
void zlabrd_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tauq, armpl_doublecomplex_t *taup, armpl_doublecomplex_t *x, const armpl_int_t *ldx, armpl_doublecomplex_t *y, const armpl_int_t *ldy);
void zlacgv_(const armpl_int_t *n, armpl_doublecomplex_t *x, const armpl_int_t *incx);
void zlacn2_(const armpl_int_t *n, armpl_doublecomplex_t *v, armpl_doublecomplex_t *x, double *est, armpl_int_t *kase, armpl_int_t *isave);
void zlacon_(const armpl_int_t *n, armpl_doublecomplex_t *v, armpl_doublecomplex_t *x, double *est, armpl_int_t *kase);
void zlacp2_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, ... );
void zlacpy_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, ... );
void zlacrm_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *b, const armpl_int_t *ldb, armpl_doublecomplex_t *c, const armpl_int_t *ldc, double *rwork);
void zlacrt_(const armpl_int_t *n, armpl_doublecomplex_t *cx, const armpl_int_t *incx, armpl_doublecomplex_t *cy, const armpl_int_t *incy, const armpl_doublecomplex_t *c, const armpl_doublecomplex_t *s);
DOUBLECOMPLEX_RET_VALUE zladiv_(DOUBLECOMPLEX_RET_PARAM const armpl_doublecomplex_t *x, const armpl_doublecomplex_t *y);
void zlaed0_(const armpl_int_t *qsiz, const armpl_int_t *n, double *d, double *e, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *qstore, const armpl_int_t *ldqs, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zlaed7_(const armpl_int_t *n, const armpl_int_t *cutpnt, const armpl_int_t *qsiz, const armpl_int_t *tlvls, const armpl_int_t *curlvl, const armpl_int_t *curpbm, double *d, armpl_doublecomplex_t *q, const armpl_int_t *ldq, const double *rho, armpl_int_t *indxq, double *qstore, armpl_int_t *qptr, const armpl_int_t *prmptr, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const double *givnum, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zlaed8_(armpl_int_t *k, const armpl_int_t *n, const armpl_int_t *qsiz, armpl_doublecomplex_t *q, const armpl_int_t *ldq, double *d, double *rho, const armpl_int_t *cutpnt, const double *z, double *dlamda, armpl_doublecomplex_t *q2, const armpl_int_t *ldq2, double *w, armpl_int_t *indxp, armpl_int_t *indx, const armpl_int_t *indxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, double *givnum, armpl_int_t *info);
void zlaein_(const armpl_int_t *rightv, const armpl_int_t *noinit, const armpl_int_t *n, const armpl_doublecomplex_t *h, const armpl_int_t *ldh, const armpl_doublecomplex_t *w, armpl_doublecomplex_t *v, armpl_doublecomplex_t *b, const armpl_int_t *ldb, double *rwork, const double *eps3, const double *smlnum, armpl_int_t *info);
void zlaesy_(const armpl_doublecomplex_t *a, const armpl_doublecomplex_t *b, const armpl_doublecomplex_t *c, armpl_doublecomplex_t *rt1, armpl_doublecomplex_t *rt2, armpl_doublecomplex_t *evscal, armpl_doublecomplex_t *cs1, armpl_doublecomplex_t *sn1);
void zlaev2_(const armpl_doublecomplex_t *a, const armpl_doublecomplex_t *b, const armpl_doublecomplex_t *c, double *rt1, double *rt2, double *cs1, armpl_doublecomplex_t *sn1);
void zlag2c_(const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *sa, const armpl_int_t *ldsa, armpl_int_t *info);
void zlags2_(const armpl_int_t *upper, const double *a1, const armpl_doublecomplex_t *a2, const double *a3, const double *b1, const armpl_doublecomplex_t *b2, const double *b3, double *csu, armpl_doublecomplex_t *snu, double *csv, armpl_doublecomplex_t *snv, double *csq, armpl_doublecomplex_t *snq);
void zlagtm_(const char *trans, const armpl_int_t *n, const armpl_int_t *nrhs, const double *alpha, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *x, const armpl_int_t *ldx, const double *beta, armpl_doublecomplex_t *b, const armpl_int_t *ldb, ... );
void zlahef_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void zlahef_aa_(const char *uplo, const armpl_int_t *j1, const armpl_int_t *m, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *h, const armpl_int_t *ldh, armpl_doublecomplex_t *work, ... );
void zlahef_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void zlahef_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void zlahqr_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *h, const armpl_int_t *ldh, armpl_doublecomplex_t *w, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *info);
void zlahr2_(const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *y, const armpl_int_t *ldy);
void zlaic1_(const armpl_int_t *job, const armpl_int_t *j, const armpl_doublecomplex_t *x, const double *sest, const armpl_doublecomplex_t *w, const armpl_doublecomplex_t *gamma, double *sestpr, armpl_doublecomplex_t *s, armpl_doublecomplex_t *c);
void zlals0_(const armpl_int_t *icompq, const armpl_int_t *nl, const armpl_int_t *nr, const armpl_int_t *sqre, const armpl_int_t *nrhs, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *bx, const armpl_int_t *ldbx, const armpl_int_t *perm, const armpl_int_t *givptr, const armpl_int_t *givcol, const armpl_int_t *ldgcol, const double *givnum, const armpl_int_t *ldgnum, const double *poles, const double *difl, const double *difr, const double *z, const armpl_int_t *k, const double *c, const double *s, double *rwork, armpl_int_t *info);
void zlalsa_(const armpl_int_t *icompq, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *bx, const armpl_int_t *ldbx, const double *u, const armpl_int_t *ldu, const double *vt, const armpl_int_t *k, const double *difl, const double *difr, const double *z, const double *poles, const armpl_int_t *givptr, const armpl_int_t *givcol, const armpl_int_t *ldgcol, const armpl_int_t *perm, const double *givnum, const double *c, const double *s, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zlalsd_(const char *uplo, const armpl_int_t *smlsiz, const armpl_int_t *n, const armpl_int_t *nrhs, double *d, double *e, armpl_doublecomplex_t *b, const armpl_int_t *ldb, const double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void zlamswlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zlamtsqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *mb, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
double zlangb_(const char *norm, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *work, ... );
double zlange_(const char *norm, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *work, ... );
double zlangt_(const char *norm, const armpl_int_t *n, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, ... );
double zlanhb_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *work, ... );
double zlanhe_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *work, ... );
double zlanhf_(const char *norm, const char *transr, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, double *work, ... );
double zlanhp_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, double *work, ... );
double zlanhs_(const char *norm, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *work, ... );
double zlanht_(const char *norm, const armpl_int_t *n, const double *d, const armpl_doublecomplex_t *e, ... );
double zlansb_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *work, ... );
double zlansp_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, double *work, ... );
double zlansy_(const char *norm, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *work, ... );
double zlantb_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *work, ... );
double zlantp_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_doublecomplex_t *ap, double *work, ... );
double zlantr_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *work, ... );
void zlapll_(const armpl_int_t *n, armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *y, const armpl_int_t *incy, double *ssmin);
void zlapmr_(const armpl_int_t *forwrd, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *x, const armpl_int_t *ldx, armpl_int_t *k);
void zlapmt_(const armpl_int_t *forwrd, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *x, const armpl_int_t *ldx, armpl_int_t *k);
void zlaqgb_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *kl, const armpl_int_t *ku, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const double *r, const double *c, const double *rowcnd, const double *colcnd, const double *amax, char *equed, ... );
void zlaqge_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *r, const double *c, const double *rowcnd, const double *colcnd, const double *amax, char *equed, ... );
void zlaqhb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *s, const double *scond, const double *amax, char *equed, ... );
void zlaqhe_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *s, const double *scond, const double *amax, char *equed, ... );
void zlaqhp_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, const double *s, const double *scond, const double *amax, char *equed, ... );
void zlaqp2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *offset, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, double *vn1, double *vn2, armpl_doublecomplex_t *work);
void zlaqp2rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *ioffset, const armpl_int_t *kmax, const double *abstol, const double *reltol, const armpl_int_t *kp1, const double *maxc2nrm, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *k, double *maxc2nrmk, double *relmaxc2nrmk, armpl_int_t *jpiv, armpl_doublecomplex_t *tau, double *vn1, double *vn2, armpl_doublecomplex_t *work, armpl_int_t *info);
void zlaqp3rk_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_int_t *ioffset, const armpl_int_t *nb, const double *abstol, const double *reltol, const armpl_int_t *kp1, const double *maxc2nrm, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *done, armpl_int_t *kb, double *maxc2nrmk, double *relmaxc2nrmk, armpl_int_t *jpiv, armpl_doublecomplex_t *tau, double *vn1, double *vn2, armpl_doublecomplex_t *auxv, armpl_doublecomplex_t *f, const armpl_int_t *ldf, armpl_int_t *iwork, armpl_int_t *info);
void zlaqps_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *offset, const armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, double *vn1, double *vn2, armpl_doublecomplex_t *auxv, armpl_doublecomplex_t *f, const armpl_int_t *ldf);
void zlaqr0_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *h, const armpl_int_t *ldh, armpl_doublecomplex_t *w, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zlaqr1_(const armpl_int_t *n, const armpl_doublecomplex_t *h, const armpl_int_t *ldh, const armpl_doublecomplex_t *s1, const armpl_doublecomplex_t *s2, armpl_doublecomplex_t *v);
void zlaqr2_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nw, armpl_doublecomplex_t *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_doublecomplex_t *sh, armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_int_t *nh, armpl_doublecomplex_t *t, const armpl_int_t *ldt, const armpl_int_t *nv, armpl_doublecomplex_t *wv, const armpl_int_t *ldwv, armpl_doublecomplex_t *work, const armpl_int_t *lwork);
void zlaqr3_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nw, armpl_doublecomplex_t *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_doublecomplex_t *sh, armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_int_t *nh, armpl_doublecomplex_t *t, const armpl_int_t *ldt, const armpl_int_t *nv, armpl_doublecomplex_t *wv, const armpl_int_t *ldwv, armpl_doublecomplex_t *work, const armpl_int_t *lwork);
void zlaqr4_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *h, const armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zlaqr5_(const armpl_int_t *wantt, const armpl_int_t *wantz, const armpl_int_t *kacc22, const armpl_int_t *n, const armpl_int_t *ktop, const armpl_int_t *kbot, const armpl_int_t *nshfts, armpl_doublecomplex_t *s, armpl_doublecomplex_t *h, const armpl_int_t *ldh, const armpl_int_t *iloz, const armpl_int_t *ihiz, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_doublecomplex_t *u, const armpl_int_t *ldu, const armpl_int_t *nv, armpl_doublecomplex_t *wv, const armpl_int_t *ldwv, const armpl_int_t *nh, armpl_doublecomplex_t *wh, const armpl_int_t *ldwh);
void zlaqsb_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const double *s, const double *scond, const double *amax, char *equed, ... );
void zlaqsp_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, const double *s, const double *scond, const double *amax, char *equed, ... );
void zlaqsy_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *s, const double *scond, const double *amax, char *equed, ... );
void zlaqz0_(const char *wants, const char *wantq, const char *wantz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t rec, armpl_int_t *info, ... );
void zlaqz1_(const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *k, const armpl_int_t *istartm, const armpl_int_t *istopm, const armpl_int_t *ihi, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_int_t *nq, const armpl_int_t *qstart, armpl_doublecomplex_t *q, const armpl_int_t *ldq, const armpl_int_t *nz, const armpl_int_t *zstart, armpl_doublecomplex_t *z, const armpl_int_t *ldz);
void zlaqz2_(const armpl_int_t *ilschur, const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *nw, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *qc, const armpl_int_t *ldqc, armpl_doublecomplex_t *zc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *rec, armpl_int_t *info);
void zlaqz3_(const armpl_int_t *ilschur, const armpl_int_t *ilq, const armpl_int_t *ilz, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_int_t *nshifts, const armpl_int_t *nblock_desired, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *qc, const armpl_int_t *ldqc, armpl_doublecomplex_t *zc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zlar1v_(const armpl_int_t *n, const armpl_int_t *b1, const armpl_int_t *bn, const double *lambda, const double *d, const double *l, const double *ld, const double *lld, const double *pivmin, const double *gaptol, armpl_doublecomplex_t *z, const armpl_int_t *wantnc, armpl_int_t *negcnt, double *ztz, double *mingma, armpl_int_t *r, armpl_int_t *isuppz, double *nrminv, double *resid, double *rqcorr, double *work);
void zlar2v_(const armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, armpl_doublecomplex_t *z, const armpl_int_t *incx, const double *c, const armpl_doublecomplex_t *s, const armpl_int_t *incc);
void zlarcm_(const armpl_int_t *m, const armpl_int_t *n, const double *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *c, const armpl_int_t *ldc, double *rwork);
void zlarf_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *v, const armpl_int_t *incv, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, ... );
void zlarfb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *ldwork, ... );
void zlarfg_(const armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *tau);
void zlarfgp_(const armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *tau);
void zlarft_(const char *direct, const char *storev, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, const armpl_int_t *ldt, ... );
void zlarfx_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *v, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, ... );
void zlarfy_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *v, const armpl_int_t *incv, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, ... );
void zlargv_(const armpl_int_t *n, armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *y, const armpl_int_t *incy, double *c, const armpl_int_t *incc);
void zlarnv_(const armpl_int_t *idist, armpl_int_t *iseed, const armpl_int_t *n, armpl_doublecomplex_t *x);
void zlarrv_(const armpl_int_t *n, const double *vl, const double *vu, double *d, double *l, double *pivmin, const armpl_int_t *isplit, const armpl_int_t *m, const armpl_int_t *dol, const armpl_int_t *dou, const double *minrgp, const double *rtol1, const double *rtol2, double *w, double *werr, double *wgap, const armpl_int_t *iblock, const armpl_int_t *indexw, const double *gers, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *iwork, armpl_int_t *info);
void zlarscl2_(const armpl_int_t *m, const armpl_int_t *n, const double *d, armpl_doublecomplex_t *x, const armpl_int_t *ldx);
void zlartg_(const armpl_doublecomplex_t *f, const armpl_doublecomplex_t *g, double *cs, armpl_doublecomplex_t *sn, armpl_doublecomplex_t *r);
void zlartv_(const armpl_int_t *n, armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *y, const armpl_int_t *incy, const double *c, const armpl_doublecomplex_t *s, const armpl_int_t *incc);
void zlarz_(const char *side, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_doublecomplex_t *v, const armpl_int_t *incv, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, ... );
void zlarzb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *ldwork, ... );
void zlarzt_(const char *direct, const char *storev, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, const armpl_int_t *ldt, ... );
void zlascl2_(const armpl_int_t *m, const armpl_int_t *n, const double *d, armpl_doublecomplex_t *x, const armpl_int_t *ldx);
void zlascl_(const char *type, const armpl_int_t *kl, const armpl_int_t *ku, const double *cfrom, const double *cto, const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void zlaset_(const char *uplo, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *a, const armpl_int_t *lda, ... );
void zlasr_(const char *side, const char *pivot, const char *direct, const armpl_int_t *m, const armpl_int_t *n, const double *c, const double *s, armpl_doublecomplex_t *a, const armpl_int_t *lda, ... );
void zlassq_(const armpl_int_t *n, const armpl_doublecomplex_t *x, const armpl_int_t *incx, double *scale, double *sumsq);
void zlaswlq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zlaswp_(const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *k1, const armpl_int_t *k2, const armpl_int_t *ipiv, const armpl_int_t *incx);
void zlasyf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void zlasyf_aa_(const char *uplo, const armpl_int_t *j1, const armpl_int_t *m, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *h, const armpl_int_t *ldh, armpl_doublecomplex_t *work, ... );
void zlasyf_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void zlasyf_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *w, const armpl_int_t *ldw, armpl_int_t *info, ... );
void zlat2c_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_singlecomplex_t *sa, const armpl_int_t *ldsa, armpl_int_t *info, ... );
void zlatbs_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_int_t *kd, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *x, double *scale, double *cnorm, armpl_int_t *info, ... );
void zlatdf_(const armpl_int_t *ijob, const armpl_int_t *n, const armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *rhs, double *rdsum, double *rdscal, const armpl_int_t *ipiv, const armpl_int_t *jpiv);
void zlatps_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *x, double *scale, double *cnorm, armpl_int_t *info, ... );
void zlatrd_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, double *e, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *w, const armpl_int_t *ldw, ... );
void zlatrs_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *x, double *scale, double *cnorm, armpl_int_t *info, ... );
void zlatrs3_(const char *uplo, const char *trans, const char *diag, const char *normin, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *scale, double *cnorm, double *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void zlatrz_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work);
void zlatsqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zlauu2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void zlauum_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void zlaunhr_col_getrfnp_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *A, const armpl_int_t *lda, armpl_doublecomplex_t *D, armpl_int_t *info);
void zlaunhr_col_getrfnp2_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *A, const armpl_int_t *lda, armpl_doublecomplex_t *D, armpl_int_t *info);
void zpbcon_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zpbequ_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *s, double *scond, double *amax, armpl_int_t *info, ... );
void zpbrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zpbstf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void zpbsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zpbsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *afb, const armpl_int_t *ldafb, char *equed, double *s, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zpbtf2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void zpbtrf_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_int_t *info, ... );
void zpbtrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zpftrf_(const char *transr, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *info, ... );
void zpftri_(const char *transr, const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *info, ... );
void zpftrs_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zpocon_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zpoequ_(const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *s, double *scond, double *amax, armpl_int_t *info);
void zpoequb_(const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *s, double *scond, double *amax, armpl_int_t *info);
void zporfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zporfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const double *s, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zposv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zposvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *af, const armpl_int_t *ldaf, char *equed, double *s, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zposvxx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *af, const armpl_int_t *ldaf, char *equed, double *s, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zpotf2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void zpotrf2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void zpotrf_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void zpotri_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void zpotrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zppcon_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, const double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zppequ_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, double *s, double *scond, double *amax, armpl_int_t *info, ... );
void zpprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zppsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zppsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, char *equed, double *s, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zpptrf_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *info, ... );
void zpptri_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *info, ... );
void zpptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zpstf2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, const double *tol, double *work, armpl_int_t *info, ... );
void zpstrf_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, const double *tol, double *work, armpl_int_t *info, ... );
void zptcon_(const armpl_int_t *n, const double *d, const armpl_doublecomplex_t *e, const double *anorm, double *rcond, double *rwork, armpl_int_t *info);
void zpteqr_(const char *compz, const armpl_int_t *n, double *d, double *e, armpl_doublecomplex_t *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void zptrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *d, const armpl_doublecomplex_t *e, const double *df, const armpl_doublecomplex_t *ef, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zptsv_(const armpl_int_t *n, const armpl_int_t *nrhs, double *d, armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info);
void zptsvx_(const char *fact, const armpl_int_t *n, const armpl_int_t *nrhs, const double *d, const armpl_doublecomplex_t *e, double *df, armpl_doublecomplex_t *ef, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zpttrf_(const armpl_int_t *n, double *d, armpl_doublecomplex_t *e, armpl_int_t *info);
void zpttrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *d, const armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zptts2_(const armpl_int_t *iuplo, const armpl_int_t *n, const armpl_int_t *nrhs, const double *d, const armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, const armpl_int_t *ldb);
void zrot_(const armpl_int_t *n, armpl_doublecomplex_t *cx, const armpl_int_t *incx, armpl_doublecomplex_t *cy, const armpl_int_t *incy, const double *c, const armpl_doublecomplex_t *s);
void zrscl_(const armpl_int_t *n, const armpl_doublecomplex_t *a, armpl_doublecomplex_t *x, const armpl_int_t *incx);
void zspcon_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zspmv_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy, ... );
void zspr_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *ap, ... );
void zsprfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zspsv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zspsvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zsptrf_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zsptri_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zsptrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zstedc_(const char *compz, const armpl_int_t *n, double *d, double *e, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zstegr_(const char *jobz, const char *range, const armpl_int_t *n, double *d, double *e, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, const double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *isuppz, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zstein_(const armpl_int_t *n, const double *d, const double *e, const armpl_int_t *m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, armpl_doublecomplex_t *z, const armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info);
void zstemr_(const char *jobz, const char *range, const armpl_int_t *n, double *d, double *e, const double *vl, const double *vu, const armpl_int_t *il, const armpl_int_t *iu, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, const armpl_int_t *ldz, const armpl_int_t *nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, double *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info, ... );
void zsteqr_(const char *compz, const armpl_int_t *n, double *d, double *e, armpl_doublecomplex_t *z, const armpl_int_t *ldz, double *work, armpl_int_t *info, ... );
void zsycon_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zsycon_3_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, const double *anorm, double *rcond, const armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zsycon_rook_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, const double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zsyconv_(const char *uplo, const char *way, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *e, armpl_int_t *info, ... );
void zsyconvf_(const char *uplo, const char *way, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zsyconvf_rook_(const char *uplo, const char *way, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_int_t *info, ... );
void zsyequb_(char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *s, double *scond, double *amax, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zsymv_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *x, const armpl_int_t *incx, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, const armpl_int_t *incy, ... );
void zsyr_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *x, const armpl_int_t *incx, armpl_doublecomplex_t *a, const armpl_int_t *lda, ... );
void zsyrfs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zsyrfsx_(const char *uplo, const char *equed, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *af, const armpl_int_t *ldaf, const armpl_int_t *ipiv, const double *s, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zsysv_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsysv_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsysv_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsysv_rk_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsysv_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsysvx_(const char *fact, const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, armpl_int_t *info, ... );
void zsysvxx_(const char *fact, char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *af, const armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *s, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, const armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, const armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void zsyswapr_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *i1, const armpl_int_t *i2, ... );
void zsytf2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zsytf2_rk_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zsytf2_rook_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info, ... );
void zsytrf_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsytrf_aa_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsytrf_aa_2stage_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tb, const armpl_int_t *ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsytrf_rk_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsytrf_rook_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsytri2_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsytri2x_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void zsytri_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zsytri_3_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsytri_3x_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, const armpl_int_t *nb, armpl_int_t *info, ... );
void zsytri_rook_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zsytrs2_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zsytrs_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zsytrs_3_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zsytrs_aa_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zsytrs_aa_2stage_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tb, const armpl_int_t *ltb, const armpl_int_t *ipiv, const armpl_int_t *ipiv2, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void zsytrs_rook_(const char *uplo, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ztbcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void ztbrfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void ztbtrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *kd, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ab, const armpl_int_t *ldab, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ztfsm_(const char *transr, const char *side, const char *uplo, const char *trans, const char *diag, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, const armpl_int_t *ldb, ... );
void ztftri_(const char *transr, const char *uplo, const char *diag, const armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *info, ... );
void ztfttp_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *arf, armpl_doublecomplex_t *ap, armpl_int_t *info, ... );
void ztfttr_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *arf, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void ztgevc_(const char *side, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const armpl_doublecomplex_t *s, const armpl_int_t *lds, const armpl_doublecomplex_t *p, const armpl_int_t *ldp, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void ztgex2_(const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, const armpl_int_t *j1, armpl_int_t *info);
void ztgexc_(const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, const armpl_int_t *ifst, armpl_int_t *ilst, armpl_int_t *info);
void ztgsen_(const armpl_int_t *ijob, const armpl_int_t *wantq, const armpl_int_t *wantz, const armpl_int_t *select, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *z, const armpl_int_t *ldz, armpl_int_t *m, double *pl, double *pr, double *dif, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *iwork, const armpl_int_t *liwork, armpl_int_t *info);
void ztgsja_(const char *jobu, const char *jobv, const char *jobq, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, const double *tola, const double *tolb, double *alpha, double *beta, armpl_doublecomplex_t *u, const armpl_int_t *ldu, armpl_doublecomplex_t *v, const armpl_int_t *ldv, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *work, armpl_int_t *ncycle, armpl_int_t *info, ... );
void ztgsna_(const char *job, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, const armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, double *s, double *dif, const armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void ztgsy2_(const char *trans, const armpl_int_t *ijob, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *c, const armpl_int_t *ldc, const armpl_doublecomplex_t *d, const armpl_int_t *ldd, const armpl_doublecomplex_t *e, const armpl_int_t *lde, armpl_doublecomplex_t *f, const armpl_int_t *ldf, double *scale, double *rdsum, double *rdscal, armpl_int_t *info, ... );
void ztgsyl_(const char *trans, const armpl_int_t *ijob, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *c, const armpl_int_t *ldc, const armpl_doublecomplex_t *d, const armpl_int_t *ldd, const armpl_doublecomplex_t *e, const armpl_int_t *lde, armpl_doublecomplex_t *f, const armpl_int_t *ldf, double *scale, double *dif, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void ztpcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_doublecomplex_t *ap, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void ztplqt2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void ztplqt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_int_t *mb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, armpl_int_t *info);
void ztpmlqt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_int_t *mb, const armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void ztpmqrt_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_int_t *nb, const armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void ztpqrt2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_int_t *info);
void ztpqrt_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *l, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, armpl_int_t *info);
void ztprfb_(const char *side, const char *trans, const char *direct, const char *storev, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_doublecomplex_t *v, const armpl_int_t *ldv, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *work, const armpl_int_t *ldwork, ... );
void ztprfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void ztptri_(const char *uplo, const char *diag, const armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *info, ... );
void ztptrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ztpttf_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *arf, armpl_int_t *info, ... );
void ztpttr_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void ztrcon_(const char *norm, const char *uplo, const char *diag, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void ztrevc3_(const char *side, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *info, ... );
void ztrevc_(const char *side, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, const armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void ztrexc_(const char *compq, const armpl_int_t *n, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *q, const armpl_int_t *ldq, const armpl_int_t *ifst, const armpl_int_t *ilst, armpl_int_t *info, ... );
void ztrrfs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, const armpl_doublecomplex_t *x, const armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info, ... );
void ztrsen_(const char *job, const char *compq, const armpl_int_t *select, const armpl_int_t *n, armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *w, armpl_int_t *m, double *s, double *sep, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void ztrsna_(const char *job, const char *howmny, const armpl_int_t *select, const armpl_int_t *n, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, const armpl_doublecomplex_t *vl, const armpl_int_t *ldvl, const armpl_doublecomplex_t *vr, const armpl_int_t *ldvr, double *s, double *sep, const armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, const armpl_int_t *ldwork, double *rwork, armpl_int_t *info, ... );
void ztrsyl_(const char *trana, const char *tranb, const armpl_int_t *isgn, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *c, const armpl_int_t *ldc, double *scale, armpl_int_t *info, ... );
void ztrsyl3_(const char *trana, const char *tranb, const armpl_int_t *isgn, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_doublecomplex_t *c, const armpl_int_t *ldc, double *scale, double *swork, const armpl_int_t *ldswork, armpl_int_t *info, ... );
void ztrti2_(const char *uplo, const char *diag, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void ztrtri_(const char *uplo, const char *diag, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_int_t *info, ... );
void ztrtrs_(const char *uplo, const char *trans, const char *diag, const armpl_int_t *n, const armpl_int_t *nrhs, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *b, const armpl_int_t *ldb, armpl_int_t *info, ... );
void ztrttf_(const char *transr, const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *arf, armpl_int_t *info, ... );
void ztrttp_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *ap, armpl_int_t *info, ... );
void ztzrzf_(const armpl_int_t *m, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zunbdb1_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_doublecomplex_t *x11, const armpl_int_t *ldx11, armpl_doublecomplex_t *x21, const armpl_int_t *ldx21, double *theta, double *phi, armpl_doublecomplex_t *taup1, armpl_doublecomplex_t *taup2, armpl_doublecomplex_t *tauq1, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zunbdb2_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_doublecomplex_t *x11, const armpl_int_t *ldx11, armpl_doublecomplex_t *x21, const armpl_int_t *ldx21, double *theta, double *phi, armpl_doublecomplex_t *taup1, armpl_doublecomplex_t *taup2, armpl_doublecomplex_t *tauq1, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zunbdb3_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_doublecomplex_t *x11, const armpl_int_t *ldx11, armpl_doublecomplex_t *x21, const armpl_int_t *ldx21, double *theta, double *phi, armpl_doublecomplex_t *taup1, armpl_doublecomplex_t *taup2, armpl_doublecomplex_t *tauq1, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zunbdb4_(const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_doublecomplex_t *x11, const armpl_int_t *ldx11, armpl_doublecomplex_t *x21, const armpl_int_t *ldx21, double *theta, double *phi, armpl_doublecomplex_t *taup1, armpl_doublecomplex_t *taup2, armpl_doublecomplex_t *tauq1, armpl_doublecomplex_t *phantom, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zunbdb5_(const armpl_int_t *m1, const armpl_int_t *m2, const armpl_int_t *n, armpl_doublecomplex_t *x1, const armpl_int_t *incx1, armpl_doublecomplex_t *x2, const armpl_int_t *incx2, armpl_doublecomplex_t *q1, const armpl_int_t *ldq1, armpl_doublecomplex_t *q2, const armpl_int_t *ldq2, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zunbdb6_(const armpl_int_t *m1, const armpl_int_t *m2, const armpl_int_t *n, armpl_doublecomplex_t *x1, const armpl_int_t *incx1, armpl_doublecomplex_t *x2, const armpl_int_t *incx2, armpl_doublecomplex_t *q1, const armpl_int_t *ldq1, armpl_doublecomplex_t *q2, const armpl_int_t *ldq2, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zunbdb_(const char *trans, const char *signs, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_doublecomplex_t *x11, const armpl_int_t *ldx11, armpl_doublecomplex_t *x12, const armpl_int_t *ldx12, armpl_doublecomplex_t *x21, const armpl_int_t *ldx21, armpl_doublecomplex_t *x22, const armpl_int_t *ldx22, double *theta, double *phi, armpl_doublecomplex_t *taup1, armpl_doublecomplex_t *taup2, armpl_doublecomplex_t *tauq1, armpl_doublecomplex_t *tauq2, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zuncsd2by1_(const char *jobu1, const char *jobu2, const char *jobv1t, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_doublecomplex_t *x11, const armpl_int_t *ldx11, armpl_doublecomplex_t *x21, const armpl_int_t *ldx21, double *theta, armpl_doublecomplex_t *u1, const armpl_int_t *ldu1, armpl_doublecomplex_t *u2, const armpl_int_t *ldu2, armpl_doublecomplex_t *v1t, const armpl_int_t *ldv1t, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void zuncsd_(const char *jobu1, const char *jobu2, const char *jobv1t, const char *jobv2t, const char *trans, const char *signs, const armpl_int_t *m, const armpl_int_t *p, const armpl_int_t *q, armpl_doublecomplex_t *x11, const armpl_int_t *ldx11, armpl_doublecomplex_t *x12, const armpl_int_t *ldx12, armpl_doublecomplex_t *x21, const armpl_int_t *ldx21, armpl_doublecomplex_t *x22, const armpl_int_t *ldx22, double *theta, armpl_doublecomplex_t *u1, const armpl_int_t *ldu1, armpl_doublecomplex_t *u2, const armpl_int_t *ldu2, armpl_doublecomplex_t *v1t, const armpl_int_t *ldv1t, armpl_doublecomplex_t *v2t, const armpl_int_t *ldv2t, armpl_doublecomplex_t *work, const armpl_int_t *lwork, double *rwork, const armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *info, ... );
void zung2l_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zung2r_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zungbr_(const char *vect, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunghr_(const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zungl2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zunglq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zungql_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zungqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zungr2_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zungrq_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zungtr_(const char *uplo, const armpl_int_t *n, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zungtsqr_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zungtsqr_row_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *mb, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info);
void zunhr_col_(const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *nb, armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *t, const armpl_int_t *ldt, armpl_doublecomplex_t *d, armpl_int_t *info);
void zunm22_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *n1, const armpl_int_t *n2, const armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunm2l_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zunm2r_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zunmbr_(const char *vect, const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunmhr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *ilo, const armpl_int_t *ihi, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunml2_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zunmlq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunmql_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunmqr_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunmr2_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zunmr3_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zunmrq_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunmrz_(const char *side, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_int_t *l, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zunmtr_(const char *side, const char *uplo, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *a, const armpl_int_t *lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, const armpl_int_t *lwork, armpl_int_t *info, ... );
void zupgtr_(const char *uplo, const armpl_int_t *n, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *q, const armpl_int_t *ldq, armpl_doublecomplex_t *work, armpl_int_t *info, ... );
void zupmtr_(const char *side, const char *uplo, const char *trans, const armpl_int_t *m, const armpl_int_t *n, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, const armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info, ... );

/* ARMPL version information */
void armplversion_(armpl_int_t *major, armpl_int_t *minor, armpl_int_t *patch, char *tag);
void armplinfo_(void);

/* ------------------------------------------------------------------ */

/* CBLAS interfaces */
typedef enum CBLAS_LAYOUT {CblasRowMajor=101, CblasColMajor=102} CBLAS_LAYOUT;
typedef enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113} CBLAS_TRANSPOSE;
typedef enum CBLAS_UPLO {CblasUpper=121, CblasLower=122} CBLAS_UPLO;
typedef enum CBLAS_DIAG {CblasNonUnit=131, CblasUnit=132} CBLAS_DIAG;
typedef enum CBLAS_SIDE {CblasLeft=141, CblasRight=142} CBLAS_SIDE;
typedef CBLAS_LAYOUT CBLAS_ORDER; /* Maintain backwards compatibility with CBLAS_ORDER */
typedef armpl_int_t CBLAS_INT; /* Note that Arm PL supports 64-bit integers in CBLAS for int64/ilp64 library builds */
typedef armpl_int_t CBLAS_INDEX; /* Note that CBLAS_INDEX is not size_t in Arm PL */
void cblas_caxpby(armpl_int_t N, const void *alpha, const void *X, armpl_int_t incX, const void *beta, void *Y, armpl_int_t incY);
void cblas_caxpy(const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY);
void cblas_ccopy(const armpl_int_t N, const void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY);
void cblas_cdotc_sub(const armpl_int_t N, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *dotc);
void cblas_cdotu_sub(const armpl_int_t N, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *dotu);
void cblas_cgbmv(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const armpl_int_t M, const armpl_int_t N, const armpl_int_t KL, const armpl_int_t KU, const void *alpha, const void *A, const armpl_int_t lda, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_cgemm(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t M, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_cgemm3m(CBLAS_LAYOUT layout, CBLAS_TRANSPOSE TransA, CBLAS_TRANSPOSE TransB, armpl_int_t M, armpl_int_t N, armpl_int_t K, const void *alpha, const void *A, armpl_int_t lda, const void *B, armpl_int_t ldb, const void *beta, void *C, armpl_int_t ldc);
void cblas_cgemm_batch(CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE *transA, const CBLAS_TRANSPOSE *transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const void *alpha, const void *const *A, const armpl_int_t *lda, const void *const *B, const armpl_int_t *ldb, const void *beta, void *const *C, const armpl_int_t *ldc, armpl_int_t group_count, const armpl_int_t *group_size);
void cblas_cgemmt(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_cgemv(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_cgerbc(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, const void *beta, void *A, const armpl_int_t lda);
void cblas_cgerbu(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, const void *beta, void *A, const armpl_int_t lda);
void cblas_cgerc(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *A, const armpl_int_t lda);
void cblas_cgeru(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *A, const armpl_int_t lda);
void cblas_chbmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_chemm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_chemv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_cher(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const float alpha, const void *X, const armpl_int_t incX, void *A, const armpl_int_t lda);
void cblas_cher2(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *A, const armpl_int_t lda);
void cblas_cher2k(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const float beta, void *C, const armpl_int_t ldc);
void cblas_cherk(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const float alpha, const void *A, const armpl_int_t lda, const float beta, void *C, const armpl_int_t ldc);
void cblas_chpmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const void *alpha, const void *Ap, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_chpr(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const float alpha, const void *X, const armpl_int_t incX, void *A);
void cblas_chpr2(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *Ap);
void cblas_crot(const armpl_int_t N, void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY, const float c, const void *s);
void cblas_crotg(void *a, void *b, float *c, void *s);
void cblas_cscal(const armpl_int_t N, const void *alpha, void *X, const armpl_int_t incX);
void cblas_csrot(const armpl_int_t N, void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY, const float c, const float s);
void cblas_csscal(const armpl_int_t N, const float alpha, void *X, const armpl_int_t incX);
void cblas_cswap(const armpl_int_t N, void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY);
void cblas_csymm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_csyr2k(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_csyrk(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *beta, void *C, const armpl_int_t ldc);
void cblas_ctbmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const armpl_int_t K, const void *A, const armpl_int_t lda, void *X, const armpl_int_t incX);
void cblas_ctbsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const armpl_int_t K, const void *A, const armpl_int_t lda, void *X, const armpl_int_t incX);
void cblas_ctpmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const void *Ap, void *X, const armpl_int_t incX);
void cblas_ctpsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const void *Ap, void *X, const armpl_int_t incX);
void cblas_ctrmm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, void *B, const armpl_int_t ldb);
void cblas_ctrmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const void *A, const armpl_int_t lda, void *X, const armpl_int_t incX);
void cblas_ctrsm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, void *B, const armpl_int_t ldb);
void cblas_ctrsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const void *A, const armpl_int_t lda, void *X, const armpl_int_t incX);
void cblas_cwaxpby(armpl_int_t N, const void *alpha, const void *X, armpl_int_t incx, const void *beta, const void *Y, armpl_int_t incy, void *W, armpl_int_t incw);
double cblas_dasum(const armpl_int_t N, const double *X, const armpl_int_t incX);
void cblas_daxpby(armpl_int_t N, double alpha, const double *X, armpl_int_t incX, double beta, double *Y, armpl_int_t incY);
void cblas_daxpy(const armpl_int_t N, const double alpha, const double *X, const armpl_int_t incX, double *Y, const armpl_int_t incY);
double cblas_dcabs1(const void  *Z);
void cblas_dcopy(const armpl_int_t N, const double *X, const armpl_int_t incX, double *Y, const armpl_int_t incY);
double cblas_ddot(const armpl_int_t N, const double *X, const armpl_int_t incX, const double *Y, const armpl_int_t incY);
void cblas_dgbmv(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const armpl_int_t M, const armpl_int_t N, const armpl_int_t KL, const armpl_int_t KU, const double alpha, const double *A, const armpl_int_t lda, const double *X, const armpl_int_t incX, const double beta, double *Y, const armpl_int_t incY);
void cblas_dgemm(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t M, const armpl_int_t N, const armpl_int_t K, const double alpha, const double *A, const armpl_int_t lda, const double *B, const armpl_int_t ldb, const double beta, double *C, const armpl_int_t ldc);
void cblas_dgemm_batch(CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE *transA, const CBLAS_TRANSPOSE *transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double *const *A, const armpl_int_t *lda, const double *const *B, const armpl_int_t *ldb, const double *beta, double *const *C, const armpl_int_t *ldc, armpl_int_t group_count, const armpl_int_t *group_size);
void cblas_dgemmt(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t N, const armpl_int_t K, const double alpha, const double *A, const armpl_int_t lda, const double *B, const armpl_int_t ldb, const double beta, double *C, const armpl_int_t ldc);
void cblas_dgemv(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const armpl_int_t M, const armpl_int_t N, const double alpha, const double *A, const armpl_int_t lda, const double *X, const armpl_int_t incX, const double beta, double *Y, const armpl_int_t incY);
void cblas_dger(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const double alpha, const double *X, const armpl_int_t incX, const double *Y, const armpl_int_t incY, double *A, const armpl_int_t lda);
void cblas_dgerb(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const double alpha, const double *X, const armpl_int_t incX, const double *Y, const armpl_int_t incY, const double beta, double *A, const armpl_int_t lda);
double cblas_dnrm2(const armpl_int_t N, const double *X, const armpl_int_t incX);
void cblas_drot(const armpl_int_t N, double *X, const armpl_int_t incX, double *Y, const armpl_int_t incY, const double c, const double s);
void cblas_drotg(double *a, double *b, double *c, double *s);
void cblas_drotm(const armpl_int_t N, double *X, const armpl_int_t incX, double *Y, const armpl_int_t incY, const double *P);
void cblas_drotmg(double *d1, double *d2, double *b1, const double b2, double *P);
void cblas_dsbmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const armpl_int_t K, const double alpha, const double *A, const armpl_int_t lda, const double *X, const armpl_int_t incX, const double beta, double *Y, const armpl_int_t incY);
void cblas_dscal(const armpl_int_t N, const double alpha, double *X, const armpl_int_t incX);
double cblas_dsdot(const armpl_int_t N, const float *X, const armpl_int_t incX, const float *Y, const armpl_int_t incY);
void cblas_dspmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const double alpha, const double *Ap, const double *X, const armpl_int_t incX, const double beta, double *Y, const armpl_int_t incY);
void cblas_dspr(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const double alpha, const double *X, const armpl_int_t incX, double *Ap);
void cblas_dspr2(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const double alpha, const double *X, const armpl_int_t incX, const double *Y, const armpl_int_t incY, double *A);
void cblas_dswap(const armpl_int_t N, double *X, const armpl_int_t incX, double *Y, const armpl_int_t incY);
void cblas_dsymm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const armpl_int_t M, const armpl_int_t N, const double alpha, const double *A, const armpl_int_t lda, const double *B, const armpl_int_t ldb, const double beta, double *C, const armpl_int_t ldc);
void cblas_dsymv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const double alpha, const double *A, const armpl_int_t lda, const double *X, const armpl_int_t incX, const double beta, double *Y, const armpl_int_t incY);
void cblas_dsyr(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const double alpha, const double *X, const armpl_int_t incX, double *A, const armpl_int_t lda);
void cblas_dsyr2(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const double alpha, const double *X, const armpl_int_t incX, const double *Y, const armpl_int_t incY, double *A, const armpl_int_t lda);
void cblas_dsyr2k(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const double alpha, const double *A, const armpl_int_t lda, const double *B, const armpl_int_t ldb, const double beta, double *C, const armpl_int_t ldc);
void cblas_dsyrk(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const double alpha, const double *A, const armpl_int_t lda, const double beta, double *C, const armpl_int_t ldc);
void cblas_dtbmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const armpl_int_t K, const double *A, const armpl_int_t lda, double *X, const armpl_int_t incX);
void cblas_dtbsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const armpl_int_t K, const double *A, const armpl_int_t lda, double *X, const armpl_int_t incX);
void cblas_dtpmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const double *Ap, double *X, const armpl_int_t incX);
void cblas_dtpsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const double *Ap, double *X, const armpl_int_t incX);
void cblas_dtrmm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t M, const armpl_int_t N, const double alpha, const double *A, const armpl_int_t lda, double *B, const armpl_int_t ldb);
void cblas_dtrmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const double *A, const armpl_int_t lda, double *X, const armpl_int_t incX);
void cblas_dtrsm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t M, const armpl_int_t N, const double alpha, const double *A, const armpl_int_t lda, double *B, const armpl_int_t ldb);
void cblas_dtrsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const double *A, const armpl_int_t lda, double *X, const armpl_int_t incX);
void cblas_dwaxpby(armpl_int_t N, double alpha, const double *X, armpl_int_t incx, double beta, const double *Y, armpl_int_t incy, double *W, armpl_int_t incw);
double cblas_dzasum(const armpl_int_t N, const void *X, const armpl_int_t incX);
double cblas_dznrm2(const armpl_int_t N, const void *X, const armpl_int_t incX);
#ifndef  __NVCOMPILER
#if !defined(_MSC_VER) || defined(__clang__)
void cblas_hgemm(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t M, const armpl_int_t N, const armpl_int_t K, const __fp16 alpha, const __fp16  *A, const armpl_int_t lda, const __fp16  *B, const armpl_int_t ldb, const __fp16 beta, __fp16  *C, const armpl_int_t ldc);
#endif
#endif
armpl_int_t cblas_icamax(const armpl_int_t N, const void *X, const armpl_int_t incX);
armpl_int_t cblas_idamax(const armpl_int_t N, const double *X, const armpl_int_t incX);
armpl_int_t cblas_isamax(const armpl_int_t N, const float *X, const armpl_int_t incX);
armpl_int_t cblas_izamax(const armpl_int_t N, const void *X, const armpl_int_t incX);
armpl_int_t cblas_icamin(const armpl_int_t N, const void *X, const armpl_int_t incX);
armpl_int_t cblas_idamin(const armpl_int_t N, const double *X, const armpl_int_t incX);
armpl_int_t cblas_isamin(const armpl_int_t N, const float *X, const armpl_int_t incX);
armpl_int_t cblas_izamin(const armpl_int_t N, const void *X, const armpl_int_t incX);
float cblas_sasum(const armpl_int_t N, const float *X, const armpl_int_t incX);
void cblas_saxpby(armpl_int_t N, float alpha, const float *X, armpl_int_t incX, float beta, float *Y, armpl_int_t incY);
void cblas_saxpy(const armpl_int_t N, const float alpha, const float *X, const armpl_int_t incX, float *Y, const armpl_int_t incY);
float cblas_scabs1(const void  *C);
float cblas_scasum(const armpl_int_t N, const void *X, const armpl_int_t incX);
float cblas_scnrm2(const armpl_int_t N, const void *X, const armpl_int_t incX);
void cblas_scopy(const armpl_int_t N, const float *X, const armpl_int_t incX, float *Y, const armpl_int_t incY);
float cblas_sdot(const armpl_int_t N, const float *X, const armpl_int_t incX, const float *Y, const armpl_int_t incY);
float cblas_sdsdot(const armpl_int_t N, const float alpha, const float *X, const armpl_int_t incX, const float *Y, const armpl_int_t incY);
void cblas_sgbmv(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const armpl_int_t M, const armpl_int_t N, const armpl_int_t KL, const armpl_int_t KU, const float alpha, const float *A, const armpl_int_t lda, const float *X, const armpl_int_t incX, const float beta, float *Y, const armpl_int_t incY);
void cblas_sgemm(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t M, const armpl_int_t N, const armpl_int_t K, const float alpha, const float *A, const armpl_int_t lda, const float *B, const armpl_int_t ldb, const float beta, float *C, const armpl_int_t ldc);
void cblas_sgemm_batch(CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE *transA, const CBLAS_TRANSPOSE *transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float *const *A, const armpl_int_t *lda, const float *const *B, const armpl_int_t *ldb, const float *beta, float *const *C, const armpl_int_t *ldc, armpl_int_t group_count, const armpl_int_t *group_size);
void cblas_sgemmt(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t N, const armpl_int_t K, const float alpha, const float *A, const armpl_int_t lda, const float *B, const armpl_int_t ldb, const float beta, float *C, const armpl_int_t ldc);
void cblas_sgemv(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const armpl_int_t M, const armpl_int_t N, const float alpha, const float *A, const armpl_int_t lda, const float *X, const armpl_int_t incX, const float beta, float *Y, const armpl_int_t incY);
void cblas_sger(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const float alpha, const float *X, const armpl_int_t incX, const float *Y, const armpl_int_t incY, float *A, const armpl_int_t lda);
void cblas_sgerb(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const float alpha, const float *X, const armpl_int_t incX, const float *Y, const armpl_int_t incY, const float beta, float *A, const armpl_int_t lda);
float cblas_snrm2(const armpl_int_t N, const float *X, const armpl_int_t incX);
void cblas_srot(const armpl_int_t N, float *X, const armpl_int_t incX, float *Y, const armpl_int_t incY, const float c, const float s);
void cblas_srotg(float *a, float *b, float *c, float *s);
void cblas_srotm(const armpl_int_t N, float *X, const armpl_int_t incX, float *Y, const armpl_int_t incY, const float *P);
void cblas_srotmg(float *d1, float *d2, float *b1, const float b2, float *P);
void cblas_ssbmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const armpl_int_t K, const float alpha, const float *A, const armpl_int_t lda, const float *X, const armpl_int_t incX, const float beta, float *Y, const armpl_int_t incY);
void cblas_sscal(const armpl_int_t N, const float alpha, float *X, const armpl_int_t incX);
void cblas_sspmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const float alpha, const float *Ap, const float *X, const armpl_int_t incX, const float beta, float *Y, const armpl_int_t incY);
void cblas_sspr(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const float alpha, const float *X, const armpl_int_t incX, float *Ap);
void cblas_sspr2(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const float alpha, const float *X, const armpl_int_t incX, const float *Y, const armpl_int_t incY, float *A);
void cblas_sswap(const armpl_int_t N, float *X, const armpl_int_t incX, float *Y, const armpl_int_t incY);
void cblas_ssymm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const armpl_int_t M, const armpl_int_t N, const float alpha, const float *A, const armpl_int_t lda, const float *B, const armpl_int_t ldb, const float beta, float *C, const armpl_int_t ldc);
void cblas_ssymv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const float alpha, const float *A, const armpl_int_t lda, const float *X, const armpl_int_t incX, const float beta, float *Y, const armpl_int_t incY);
void cblas_ssyr(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const float alpha, const float *X, const armpl_int_t incX, float *A, const armpl_int_t lda);
void cblas_ssyr2(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const float alpha, const float *X, const armpl_int_t incX, const float *Y, const armpl_int_t incY, float *A, const armpl_int_t lda);
void cblas_ssyr2k(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const float alpha, const float *A, const armpl_int_t lda, const float *B, const armpl_int_t ldb, const float beta, float *C, const armpl_int_t ldc);
void cblas_ssyrk(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const float alpha, const float *A, const armpl_int_t lda, const float beta, float *C, const armpl_int_t ldc);
void cblas_stbmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const armpl_int_t K, const float *A, const armpl_int_t lda, float *X, const armpl_int_t incX);
void cblas_stbsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const armpl_int_t K, const float *A, const armpl_int_t lda, float *X, const armpl_int_t incX);
void cblas_stpmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const float *Ap, float *X, const armpl_int_t incX);
void cblas_stpsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const float *Ap, float *X, const armpl_int_t incX);
void cblas_strmm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t M, const armpl_int_t N, const float alpha, const float *A, const armpl_int_t lda, float *B, const armpl_int_t ldb);
void cblas_strmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const float *A, const armpl_int_t lda, float *X, const armpl_int_t incX);
void cblas_strsm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t M, const armpl_int_t N, const float alpha, const float *A, const armpl_int_t lda, float *B, const armpl_int_t ldb);
void cblas_strsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const float *A, const armpl_int_t lda, float *X, const armpl_int_t incX);
void cblas_swaxpby(armpl_int_t N, float alpha, const float *X, armpl_int_t incx, float beta, const float *Y, armpl_int_t incy, float *W, armpl_int_t incw);
void cblas_zaxpby(armpl_int_t N, const void *alpha, const void *X, armpl_int_t incX, const void *beta, void *Y, armpl_int_t incY);
void cblas_zaxpy(const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY);
void cblas_zcopy(const armpl_int_t N, const void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY);
void cblas_zdotc_sub(const armpl_int_t N, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *dotc);
void cblas_zdotu_sub(const armpl_int_t N, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *dotu);
void cblas_zdrot(const armpl_int_t N, void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY, const double c, const double s);
void cblas_zdscal(const armpl_int_t N, const double alpha, void *X, const armpl_int_t incX);
void cblas_zgbmv(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const armpl_int_t M, const armpl_int_t N, const armpl_int_t KL, const armpl_int_t KU, const void *alpha, const void *A, const armpl_int_t lda, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_zgemm(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t M, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_zgemm3m(CBLAS_LAYOUT layout, CBLAS_TRANSPOSE TransA, CBLAS_TRANSPOSE TransB, armpl_int_t M, armpl_int_t N, armpl_int_t K, const void *alpha, const void *A, armpl_int_t lda, const void *B, armpl_int_t ldb, const void *beta, void *C, armpl_int_t ldc);
void cblas_zgemm_batch(CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE *transA, const CBLAS_TRANSPOSE *transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const void *alpha, const void *const *A, const armpl_int_t *lda, const void *const *B, const armpl_int_t *ldb, const void *beta, void *const *C, const armpl_int_t *ldc, armpl_int_t group_count, const armpl_int_t *group_size);
void cblas_zgemmt(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_zgemv(const CBLAS_LAYOUT layout, const CBLAS_TRANSPOSE TransA, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_zgerbc(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, const void *beta, void *A, const armpl_int_t lda);
void cblas_zgerbu(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, const void *beta, void *A, const armpl_int_t lda);
void cblas_zgerc(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *A, const armpl_int_t lda);
void cblas_zgeru(const CBLAS_LAYOUT layout, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *A, const armpl_int_t lda);
void cblas_zhbmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_zhemm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_zhemv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_zher(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const double alpha, const void *X, const armpl_int_t incX, void *A, const armpl_int_t lda);
void cblas_zher2(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *A, const armpl_int_t lda);
void cblas_zher2k(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const double beta, void *C, const armpl_int_t ldc);
void cblas_zherk(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const double alpha, const void *A, const armpl_int_t lda, const double beta, void *C, const armpl_int_t ldc);
void cblas_zhpmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const void *alpha, const void *Ap, const void *X, const armpl_int_t incX, const void *beta, void *Y, const armpl_int_t incY);
void cblas_zhpr(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const double alpha, const void *X, const armpl_int_t incX, void *A);
void cblas_zhpr2(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const armpl_int_t N, const void *alpha, const void *X, const armpl_int_t incX, const void *Y, const armpl_int_t incY, void *Ap);
void cblas_zrot(const armpl_int_t N, void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY, const double c, const void *s);
void cblas_zrotg(void *a, void *b, double *c, void *s);
void cblas_zscal(const armpl_int_t N, const void *alpha, void *X, const armpl_int_t incX);
void cblas_zswap(const armpl_int_t N, void *X, const armpl_int_t incX, void *Y, const armpl_int_t incY);
void cblas_zsymm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_zsyr2k(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *B, const armpl_int_t ldb, const void *beta, void *C, const armpl_int_t ldc);
void cblas_zsyrk(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE Trans, const armpl_int_t N, const armpl_int_t K, const void *alpha, const void *A, const armpl_int_t lda, const void *beta, void *C, const armpl_int_t ldc);
void cblas_ztbmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const armpl_int_t K, const void *A, const armpl_int_t lda, void *X, const armpl_int_t incX);
void cblas_ztbsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const armpl_int_t K, const void *A, const armpl_int_t lda, void *X, const armpl_int_t incX);
void cblas_ztpmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const void *Ap, void *X, const armpl_int_t incX);
void cblas_ztpsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const void *Ap, void *X, const armpl_int_t incX);
void cblas_ztrmm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, void *B, const armpl_int_t ldb);
void cblas_ztrmv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const void *A, const armpl_int_t lda, void *X, const armpl_int_t incX);
void cblas_ztrsm(const CBLAS_LAYOUT layout, const CBLAS_SIDE Side, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t M, const armpl_int_t N, const void *alpha, const void *A, const armpl_int_t lda, void *B, const armpl_int_t ldb);
void cblas_ztrsv(const CBLAS_LAYOUT layout, const CBLAS_UPLO Uplo, const CBLAS_TRANSPOSE TransA, const CBLAS_DIAG Diag, const armpl_int_t N, const void *A, const armpl_int_t lda, void *X, const armpl_int_t incX);
void cblas_zwaxpby(armpl_int_t N, const void *alpha, const void *X, armpl_int_t incx, const void *beta, const void *Y, armpl_int_t incy, void *W, armpl_int_t incw);

/* lapacke (C interfaces to LAPACK) */
/* lapacke functions typically return the value of info
   via the function name instead of through the argument list */

/* Values for the matrix_order argument to lapacke functions */
#define LAPACK_ROW_MAJOR               101
#define LAPACK_COL_MAJOR               102

/* lapacke function return values signifying memory problems */
#define LAPACK_WORK_MEMORY_ERROR       -1010
#define LAPACK_TRANSPOSE_MEMORY_ERROR  -1011

/* Callback logical functions of one, two, or three arguments are used
*  to select eigenvalues to sort to the top left of the Schur form.
*  The value is selected if function returns TRUE (non-zero). */

typedef armpl_int_t (*LAPACK_S_SELECT2) (const float *, const float *);
typedef armpl_int_t (*LAPACK_S_SELECT3) (const float *, const float *, const float *);
typedef armpl_int_t (*LAPACK_D_SELECT2) (const double *, const double *);
typedef armpl_int_t (*LAPACK_D_SELECT3) (const double *, const double *, const double *);
typedef armpl_int_t (*LAPACK_C_SELECT1) (const lapack_complex_float *);
typedef armpl_int_t (*LAPACK_C_SELECT2) (const lapack_complex_float *, const lapack_complex_float *);
typedef armpl_int_t (*LAPACK_Z_SELECT1) (const lapack_complex_double *);
typedef armpl_int_t (*LAPACK_Z_SELECT2) (const lapack_complex_double *, const lapack_complex_double *);

/* C-LAPACK function prototypes */

armpl_int_t LAPACKE_cbbcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *theta, float *phi, lapack_complex_float *u1, armpl_int_t ldu1, lapack_complex_float *u2, armpl_int_t ldu2, lapack_complex_float *v1t, armpl_int_t ldv1t, lapack_complex_float *v2t, armpl_int_t ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e);
armpl_int_t LAPACKE_cbbcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *theta, float *phi, lapack_complex_float *u1, armpl_int_t ldu1, lapack_complex_float *u2, armpl_int_t ldu2, lapack_complex_float *v1t, armpl_int_t ldv1t, lapack_complex_float *v2t, armpl_int_t ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_cbdsqr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, float *d, float *e, lapack_complex_float *vt, armpl_int_t ldvt, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cbdsqr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, float *d, float *e, lapack_complex_float *vt, armpl_int_t ldvt, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_cgbbrd(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, lapack_complex_float *ab, armpl_int_t ldab, float *d, float *e, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *pt, armpl_int_t ldpt, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cgbbrd_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, lapack_complex_float *ab, armpl_int_t ldab, float *d, float *e, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *pt, armpl_int_t ldpt, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgbcon(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_cgbcon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float anorm, float *rcond, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgbequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgbequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgbequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgbequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgbrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cgbrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgbrfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cgbrfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgbsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgbsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgbsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *rpivot);
armpl_int_t LAPACKE_cgbsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgbsvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cgbsvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgbtrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, lapack_complex_float *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgbtrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, lapack_complex_float *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgbtrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgbtrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgebak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *scale, armpl_int_t m, lapack_complex_float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_cgebak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *scale, armpl_int_t m, lapack_complex_float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_cgebal(armpl_int_t matrix_layout, char job, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale);
armpl_int_t LAPACKE_cgebal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale);
armpl_int_t LAPACKE_cgebrd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *d, float *e, lapack_complex_float *tauq, lapack_complex_float *taup);
armpl_int_t LAPACKE_cgebrd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *d, float *e, lapack_complex_float *tauq, lapack_complex_float *taup, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgecon(armpl_int_t matrix_layout, char norm, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float anorm, float *rcond);
armpl_int_t LAPACKE_cgecon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float anorm, float *rcond, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgedmd(armpl_int_t matrix_layout, char jobs, char jobz, char jobr, char jobf, armpl_int_t whtsvd, armpl_int_t m, armpl_int_t n, lapack_complex_float* x, armpl_int_t ldx, lapack_complex_float* y, armpl_int_t ldy, armpl_int_t nrnk, float* tol, armpl_int_t k, lapack_complex_float* eigs, lapack_complex_float* z, armpl_int_t ldz, float* res, lapack_complex_float* b, armpl_int_t ldb, lapack_complex_float* w, armpl_int_t ldw, lapack_complex_float* s, armpl_int_t lds);
armpl_int_t LAPACKE_cgedmd_work(armpl_int_t matrix_layout, char jobs, char jobz,char jobr, char jobf, armpl_int_t whtsvd, armpl_int_t m,armpl_int_t n, lapack_complex_float* x, armpl_int_t ldx,lapack_complex_float* y, armpl_int_t ldy, armpl_int_t nrnk,float* tol, armpl_int_t k, lapack_complex_float* eigs,lapack_complex_float* z, armpl_int_t ldz,float* res, lapack_complex_float* b,armpl_int_t ldb, lapack_complex_float* w,armpl_int_t ldw, lapack_complex_float* s, armpl_int_t lds,lapack_complex_float* zwork, armpl_int_t lzwork,float* work, armpl_int_t lwork,armpl_int_t* iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cgedmdq(armpl_int_t matrix_layout, char jobs, char jobz, char jobr,char jobq, char jobt, char jobf, armpl_int_t whtsvd,armpl_int_t m, armpl_int_t n, lapack_complex_float* f,armpl_int_t ldf, lapack_complex_float* x,armpl_int_t ldx, lapack_complex_float* y,armpl_int_t ldy, armpl_int_t nrnk, float* tol,armpl_int_t k, lapack_complex_float* eigs,lapack_complex_float* z, armpl_int_t ldz,float* res, lapack_complex_float* b,armpl_int_t ldb, lapack_complex_float* v,armpl_int_t ldv, lapack_complex_float* s, armpl_int_t lds);
armpl_int_t LAPACKE_cgedmdq_work(armpl_int_t matrix_layout, char jobs, char jobz,char jobr, char jobq, char jobt, char jobf,armpl_int_t whtsvd, armpl_int_t m, armpl_int_t n,lapack_complex_float* f, armpl_int_t ldf,lapack_complex_float* x, armpl_int_t ldx,lapack_complex_float* y, armpl_int_t ldy,armpl_int_t nrnk, float* tol, armpl_int_t k,lapack_complex_float* eigs,lapack_complex_float* z,armpl_int_t ldz, float* res,lapack_complex_float* b,armpl_int_t ldb, lapack_complex_float* v,armpl_int_t ldv, lapack_complex_float* s,armpl_int_t lds, lapack_complex_float *zwork,armpl_int_t lzwork, float* work,armpl_int_t lwork, armpl_int_t* iwork,armpl_int_t liwork);
armpl_int_t LAPACKE_cgeequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgeequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgeequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgeequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgees(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_C_SELECT1 select, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *sdim, lapack_complex_float *w, lapack_complex_float *vs, armpl_int_t ldvs);
armpl_int_t LAPACKE_cgees_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_C_SELECT1 select, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *sdim, lapack_complex_float *w, lapack_complex_float *vs, armpl_int_t ldvs, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cgeesx(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_C_SELECT1 select, char sense, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *sdim, lapack_complex_float *w, lapack_complex_float *vs, armpl_int_t ldvs, float *rconde, float *rcondv);
armpl_int_t LAPACKE_cgeesx_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_C_SELECT1 select, char sense, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *sdim, lapack_complex_float *w, lapack_complex_float *vs, armpl_int_t ldvs, float *rconde, float *rcondv, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cgeev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *w, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_cgeev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *w, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgeevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *w, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv);
armpl_int_t LAPACKE_cgeevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *w, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgehrd(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgehrd_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgejsv(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *sva, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, float *stat, armpl_int_t *istat);
armpl_int_t LAPACKE_cgejsv_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *sva, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, lapack_complex_float *cwork, armpl_int_t lwork, float *work, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cgelq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t tsize);
armpl_int_t LAPACKE_cgelq2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgelq2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work);
armpl_int_t LAPACKE_cgelq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t tsize, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgelqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgelqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgels(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgels_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgelsd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_cgelsd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cgelss(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_cgelss_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgelsy(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *jpvt, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_cgelsy_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *jpvt, float rcond, armpl_int_t *rank, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgemlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *t, armpl_int_t tsize, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cgemlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *t, armpl_int_t tsize, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgemqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *t, armpl_int_t tsize, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cgemqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *t, armpl_int_t tsize, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgemqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cgemqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work);
armpl_int_t LAPACKE_cgeqlf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgeqlf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgeqp3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *jpvt, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgeqp3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *jpvt, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgeqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t tsize);
armpl_int_t LAPACKE_cgeqr2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgeqr2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work);
armpl_int_t LAPACKE_cgeqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t tsize, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgeqrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgeqrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgeqrfp(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgeqrfp_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgeqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *work);
armpl_int_t LAPACKE_cgerfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cgerfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgerfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cgerfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgerqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_cgerqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgesdd(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *s, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *vt, armpl_int_t ldvt);
armpl_int_t LAPACKE_cgesdd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *s, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *vt, armpl_int_t ldvt, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgesvd(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *s, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *vt, armpl_int_t ldvt, float *superb);
armpl_int_t LAPACKE_cgesvd_work(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *s, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *vt, armpl_int_t ldvt, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgesvdq(armpl_int_t matrix_layout, char joba, char jobp, char jobr, char jobu, char jobv, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *s, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, armpl_int_t *numrank);
armpl_int_t LAPACKE_cgesvdq_work(armpl_int_t matrix_layout, char joba, char jobp, char jobr, char jobu, char jobv, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *s, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, armpl_int_t *numrank, armpl_int_t *iwork, armpl_int_t liwork, lapack_complex_float *cwork, armpl_int_t lcwork, float *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_cgesvdx(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *vt, armpl_int_t ldvt, armpl_int_t *superb);
armpl_int_t LAPACKE_cgesvdx_work(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *vt, armpl_int_t ldvt, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cgesvj(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *sva, armpl_int_t mv, lapack_complex_float *v, armpl_int_t ldv, float *stat);
armpl_int_t LAPACKE_cgesvj_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *sva, armpl_int_t mv, lapack_complex_float *v, armpl_int_t ldv, lapack_complex_float *cwork, armpl_int_t lwork, float *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_cgesvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *rpivot);
armpl_int_t LAPACKE_cgesvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgesvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cgesvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgetf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetrf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetrf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetri(armpl_int_t matrix_layout, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetri_work(armpl_int_t matrix_layout, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgetrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgetrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgetsls(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgetsls_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgetsqrhrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb1, armpl_int_t nb1, armpl_int_t nb2, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgetsqrhrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb1, armpl_int_t nb1, armpl_int_t nb2, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggbak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *lscale, const float *rscale, armpl_int_t m, lapack_complex_float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_cggbak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *lscale, const float *rscale, armpl_int_t m, lapack_complex_float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_cggbal(armpl_int_t matrix_layout, char job, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale);
armpl_int_t LAPACKE_cggbal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *work);
armpl_int_t LAPACKE_cgges(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vsl, armpl_int_t ldvsl, lapack_complex_float *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_cgges3(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vsl, armpl_int_t ldvsl, lapack_complex_float *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_cgges3_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vsl, armpl_int_t ldvsl, lapack_complex_float *vsr, armpl_int_t ldvsr, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cgges_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vsl, armpl_int_t ldvsl, lapack_complex_float *vsr, armpl_int_t ldvsr, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cggesx(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, char sense, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vsl, armpl_int_t ldvsl, lapack_complex_float *vsr, armpl_int_t ldvsr, float *rconde, float *rcondv);
armpl_int_t LAPACKE_cggesx_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, char sense, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vsl, armpl_int_t ldvsl, lapack_complex_float *vsr, armpl_int_t ldvsr, float *rconde, float *rcondv, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cggev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_cggev3(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_cggev3_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cggev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cggevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv);
armpl_int_t LAPACKE_cggevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cggglm(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *d, lapack_complex_float *x, lapack_complex_float *y);
armpl_int_t LAPACKE_cggglm_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *d, lapack_complex_float *x, lapack_complex_float *y, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgghd3(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cgghd3_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgghrd(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cgghrd_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cgglse(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *c, lapack_complex_float *d, lapack_complex_float *x);
armpl_int_t LAPACKE_cgglse_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *c, lapack_complex_float *d, lapack_complex_float *x, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggqrf(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *taua, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *taub);
armpl_int_t LAPACKE_cggqrf_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *taua, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *taub, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggrqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *taua, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *taub);
armpl_int_t LAPACKE_cggrqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *taua, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *taub, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggsvd3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *alpha, float *beta, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, lapack_complex_float *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_cggsvd3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *alpha, float *beta, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cggsvp3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, lapack_complex_float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_cggsvp3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, lapack_complex_float *q, armpl_int_t ldq, armpl_int_t *iwork, float *rwork, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgtcon(char norm, armpl_int_t n, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du, const lapack_complex_float *du2, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_cgtcon_work(char norm, armpl_int_t n, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du, const lapack_complex_float *du2, const armpl_int_t *ipiv, float anorm, float *rcond, lapack_complex_float *work);
armpl_int_t LAPACKE_cgtrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du, const lapack_complex_float *dlf, const lapack_complex_float *df, const lapack_complex_float *duf, const lapack_complex_float *du2, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cgtrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du, const lapack_complex_float *dlf, const lapack_complex_float *df, const lapack_complex_float *duf, const lapack_complex_float *du2, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgtsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *dl, lapack_complex_float *d, lapack_complex_float *du, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgtsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *dl, lapack_complex_float *d, lapack_complex_float *du, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgtsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du, lapack_complex_float *dlf, lapack_complex_float *df, lapack_complex_float *duf, lapack_complex_float *du2, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cgtsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du, lapack_complex_float *dlf, lapack_complex_float *df, lapack_complex_float *duf, lapack_complex_float *du2, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cgttrf(armpl_int_t n, lapack_complex_float *dl, lapack_complex_float *d, lapack_complex_float *du, lapack_complex_float *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgttrf_work(armpl_int_t n, lapack_complex_float *dl, lapack_complex_float *d, lapack_complex_float *du, lapack_complex_float *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgttrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du, const lapack_complex_float *du2, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgttrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du, const lapack_complex_float *du2, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chbev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chbev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_chbevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chbevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chbevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbgst(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *bb, armpl_int_t ldbb, lapack_complex_float *x, armpl_int_t ldx);
armpl_int_t LAPACKE_chbgst_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *bb, armpl_int_t ldbb, lapack_complex_float *x, armpl_int_t ldx, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_chbgv(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *bb, armpl_int_t ldbb, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbgv_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *bb, armpl_int_t ldbb, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_chbgvd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *bb, armpl_int_t ldbb, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbgvd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *bb, armpl_int_t ldbb, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chbgvx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *bb, armpl_int_t ldbb, lapack_complex_float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbgvx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *bb, armpl_int_t ldbb, lapack_complex_float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbtrd(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *d, float *e, lapack_complex_float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_chbtrd_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab, float *d, float *e, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *work);
armpl_int_t LAPACKE_checon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_checon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_checon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, float anorm, float *rcond, lapack_complex_float *work);
armpl_int_t LAPACKE_checon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond, lapack_complex_float *work);
armpl_int_t LAPACKE_cheequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cheequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *s, float *scond, float *amax, lapack_complex_float *work);
armpl_int_t LAPACKE_cheev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_cheev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_cheev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *w, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cheev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *w, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cheevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_cheevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_cheevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *w, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cheevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *w, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cheevr(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_cheevr_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_cheevr_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *isuppz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cheevr_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *isuppz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cheevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_cheevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_cheevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_cheevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chegst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chegst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chegv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_chegv_2stage(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_chegv_2stage_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *w, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chegv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *w, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chegvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_chegvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float *w, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chegvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chegvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_cherfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cherfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cherfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cherfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_chesv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chesv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chesv_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chesv_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chesv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chesv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *e, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chesv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *e, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chesv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chesvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_chesvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chesvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_chesvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cheswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_cheswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_chetrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *d, float *e, lapack_complex_float *tau);
armpl_int_t LAPACKE_chetrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, float *d, float *e, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetrf_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2);
armpl_int_t LAPACKE_chetrf_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *e, armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_chetri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t nb);
armpl_int_t LAPACKE_chetri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *work);
armpl_int_t LAPACKE_chetrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work);
armpl_int_t LAPACKE_chetrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chfrk(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, float alpha, const lapack_complex_float *a, armpl_int_t lda, float beta, lapack_complex_float *c);
armpl_int_t LAPACKE_chfrk_work(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, float alpha, const lapack_complex_float *a, armpl_int_t lda, float beta, lapack_complex_float *c);
armpl_int_t LAPACKE_chgeqz(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *h, armpl_int_t ldh, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chgeqz_work(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *h, armpl_int_t ldh, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chpcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_chpcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, const armpl_int_t *ipiv, float anorm, float *rcond, lapack_complex_float *work);
armpl_int_t LAPACKE_chpev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *ap, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chpev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *ap, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_chpevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *ap, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chpevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_float *ap, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chpevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *ap, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chpevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *ap, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chpgst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, lapack_complex_float *ap, const lapack_complex_float *bp);
armpl_int_t LAPACKE_chpgst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, lapack_complex_float *ap, const lapack_complex_float *bp);
armpl_int_t LAPACKE_chpgv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *ap, lapack_complex_float *bp, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chpgv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *ap, lapack_complex_float *bp, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_chpgvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *ap, lapack_complex_float *bp, float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chpgvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_float *ap, lapack_complex_float *bp, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chpgvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *ap, lapack_complex_float *bp, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chpgvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_float *ap, lapack_complex_float *bp, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const lapack_complex_float *afp, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_chprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const lapack_complex_float *afp, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_chpsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *ap, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chpsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *ap, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chpsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, lapack_complex_float *afp, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_chpsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, lapack_complex_float *afp, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_chptrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, float *d, float *e, lapack_complex_float *tau);
armpl_int_t LAPACKE_chptrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, float *d, float *e, lapack_complex_float *tau);
armpl_int_t LAPACKE_chptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_chptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, const armpl_int_t *ipiv, lapack_complex_float *work);
armpl_int_t LAPACKE_chptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chsein(armpl_int_t matrix_layout, char job, char eigsrc, char initv, const armpl_int_t *select, armpl_int_t n, const lapack_complex_float *h, armpl_int_t ldh, lapack_complex_float *w, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_chsein_work(armpl_int_t matrix_layout, char job, char eigsrc, char initv, const armpl_int_t *select, armpl_int_t n, const lapack_complex_float *h, armpl_int_t ldh, lapack_complex_float *w, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, lapack_complex_float *work, float *rwork, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_chseqr(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *h, armpl_int_t ldh, lapack_complex_float *w, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chseqr_work(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *h, armpl_int_t ldh, lapack_complex_float *w, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_clacgv(armpl_int_t n, lapack_complex_float *x, armpl_int_t incx);
armpl_int_t LAPACKE_clacgv_work(armpl_int_t n, lapack_complex_float *x, armpl_int_t incx);
armpl_int_t LAPACKE_clacn2(armpl_int_t n, lapack_complex_float *v, lapack_complex_float *x, float *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_clacn2_work(armpl_int_t n, lapack_complex_float *v, lapack_complex_float *x, float *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_clacp2(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_clacp2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_clacpy(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_clacpy_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_clacrm(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_clacrm_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, lapack_complex_float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_clag2z(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *sa, armpl_int_t ldsa, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_clag2z_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *sa, armpl_int_t ldsa, lapack_complex_double *a, armpl_int_t lda);
float LAPACKE_clangb(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float* ab, armpl_int_t ldab);
float LAPACKE_clangb_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float* ab, armpl_int_t ldab, float* work);
float LAPACKE_clange(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
float LAPACKE_clange_work(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *work);
float LAPACKE_clanhe(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
float LAPACKE_clanhe_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *work);
float LAPACKE_clansy(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
float LAPACKE_clansy_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *work);
float LAPACKE_clantr(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
float LAPACKE_clantr_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *work);
armpl_int_t LAPACKE_clapmr(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, lapack_complex_float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_clapmr_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, lapack_complex_float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_clapmt(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, lapack_complex_float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_clapmt_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, lapack_complex_float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_clarcm(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_clarcm_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_clarfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_clarfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_clarfg(armpl_int_t n, lapack_complex_float *alpha, lapack_complex_float *x, armpl_int_t incx, lapack_complex_float *tau);
armpl_int_t LAPACKE_clarfg_work(armpl_int_t n, lapack_complex_float *alpha, lapack_complex_float *x, armpl_int_t incx, lapack_complex_float *tau);
armpl_int_t LAPACKE_clarft(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *tau, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_clarft_work(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *tau, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_clarfx(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const lapack_complex_float *v, lapack_complex_float tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work);
armpl_int_t LAPACKE_clarfx_work(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const lapack_complex_float *v, lapack_complex_float tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work);
armpl_int_t LAPACKE_clarnv(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, lapack_complex_float *x);
armpl_int_t LAPACKE_clarnv_work(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, lapack_complex_float *x);
armpl_int_t LAPACKE_clascl(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, float cfrom, float cto, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_clascl_work(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, float cfrom, float cto, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_claset(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, lapack_complex_float alpha, lapack_complex_float beta, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_claset_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, lapack_complex_float alpha, lapack_complex_float beta, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_classq(armpl_int_t n, lapack_complex_float *x, armpl_int_t incx, float *scale, float *sumsq);
armpl_int_t LAPACKE_classq_work(armpl_int_t n, lapack_complex_float *x, armpl_int_t incx, float *scale, float *sumsq);
armpl_int_t LAPACKE_claswp(armpl_int_t matrix_layout, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_claswp_work(armpl_int_t matrix_layout, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_clauum(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_clauum_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpbcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *ab, armpl_int_t ldab, float anorm, float *rcond);
armpl_int_t LAPACKE_cpbcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *ab, armpl_int_t ldab, float anorm, float *rcond, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cpbequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *ab, armpl_int_t ldab, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpbequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *ab, armpl_int_t ldab, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpbrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *afb, armpl_int_t ldafb, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cpbrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *afb, armpl_int_t ldafb, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cpbstf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, lapack_complex_float *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_cpbstf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, lapack_complex_float *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_cpbsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpbsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpbsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *afb, armpl_int_t ldafb, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cpbsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *afb, armpl_int_t ldafb, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cpbtrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_cpbtrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_float *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_cpbtrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpbtrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpftrf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, lapack_complex_float *a);
armpl_int_t LAPACKE_cpftrf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, lapack_complex_float *a);
armpl_int_t LAPACKE_cpftri(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, lapack_complex_float *a);
armpl_int_t LAPACKE_cpftri_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, lapack_complex_float *a);
armpl_int_t LAPACKE_cpftrs(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpftrs_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpocon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float anorm, float *rcond);
armpl_int_t LAPACKE_cpocon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float anorm, float *rcond, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cpoequ(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpoequ_work(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpoequb(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpoequb_work(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cporfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cporfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cporfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const float *s, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cporfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const float *s, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cposvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cposvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cposvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cposvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cpotrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotrf2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotrf2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpotrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cppcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, float anorm, float *rcond);
armpl_int_t LAPACKE_cppcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, float anorm, float *rcond, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cppequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cppequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const lapack_complex_float *afp, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cpprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const lapack_complex_float *afp, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cppsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *ap, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cppsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *ap, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cppsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *ap, lapack_complex_float *afp, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cppsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *ap, lapack_complex_float *afp, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cpptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap);
armpl_int_t LAPACKE_cpptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap);
armpl_int_t LAPACKE_cpptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap);
armpl_int_t LAPACKE_cpptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap);
armpl_int_t LAPACKE_cpptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpstrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, float tol);
armpl_int_t LAPACKE_cpstrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, float tol, float *work);
armpl_int_t LAPACKE_cptcon(armpl_int_t n, const float *d, const lapack_complex_float *e, float anorm, float *rcond);
armpl_int_t LAPACKE_cptcon_work(armpl_int_t n, const float *d, const lapack_complex_float *e, float anorm, float *rcond, float *work);
armpl_int_t LAPACKE_cpteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cpteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, lapack_complex_float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_cptrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *d, const lapack_complex_float *e, const float *df, const lapack_complex_float *ef, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cptrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *d, const lapack_complex_float *e, const float *df, const lapack_complex_float *ef, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cptsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *d, lapack_complex_float *e, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cptsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *d, lapack_complex_float *e, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cptsvx(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const float *d, const lapack_complex_float *e, float *df, lapack_complex_float *ef, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cptsvx_work(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const float *d, const lapack_complex_float *e, float *df, lapack_complex_float *ef, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cpttrf(armpl_int_t n, float *d, lapack_complex_float *e);
armpl_int_t LAPACKE_cpttrf_work(armpl_int_t n, float *d, lapack_complex_float *e);
armpl_int_t LAPACKE_cpttrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *d, const lapack_complex_float *e, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpttrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *d, const lapack_complex_float *e, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cspcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_cspcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, const armpl_int_t *ipiv, float anorm, float *rcond, lapack_complex_float *work);
armpl_int_t LAPACKE_csprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const lapack_complex_float *afp, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_csprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const lapack_complex_float *afp, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_cspsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *ap, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cspsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *ap, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cspsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, lapack_complex_float *afp, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cspsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, lapack_complex_float *afp, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_csptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_csptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *ap, const armpl_int_t *ipiv, lapack_complex_float *work);
armpl_int_t LAPACKE_csptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cstedc(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cstedc_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, lapack_complex_float *z, armpl_int_t ldz, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cstegr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_cstegr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cstein(armpl_int_t matrix_layout, armpl_int_t n, const float *d, const float *e, armpl_int_t m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *ifailv);
armpl_int_t LAPACKE_cstein_work(armpl_int_t matrix_layout, armpl_int_t n, const float *d, const float *e, armpl_int_t m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, lapack_complex_float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifailv);
armpl_int_t LAPACKE_cstemr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac);
armpl_int_t LAPACKE_cstemr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, float *w, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_csteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, lapack_complex_float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_csteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, lapack_complex_float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_csycon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_csycon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_csycon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, float anorm, float *rcond, lapack_complex_float *work);
armpl_int_t LAPACKE_csycon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond, lapack_complex_float *work);
armpl_int_t LAPACKE_csyconv(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *e);
armpl_int_t LAPACKE_csyconv_work(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *e);
armpl_int_t LAPACKE_csyequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_csyequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *s, float *scond, float *amax, lapack_complex_float *work);
armpl_int_t LAPACKE_csyr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float alpha, const lapack_complex_float *x, armpl_int_t incx, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_csyr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float alpha, const lapack_complex_float *x, armpl_int_t incx, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_csyrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_csyrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_csyrfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_csyrfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_csysv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *e, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *e, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysv_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_csysvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, lapack_complex_float *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_csysvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_csysvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_csyswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_csyswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_csytrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytrf_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2);
armpl_int_t LAPACKE_csytrf_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *e, armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_csytri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t nb);
armpl_int_t LAPACKE_csytri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *work);
armpl_int_t LAPACKE_csytrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work);
armpl_int_t LAPACKE_csytrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *e, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctbcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *ab, armpl_int_t ldab, float *rcond);
armpl_int_t LAPACKE_ctbcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *ab, armpl_int_t ldab, float *rcond, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_ctbrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *b, armpl_int_t ldb, const lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ctbrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, const lapack_complex_float *b, armpl_int_t ldb, const lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_ctbtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctbtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_float *ab, armpl_int_t ldab, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctfsm(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, lapack_complex_float alpha, const lapack_complex_float *a, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctfsm_work(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, lapack_complex_float alpha, const lapack_complex_float *a, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctftri(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, lapack_complex_float *a);
armpl_int_t LAPACKE_ctftri_work(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, lapack_complex_float *a);
armpl_int_t LAPACKE_ctfttp(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *arf, lapack_complex_float *ap);
armpl_int_t LAPACKE_ctfttp_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *arf, lapack_complex_float *ap);
armpl_int_t LAPACKE_ctfttr(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *arf, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctfttr_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *arf, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctgevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_float *s, armpl_int_t lds, const lapack_complex_float *p, armpl_int_t ldp, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ctgevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_float *s, armpl_int_t lds, const lapack_complex_float *p, armpl_int_t ldp, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_ctgexc(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ctgexc_work(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ctgsen(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *m, float *pl, float *pr, float *dif);
armpl_int_t LAPACKE_ctgsen_work(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *alpha, lapack_complex_float *beta, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *z, armpl_int_t ldz, armpl_int_t *m, float *pl, float *pr, float *dif, lapack_complex_float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ctgsja(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float tola, float tolb, float *alpha, float *beta, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, lapack_complex_float *q, armpl_int_t ldq, armpl_int_t *ncycle);
armpl_int_t LAPACKE_ctgsja_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, float tola, float tolb, float *alpha, float *beta, lapack_complex_float *u, armpl_int_t ldu, lapack_complex_float *v, armpl_int_t ldv, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *work, armpl_int_t *ncycle);
armpl_int_t LAPACKE_ctgsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, const lapack_complex_float *vl, armpl_int_t ldvl, const lapack_complex_float *vr, armpl_int_t ldvr, float *s, float *dif, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ctgsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, const lapack_complex_float *vl, armpl_int_t ldvl, const lapack_complex_float *vr, armpl_int_t ldvr, float *s, float *dif, armpl_int_t mm, armpl_int_t *m, lapack_complex_float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ctgsyl(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *c, armpl_int_t ldc, const lapack_complex_float *d, armpl_int_t ldd, const lapack_complex_float *e, armpl_int_t lde, lapack_complex_float *f, armpl_int_t ldf, float *scale, float *dif);
armpl_int_t LAPACKE_ctgsyl_work(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *c, armpl_int_t ldc, const lapack_complex_float *d, armpl_int_t ldd, const lapack_complex_float *e, armpl_int_t lde, lapack_complex_float *f, armpl_int_t ldf, float *scale, float *dif, lapack_complex_float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ctpcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const lapack_complex_float *ap, float *rcond);
armpl_int_t LAPACKE_ctpcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const lapack_complex_float *ap, float *rcond, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_ctpmqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctpmqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work);
armpl_int_t LAPACKE_ctpqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ctpqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ctpqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ctpqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *work);
armpl_int_t LAPACKE_ctprfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctprfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const lapack_complex_float *v, armpl_int_t ldv, const lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_ctprfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const lapack_complex_float *b, armpl_int_t ldb, const lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ctprfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, const lapack_complex_float *b, armpl_int_t ldb, const lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_ctptri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, lapack_complex_float *ap);
armpl_int_t LAPACKE_ctptri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, lapack_complex_float *ap);
armpl_int_t LAPACKE_ctptrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctptrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *ap, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctpttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *ap, lapack_complex_float *arf);
armpl_int_t LAPACKE_ctpttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *ap, lapack_complex_float *arf);
armpl_int_t LAPACKE_ctpttr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctpttr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctrcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *rcond);
armpl_int_t LAPACKE_ctrcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, float *rcond, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_ctrevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ctrevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *vl, armpl_int_t ldvl, lapack_complex_float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_ctrexc(armpl_int_t matrix_layout, char compq, armpl_int_t n, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *q, armpl_int_t ldq, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ctrexc_work(armpl_int_t matrix_layout, char compq, armpl_int_t n, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *q, armpl_int_t ldq, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ctrrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, const lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ctrrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, const lapack_complex_float *x, armpl_int_t ldx, float *ferr, float *berr, lapack_complex_float *work, float *rwork);
armpl_int_t LAPACKE_ctrsen(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *w, armpl_int_t *m, float *s, float *sep);
armpl_int_t LAPACKE_ctrsen_work(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, lapack_complex_float *t, armpl_int_t ldt, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *w, armpl_int_t *m, float *s, float *sep, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ctrsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_float *t, armpl_int_t ldt, const lapack_complex_float *vl, armpl_int_t ldvl, const lapack_complex_float *vr, armpl_int_t ldvr, float *s, float *sep, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ctrsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_float *t, armpl_int_t ldt, const lapack_complex_float *vl, armpl_int_t ldvl, const lapack_complex_float *vr, armpl_int_t ldvr, float *s, float *sep, armpl_int_t mm, armpl_int_t *m, lapack_complex_float *work, armpl_int_t ldwork, float *rwork);
armpl_int_t LAPACKE_ctrsyl(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *c, armpl_int_t ldc, float *scale);
armpl_int_t LAPACKE_ctrsyl_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *b, armpl_int_t ldb, lapack_complex_float *c, armpl_int_t ldc, float *scale);
armpl_int_t LAPACKE_ctrsyl3(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const lapack_complex_float* a, armpl_int_t lda, const lapack_complex_float* b, armpl_int_t ldb, lapack_complex_float* c, armpl_int_t ldc, double* scale);
armpl_int_t LAPACKE_ctrsyl3_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const lapack_complex_float* a, armpl_int_t lda, const lapack_complex_float* b, armpl_int_t ldb, lapack_complex_float* c, armpl_int_t ldc, float* scale, float* swork, armpl_int_t ldswork);
armpl_int_t LAPACKE_ctrtri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctrtri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctrtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctrtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctrttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *arf);
armpl_int_t LAPACKE_ctrttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *arf);
armpl_int_t LAPACKE_ctrttp(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *ap);
armpl_int_t LAPACKE_ctrttp_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *ap);
armpl_int_t LAPACKE_ctzrzf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau);
armpl_int_t LAPACKE_ctzrzf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunbdb(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_float *x11, armpl_int_t ldx11, lapack_complex_float *x12, armpl_int_t ldx12, lapack_complex_float *x21, armpl_int_t ldx21, lapack_complex_float *x22, armpl_int_t ldx22, float *theta, float *phi, lapack_complex_float *taup1, lapack_complex_float *taup2, lapack_complex_float *tauq1, lapack_complex_float *tauq2);
armpl_int_t LAPACKE_cunbdb_work(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_float *x11, armpl_int_t ldx11, lapack_complex_float *x12, armpl_int_t ldx12, lapack_complex_float *x21, armpl_int_t ldx21, lapack_complex_float *x22, armpl_int_t ldx22, float *theta, float *phi, lapack_complex_float *taup1, lapack_complex_float *taup2, lapack_complex_float *tauq1, lapack_complex_float *tauq2, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cuncsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_float *x11, armpl_int_t ldx11, lapack_complex_float *x12, armpl_int_t ldx12, lapack_complex_float *x21, armpl_int_t ldx21, lapack_complex_float *x22, armpl_int_t ldx22, float *theta, lapack_complex_float *u1, armpl_int_t ldu1, lapack_complex_float *u2, armpl_int_t ldu2, lapack_complex_float *v1t, armpl_int_t ldv1t, lapack_complex_float *v2t, armpl_int_t ldv2t);
armpl_int_t LAPACKE_cuncsd2by1(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_float *x11, armpl_int_t ldx11, lapack_complex_float *x21, armpl_int_t ldx21, float *theta, lapack_complex_float *u1, armpl_int_t ldu1, lapack_complex_float *u2, armpl_int_t ldu2, lapack_complex_float *v1t, armpl_int_t ldv1t);
armpl_int_t LAPACKE_cuncsd2by1_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_float *x11, armpl_int_t ldx11, lapack_complex_float *x21, armpl_int_t ldx21, float *theta, lapack_complex_float *u1, armpl_int_t ldu1, lapack_complex_float *u2, armpl_int_t ldu2, lapack_complex_float *v1t, armpl_int_t ldv1t, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cuncsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_float *x11, armpl_int_t ldx11, lapack_complex_float *x12, armpl_int_t ldx12, lapack_complex_float *x21, armpl_int_t ldx21, lapack_complex_float *x22, armpl_int_t ldx22, float *theta, lapack_complex_float *u1, armpl_int_t ldu1, lapack_complex_float *u2, armpl_int_t ldu2, lapack_complex_float *v1t, armpl_int_t ldv1t, lapack_complex_float *v2t, armpl_int_t ldv2t, lapack_complex_float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cungbr(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau);
armpl_int_t LAPACKE_cungbr_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunghr(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau);
armpl_int_t LAPACKE_cunghr_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunglq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau);
armpl_int_t LAPACKE_cunglq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungql(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau);
armpl_int_t LAPACKE_cungql_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau);
armpl_int_t LAPACKE_cungqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungrq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau);
armpl_int_t LAPACKE_cungrq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau);
armpl_int_t LAPACKE_cungtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungtsqr_row(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb, armpl_int_t nb, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cungtsqr_row_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb, armpl_int_t nb, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmbr(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmbr_work(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmhr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmhr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmql(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmql_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmrq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmrq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmrz(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmrz_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cupgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, const lapack_complex_float *tau, lapack_complex_float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_cupgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *ap, const lapack_complex_float *tau, lapack_complex_float *q, armpl_int_t ldq, lapack_complex_float *work);
armpl_int_t LAPACKE_cupmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const lapack_complex_float *ap, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cupmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const lapack_complex_float *ap, const lapack_complex_float *tau, lapack_complex_float *c, armpl_int_t ldc, lapack_complex_float *work);
armpl_int_t LAPACKE_dbbcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *theta, double *phi, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *v2t, armpl_int_t ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e);
armpl_int_t LAPACKE_dbbcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *theta, double *phi, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *v2t, armpl_int_t ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dbdsdc(armpl_int_t matrix_layout, char uplo, char compq, armpl_int_t n, double *d, double *e, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *q, armpl_int_t *iq);
armpl_int_t LAPACKE_dbdsdc_work(armpl_int_t matrix_layout, char uplo, char compq, armpl_int_t n, double *d, double *e, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *q, armpl_int_t *iq, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dbdsqr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, double *d, double *e, double *vt, armpl_int_t ldvt, double *u, armpl_int_t ldu, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dbdsqr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, double *d, double *e, double *vt, armpl_int_t ldvt, double *u, armpl_int_t ldu, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dbdsvdx(armpl_int_t matrix_layout, char uplo, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, double *z, armpl_int_t ldz, armpl_int_t *superb);
armpl_int_t LAPACKE_dbdsvdx_work(armpl_int_t matrix_layout, char uplo, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ddisna(char job, armpl_int_t m, armpl_int_t n, const double *d, double *sep);
armpl_int_t LAPACKE_ddisna_work(char job, armpl_int_t m, armpl_int_t n, const double *d, double *sep);
armpl_int_t LAPACKE_dgbbrd(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, double *ab, armpl_int_t ldab, double *d, double *e, double *q, armpl_int_t ldq, double *pt, armpl_int_t ldpt, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dgbbrd_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, double *ab, armpl_int_t ldab, double *d, double *e, double *q, armpl_int_t ldq, double *pt, armpl_int_t ldpt, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dgbcon(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dgbcon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgbequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgbequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgbequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgbrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dgbrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbrfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dgbrfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgbsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgbsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *rpivot);
armpl_int_t LAPACKE_dgbsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbsvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dgbsvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbtrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, double *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgbtrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, double *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgbtrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgbtrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgebak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *scale, armpl_int_t m, double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_dgebak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *scale, armpl_int_t m, double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_dgebal(armpl_int_t matrix_layout, char job, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale);
armpl_int_t LAPACKE_dgebal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale);
armpl_int_t LAPACKE_dgebrd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *d, double *e, double *tauq, double *taup);
armpl_int_t LAPACKE_dgebrd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *d, double *e, double *tauq, double *taup, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgecon(armpl_int_t matrix_layout, char norm, armpl_int_t n, const double *a, armpl_int_t lda, double anorm, double *rcond);
armpl_int_t LAPACKE_dgecon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, const double *a, armpl_int_t lda, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgedmd(armpl_int_t matrix_layout, char jobs, char jobz, char jobr,char jobf, armpl_int_t whtsvd, armpl_int_t m,armpl_int_t n, double* x, armpl_int_t ldx, double* y,armpl_int_t ldy, armpl_int_t nrnk, double* tol,armpl_int_t k, double* reig, double* imeig,double* z, armpl_int_t ldz,double* res, double* b, armpl_int_t ldb,double* w, armpl_int_t ldw, double* s, armpl_int_t lds);
armpl_int_t LAPACKE_dgedmd_work(armpl_int_t matrix_layout, char jobs, char jobz,char jobr, char jobf, armpl_int_t whtsvd,armpl_int_t m, armpl_int_t n, double* x,armpl_int_t ldx, double* y, armpl_int_t ldy,armpl_int_t nrnk, double* tol, armpl_int_t k,double* reig, double* imeig,double* z, armpl_int_t ldz, double* res,double* b, armpl_int_t ldb, double* w,armpl_int_t ldw, double* s, armpl_int_t lds,double* work, armpl_int_t lwork,armpl_int_t* iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dgedmdq(armpl_int_t matrix_layout, char jobs, char jobz, char jobr,char jobq, char jobt, char jobf, armpl_int_t whtsvd,armpl_int_t m, armpl_int_t n, double* f, armpl_int_t ldf,double* x, armpl_int_t ldx, double* y, armpl_int_t ldy,armpl_int_t nrnk, double* tol, armpl_int_t k,double* reig, double* imeig, double* z,armpl_int_t ldz, double* res, double* b, armpl_int_t ldb,double* v, armpl_int_t ldv, double* s, armpl_int_t lds);
armpl_int_t LAPACKE_dgedmdq_work(armpl_int_t matrix_layout, char jobs, char jobz,char jobr, char jobq, char jobt, char jobf,armpl_int_t whtsvd, armpl_int_t m, armpl_int_t n,double* f, armpl_int_t ldf, double* x,armpl_int_t ldx, double* y, armpl_int_t ldy,armpl_int_t nrnk, double* tol, armpl_int_t k,double* reig, double* imeig, double* z,armpl_int_t ldz, double* res, double* b,armpl_int_t ldb, double* v, armpl_int_t ldv,double* s, armpl_int_t lds, double* work,armpl_int_t lwork, armpl_int_t* iwork,armpl_int_t liwork);
armpl_int_t LAPACKE_dgeequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgeequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgeequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgeequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgees(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_D_SELECT2 select, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t ldvs);
armpl_int_t LAPACKE_dgees_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_D_SELECT2 select, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t ldvs, double *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dgeesx(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_D_SELECT2 select, char sense, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t ldvs, double *rconde, double *rcondv);
armpl_int_t LAPACKE_dgeesx_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_D_SELECT2 select, char sense, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t ldvs, double *rconde, double *rcondv, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dgeev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *wr, double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_dgeev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *wr, double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *wr, double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv);
armpl_int_t LAPACKE_dgeevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *wr, double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgehrd(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgehrd_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgejsv(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *sva, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *stat, armpl_int_t *istat);
armpl_int_t LAPACKE_dgejsv_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *sva, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgelq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t tsize);
armpl_int_t LAPACKE_dgelq2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgelq2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work);
armpl_int_t LAPACKE_dgelq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t tsize, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgelqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgelqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgels(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgels_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgelsd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_dgelsd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgelss(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_dgelss_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgelsy(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *jpvt, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_dgelsy_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *jpvt, double rcond, armpl_int_t *rank, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgemlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *t, armpl_int_t tsize, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dgemlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *t, armpl_int_t tsize, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgemqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *t, armpl_int_t tsize, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dgemqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *t, armpl_int_t tsize, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgemqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dgemqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dgeqlf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgeqlf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqp3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *jpvt, double *tau);
armpl_int_t LAPACKE_dgeqp3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *jpvt, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t tsize);
armpl_int_t LAPACKE_dgeqr2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgeqr2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work);
armpl_int_t LAPACKE_dgeqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t tsize, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgeqrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqrfp(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgeqrfp_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, double *a, armpl_int_t lda, double *t, armpl_int_t ldt, double *work);
armpl_int_t LAPACKE_dgerfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dgerfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgerfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dgerfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgerqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgerqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgesdd(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt);
armpl_int_t LAPACKE_dgesdd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgesvd(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *superb);
armpl_int_t LAPACKE_dgesvd_work(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgesvdq(armpl_int_t matrix_layout, char joba, char jobp, char jobr, char jobu, char jobv, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, armpl_int_t *numrank);
armpl_int_t LAPACKE_dgesvdq_work(armpl_int_t matrix_layout, char joba, char jobp, char jobr, char jobu, char jobv, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, armpl_int_t *numrank, armpl_int_t *iwork, armpl_int_t liwork, double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_dgesvdx(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, armpl_int_t *superb);
armpl_int_t LAPACKE_dgesvdx_work(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgesvj(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *sva, armpl_int_t mv, double *v, armpl_int_t ldv, double *stat);
armpl_int_t LAPACKE_dgesvj_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *sva, armpl_int_t mv, double *v, armpl_int_t ldv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgesvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *rpivot);
armpl_int_t LAPACKE_dgesvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgesvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dgesvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgetf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetrf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetrf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetri(armpl_int_t matrix_layout, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetri_work(armpl_int_t matrix_layout, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgetrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgetrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgetsls(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgetsls_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgetsqrhrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb1, armpl_int_t nb1, armpl_int_t nb2, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgetsqrhrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb1, armpl_int_t nb1, armpl_int_t nb2, double *a, armpl_int_t lda, double *t, armpl_int_t ldt, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggbak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *lscale, const double *rscale, armpl_int_t m, double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_dggbak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *lscale, const double *rscale, armpl_int_t m, double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_dggbal(armpl_int_t matrix_layout, char job, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale);
armpl_int_t LAPACKE_dggbal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *work);
armpl_int_t LAPACKE_dgges(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_dgges3(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_dgges3_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr, double *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dgges_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr, double *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dggesx(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr, double *rconde, double *rcondv);
armpl_int_t LAPACKE_dggesx_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr, double *rconde, double *rcondv, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dggev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_dggev3(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_dggev3_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv);
armpl_int_t LAPACKE_dggevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dggglm(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *d, double *x, double *y);
armpl_int_t LAPACKE_dggglm_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *d, double *x, double *y, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgghd3(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dgghd3_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgghrd(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dgghrd_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dgglse(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *c, double *d, double *x);
armpl_int_t LAPACKE_dgglse_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *c, double *d, double *x, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggqrf(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, double *a, armpl_int_t lda, double *taua, double *b, armpl_int_t ldb, double *taub);
armpl_int_t LAPACKE_dggqrf_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, double *a, armpl_int_t lda, double *taua, double *b, armpl_int_t ldb, double *taub, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggrqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *taua, double *b, armpl_int_t ldb, double *taub);
armpl_int_t LAPACKE_dggrqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *taua, double *b, armpl_int_t ldb, double *taub, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggsvd3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_dggsvd3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dggsvp3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_dggsvp3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, armpl_int_t *iwork, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgtcon(char norm, armpl_int_t n, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dgtcon_work(char norm, armpl_int_t n, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgtrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, const double *dlf, const double *df, const double *duf, const double *du2, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dgtrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, const double *dlf, const double *df, const double *duf, const double *du2, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgtsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *dl, double *d, double *du, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgtsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *dl, double *d, double *du, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgtsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, double *dlf, double *df, double *duf, double *du2, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dgtsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, double *dlf, double *df, double *duf, double *du2, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgttrf(armpl_int_t n, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgttrf_work(armpl_int_t n, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgttrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgttrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dhgeqz(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *h, armpl_int_t ldh, double *t, armpl_int_t ldt, double *alphar, double *alphai, double *beta, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dhgeqz_work(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *h, armpl_int_t ldh, double *t, armpl_int_t ldt, double *alphar, double *alphai, double *beta, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dhsein(armpl_int_t matrix_layout, char job, char eigsrc, char initv, armpl_int_t *select, armpl_int_t n, const double *h, armpl_int_t ldh, double *wr, const double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_dhsein_work(armpl_int_t matrix_layout, char job, char eigsrc, char initv, armpl_int_t *select, armpl_int_t n, const double *h, armpl_int_t ldh, double *wr, const double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, double *work, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_dhseqr(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *h, armpl_int_t ldh, double *wr, double *wi, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dhseqr_work(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *h, armpl_int_t ldh, double *wr, double *wi, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dlacn2(armpl_int_t n, double *v, double *x, armpl_int_t *isgn, double *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_dlacn2_work(armpl_int_t n, double *v, double *x, armpl_int_t *isgn, double *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_dlacpy(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dlacpy_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dlag2s(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, float *sa, armpl_int_t ldsa);
armpl_int_t LAPACKE_dlag2s_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, float *sa, armpl_int_t ldsa);
double LAPACKE_dlamch(char cmach);
double LAPACKE_dlamch_work(char cmach);
double LAPACKE_dlangb(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double* ab, armpl_int_t ldab);
double LAPACKE_dlangb_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double* ab, armpl_int_t ldab, double* work);
double LAPACKE_dlange(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda);
double LAPACKE_dlange_work(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *work);
double LAPACKE_dlansy(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const double *a, armpl_int_t lda);
double LAPACKE_dlansy_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *work);
double LAPACKE_dlantr(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda);
double LAPACKE_dlantr_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *work);
armpl_int_t LAPACKE_dlapmr(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_dlapmr_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_dlapmt(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_dlapmt_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, double *x, armpl_int_t ldx, armpl_int_t *k);
double LAPACKE_dlapy2(double x, double y);
double LAPACKE_dlapy2_work(double x, double y);
double LAPACKE_dlapy3(double x, double y, double z);
double LAPACKE_dlapy3_work(double x, double y, double z);
armpl_int_t LAPACKE_dlarfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dlarfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *c, armpl_int_t ldc, double *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_dlarfg(armpl_int_t n, double *alpha, double *x, armpl_int_t incx, double *tau);
armpl_int_t LAPACKE_dlarfg_work(armpl_int_t n, double *alpha, double *x, armpl_int_t incx, double *tau);
armpl_int_t LAPACKE_dlarft(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const double *v, armpl_int_t ldv, const double *tau, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dlarft_work(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const double *v, armpl_int_t ldv, const double *tau, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dlarfx(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const double *v, double tau, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dlarfx_work(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const double *v, double tau, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dlarnv(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, double *x);
armpl_int_t LAPACKE_dlarnv_work(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, double *x);
armpl_int_t LAPACKE_dlartgp(double f, double g, double *cs, double *sn, double *r);
armpl_int_t LAPACKE_dlartgp_work(double f, double g, double *cs, double *sn, double *r);
armpl_int_t LAPACKE_dlartgs(double x, double y, double sigma, double *cs, double *sn);
armpl_int_t LAPACKE_dlartgs_work(double x, double y, double sigma, double *cs, double *sn);
armpl_int_t LAPACKE_dlascl(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, double cfrom, double cto, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlascl_work(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, double cfrom, double cto, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlaset(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, double alpha, double beta, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlaset_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, double alpha, double beta, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlasrt(char id, armpl_int_t n, double *d);
armpl_int_t LAPACKE_dlasrt_work(char id, armpl_int_t n, double *d);
armpl_int_t LAPACKE_dlassq(armpl_int_t n, double *x, armpl_int_t incx, double *scale, double *sumsq);
armpl_int_t LAPACKE_dlassq_work(armpl_int_t n, double *x, armpl_int_t incx, double *scale, double *sumsq);
armpl_int_t LAPACKE_dlaswp(armpl_int_t matrix_layout, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_dlaswp_work(armpl_int_t matrix_layout, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_dlauum(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlauum_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dopgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, const double *tau, double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_dopgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, const double *tau, double *q, armpl_int_t ldq, double *work);
armpl_int_t LAPACKE_dopmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const double *ap, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dopmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const double *ap, const double *tau, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dorbdb(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x12, armpl_int_t ldx12, double *x21, armpl_int_t ldx21, double *x22, armpl_int_t ldx22, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *tauq2);
armpl_int_t LAPACKE_dorbdb_work(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x12, armpl_int_t ldx12, double *x21, armpl_int_t ldx21, double *x22, armpl_int_t ldx22, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *tauq2, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x12, armpl_int_t ldx12, double *x21, armpl_int_t ldx21, double *x22, armpl_int_t ldx22, double *theta, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *v2t, armpl_int_t ldv2t);
armpl_int_t LAPACKE_dorcsd2by1(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x21, armpl_int_t ldx21, double *theta, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t);
armpl_int_t LAPACKE_dorcsd2by1_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x21, armpl_int_t ldx21, double *theta, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dorcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x12, armpl_int_t ldx12, double *x21, armpl_int_t ldx21, double *x22, armpl_int_t ldx22, double *theta, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *v2t, armpl_int_t ldv2t, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dorgbr(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgbr_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorghr(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorghr_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorglq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorglq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgql(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgql_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgrq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgrq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgtsqr_row(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb, armpl_int_t nb, double *a, armpl_int_t lda, const double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dorgtsqr_row_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb, armpl_int_t nb, double *a, armpl_int_t lda, const double *t, armpl_int_t ldt, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormbr(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormbr_work(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormhr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormhr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormql(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormql_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormrq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormrq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormrz(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormrz_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dpbcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double anorm, double *rcond);
armpl_int_t LAPACKE_dpbcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpbequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpbequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpbrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dpbrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpbstf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, double *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_dpbstf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, double *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_dpbsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpbsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpbsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dpbsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpbtrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_dpbtrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_dpbtrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpbtrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpftrf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dpftrf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dpftri(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dpftri_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dpftrs(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpftrs_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpocon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double anorm, double *rcond);
armpl_int_t LAPACKE_dpocon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpoequ(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpoequ_work(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpoequb(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpoequb_work(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dporfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dporfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dporfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const double *s, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dporfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const double *s, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dposvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dposvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dposvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dposvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpotrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotrf2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotrf2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpotrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dppcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double anorm, double *rcond);
armpl_int_t LAPACKE_dppcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dppequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dppequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *afp, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dpprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *afp, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dppsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dppsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dppsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, double *afp, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dppsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, double *afp, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dpptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dpptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dpptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dpptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpstrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, double tol);
armpl_int_t LAPACKE_dpstrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, double tol, double *work);
armpl_int_t LAPACKE_dptcon(armpl_int_t n, const double *d, const double *e, double anorm, double *rcond);
armpl_int_t LAPACKE_dptcon_work(armpl_int_t n, const double *d, const double *e, double anorm, double *rcond, double *work);
armpl_int_t LAPACKE_dpteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dpteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dptrfs(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, const double *df, const double *ef, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dptrfs_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, const double *df, const double *ef, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work);
armpl_int_t LAPACKE_dptsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *d, double *e, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dptsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *d, double *e, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dptsvx(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, double *df, double *ef, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dptsvx_work(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, double *df, double *ef, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work);
armpl_int_t LAPACKE_dpttrf(armpl_int_t n, double *d, double *e);
armpl_int_t LAPACKE_dpttrf_work(armpl_int_t n, double *d, double *e);
armpl_int_t LAPACKE_dpttrs(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpttrs_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsbev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsbev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dsbevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsbevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsbevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbgst(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, const double *bb, armpl_int_t ldbb, double *x, armpl_int_t ldx);
armpl_int_t LAPACKE_dsbgst_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, const double *bb, armpl_int_t ldbb, double *x, armpl_int_t ldx, double *work);
armpl_int_t LAPACKE_dsbgv(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbgv_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *w, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dsbgvd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbgvd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsbgvx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbgvx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbtrd(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *d, double *e, double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_dsbtrd_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *d, double *e, double *q, armpl_int_t ldq, double *work);
armpl_int_t LAPACKE_dsfrk(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, double alpha, const double *a, armpl_int_t lda, double beta, double *c);
armpl_int_t LAPACKE_dsfrk_work(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, double alpha, const double *a, armpl_int_t lda, double beta, double *c);
armpl_int_t LAPACKE_dsgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, armpl_int_t *iter);
armpl_int_t LAPACKE_dsgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *work, float *swork, armpl_int_t *iter);
armpl_int_t LAPACKE_dspcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dspcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dspev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *ap, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dspev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *ap, double *w, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dspevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *ap, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dspevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *ap, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dspevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *ap, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dspevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *ap, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dspgst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, double *ap, const double *bp);
armpl_int_t LAPACKE_dspgst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, double *ap, const double *bp);
armpl_int_t LAPACKE_dspgv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *ap, double *bp, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dspgv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *ap, double *bp, double *w, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dspgvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *ap, double *bp, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dspgvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *ap, double *bp, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dspgvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, double *ap, double *bp, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dspgvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, double *ap, double *bp, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, armpl_int_t *iter);
armpl_int_t LAPACKE_dsposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *work, float *swork, armpl_int_t *iter);
armpl_int_t LAPACKE_dsprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *afp, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dsprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *afp, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dspsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dspsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dspsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *afp, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dspsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *afp, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsptrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, double *d, double *e, double *tau);
armpl_int_t LAPACKE_dsptrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, double *d, double *e, double *tau);
armpl_int_t LAPACKE_dsptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, const armpl_int_t *ipiv, double *work);
armpl_int_t LAPACKE_dsptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dstebz(char range, char order, armpl_int_t n, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, const double *d, const double *e, armpl_int_t *m, armpl_int_t *nsplit, double *w, armpl_int_t *iblock, armpl_int_t *isplit);
armpl_int_t LAPACKE_dstebz_work(char range, char order, armpl_int_t n, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, const double *d, const double *e, armpl_int_t *m, armpl_int_t *nsplit, double *w, armpl_int_t *iblock, armpl_int_t *isplit, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dstedc(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dstedc_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dstegr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_dstegr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dstein(armpl_int_t matrix_layout, armpl_int_t n, const double *d, const double *e, armpl_int_t m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, double *z, armpl_int_t ldz, armpl_int_t *ifailv);
armpl_int_t LAPACKE_dstein_work(armpl_int_t matrix_layout, armpl_int_t n, const double *d, const double *e, armpl_int_t m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifailv);
armpl_int_t LAPACKE_dstemr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac);
armpl_int_t LAPACKE_dstemr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dsterf(armpl_int_t n, double *d, double *e);
armpl_int_t LAPACKE_dsterf_work(armpl_int_t n, double *d, double *e);
armpl_int_t LAPACKE_dstev(armpl_int_t matrix_layout, char jobz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dstev_work(armpl_int_t matrix_layout, char jobz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dstevd(armpl_int_t matrix_layout, char jobz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dstevd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dstevr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_dstevr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dstevx(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dstevx_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsycon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dsycon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dsycon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsycon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsyconv(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *e);
armpl_int_t LAPACKE_dsyconv_work(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *e);
armpl_int_t LAPACKE_dsyequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dsyequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax, double *work);
armpl_int_t LAPACKE_dsyev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_dsyev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_dsyev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsyev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsyevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_dsyevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_dsyevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsyevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsyevr(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_dsyevr_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_dsyevr_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsyevr_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsyevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsyevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsyevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsyevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsygst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsygst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsygv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_dsygv_2stage(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_dsygv_2stage_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsygv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsygvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_dsygvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsygvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsygvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsyrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dsyrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsyrfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dsyrfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsysv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *e, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *e, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysv_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dsysvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsysvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dsysvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsyswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_dsyswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_dsytrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *d, double *e, double *tau);
armpl_int_t LAPACKE_dsytrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *d, double *e, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytrf_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2);
armpl_int_t LAPACKE_dsytrf_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *e, armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_dsytri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *work, armpl_int_t nb);
armpl_int_t LAPACKE_dsytri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *work);
armpl_int_t LAPACKE_dsytrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work);
armpl_int_t LAPACKE_dsytrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtbcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double *rcond);
armpl_int_t LAPACKE_dtbcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtbrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dtbrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtbtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtbtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtfsm(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, double alpha, const double *a, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtfsm_work(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, double alpha, const double *a, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtftri(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dtftri_work(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dtfttp(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *arf, double *ap);
armpl_int_t LAPACKE_dtfttp_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *arf, double *ap);
armpl_int_t LAPACKE_dtfttr(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *arf, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtfttr_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *arf, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtgevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const double *s, armpl_int_t lds, const double *p, armpl_int_t ldp, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_dtgevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const double *s, armpl_int_t lds, const double *p, armpl_int_t ldp, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, double *work);
armpl_int_t LAPACKE_dtgexc(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, armpl_int_t *ifst, armpl_int_t *ilst);
armpl_int_t LAPACKE_dtgexc_work(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, armpl_int_t *ifst, armpl_int_t *ilst, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dtgsen(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, armpl_int_t *m, double *pl, double *pr, double *dif);
armpl_int_t LAPACKE_dtgsen_work(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, armpl_int_t *m, double *pl, double *pr, double *dif, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dtgsja(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, armpl_int_t *ncycle);
armpl_int_t LAPACKE_dtgsja_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, double *work, armpl_int_t *ncycle);
armpl_int_t LAPACKE_dtgsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, const double *vl, armpl_int_t ldvl, const double *vr, armpl_int_t ldvr, double *s, double *dif, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_dtgsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, const double *vl, armpl_int_t ldvl, const double *vr, armpl_int_t ldvr, double *s, double *dif, armpl_int_t mm, armpl_int_t *m, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtgsyl(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, double *c, armpl_int_t ldc, const double *d, armpl_int_t ldd, const double *e, armpl_int_t lde, double *f, armpl_int_t ldf, double *scale, double *dif);
armpl_int_t LAPACKE_dtgsyl_work(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, double *c, armpl_int_t ldc, const double *d, armpl_int_t ldd, const double *e, armpl_int_t lde, double *f, armpl_int_t ldf, double *scale, double *dif, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtpcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const double *ap, double *rcond);
armpl_int_t LAPACKE_dtpcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const double *ap, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtpmqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtpmqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *work);
armpl_int_t LAPACKE_dtpqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dtpqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dtpqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dtpqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *t, armpl_int_t ldt, double *work);
armpl_int_t LAPACKE_dtprfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtprfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_dtprfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dtprfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtptri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dtptri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dtptrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtptrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtpttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *ap, double *arf);
armpl_int_t LAPACKE_dtpttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *ap, double *arf);
armpl_int_t LAPACKE_dtpttr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtpttr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtrcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const double *a, armpl_int_t lda, double *rcond);
armpl_int_t LAPACKE_dtrcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const double *a, armpl_int_t lda, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtrevc(armpl_int_t matrix_layout, char side, char howmny, armpl_int_t *select, armpl_int_t n, const double *t, armpl_int_t ldt, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_dtrevc_work(armpl_int_t matrix_layout, char side, char howmny, armpl_int_t *select, armpl_int_t n, const double *t, armpl_int_t ldt, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, double *work);
armpl_int_t LAPACKE_dtrexc(armpl_int_t matrix_layout, char compq, armpl_int_t n, double *t, armpl_int_t ldt, double *q, armpl_int_t ldq, armpl_int_t *ifst, armpl_int_t *ilst);
armpl_int_t LAPACKE_dtrexc_work(armpl_int_t matrix_layout, char compq, armpl_int_t n, double *t, armpl_int_t ldt, double *q, armpl_int_t ldq, armpl_int_t *ifst, armpl_int_t *ilst, double *work);
armpl_int_t LAPACKE_dtrrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dtrrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtrsen(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, double *t, armpl_int_t ldt, double *q, armpl_int_t ldq, double *wr, double *wi, armpl_int_t *m, double *s, double *sep);
armpl_int_t LAPACKE_dtrsen_work(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, double *t, armpl_int_t ldt, double *q, armpl_int_t ldq, double *wr, double *wi, armpl_int_t *m, double *s, double *sep, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dtrsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const double *t, armpl_int_t ldt, const double *vl, armpl_int_t ldvl, const double *vr, armpl_int_t ldvr, double *s, double *sep, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_dtrsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const double *t, armpl_int_t ldt, const double *vl, armpl_int_t ldvl, const double *vr, armpl_int_t ldvr, double *s, double *sep, armpl_int_t mm, armpl_int_t *m, double *work, armpl_int_t ldwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtrsyl(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, double *c, armpl_int_t ldc, double *scale);
armpl_int_t LAPACKE_dtrsyl_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, double *c, armpl_int_t ldc, double *scale);
armpl_int_t LAPACKE_dtrsyl3(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const double* a, armpl_int_t lda, const double* b, armpl_int_t ldb, double* c, armpl_int_t ldc, double* scale);
armpl_int_t LAPACKE_dtrsyl3_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const double* a, armpl_int_t lda, const double* b, armpl_int_t ldb, double* c, armpl_int_t ldc, double* scale, armpl_int_t* iwork, armpl_int_t liwork, double* swork, armpl_int_t ldswork);
armpl_int_t LAPACKE_dtrtri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtrtri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtrtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtrtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtrttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *arf);
armpl_int_t LAPACKE_dtrttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *arf);
armpl_int_t LAPACKE_dtrttp(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *ap);
armpl_int_t LAPACKE_dtrttp_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *ap);
armpl_int_t LAPACKE_dtzrzf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dtzrzf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
void LAPACKE_ilaver(armpl_int_t *vers_major, armpl_int_t *vers_minor, armpl_int_t *vers_patch);
armpl_int_t LAPACKE_sbbcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *theta, float *phi, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *v2t, armpl_int_t ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e);
armpl_int_t LAPACKE_sbbcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *theta, float *phi, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *v2t, armpl_int_t ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sbdsdc(armpl_int_t matrix_layout, char uplo, char compq, armpl_int_t n, float *d, float *e, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *q, armpl_int_t *iq);
armpl_int_t LAPACKE_sbdsdc_work(armpl_int_t matrix_layout, char uplo, char compq, armpl_int_t n, float *d, float *e, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *q, armpl_int_t *iq, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sbdsqr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, float *d, float *e, float *vt, armpl_int_t ldvt, float *u, armpl_int_t ldu, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sbdsqr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, float *d, float *e, float *vt, armpl_int_t ldvt, float *u, armpl_int_t ldu, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_sbdsvdx(armpl_int_t matrix_layout, char uplo, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, float *z, armpl_int_t ldz, armpl_int_t *superb);
armpl_int_t LAPACKE_sbdsvdx_work(armpl_int_t matrix_layout, char uplo, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sdisna(char job, armpl_int_t m, armpl_int_t n, const float *d, float *sep);
armpl_int_t LAPACKE_sdisna_work(char job, armpl_int_t m, armpl_int_t n, const float *d, float *sep);
armpl_int_t LAPACKE_sgbbrd(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, float *ab, armpl_int_t ldab, float *d, float *e, float *q, armpl_int_t ldq, float *pt, armpl_int_t ldpt, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sgbbrd_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, float *ab, armpl_int_t ldab, float *d, float *e, float *q, armpl_int_t ldq, float *pt, armpl_int_t ldpt, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_sgbcon(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_sgbcon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgbequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgbequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgbequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgbrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sgbrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbrfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sgbrfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgbsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgbsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *rpivot);
armpl_int_t LAPACKE_sgbsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbsvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sgbsvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbtrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, float *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgbtrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, float *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgbtrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgbtrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgebak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *scale, armpl_int_t m, float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_sgebak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *scale, armpl_int_t m, float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_sgebal(armpl_int_t matrix_layout, char job, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale);
armpl_int_t LAPACKE_sgebal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale);
armpl_int_t LAPACKE_sgebrd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *d, float *e, float *tauq, float *taup);
armpl_int_t LAPACKE_sgebrd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *d, float *e, float *tauq, float *taup, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgecon(armpl_int_t matrix_layout, char norm, armpl_int_t n, const float *a, armpl_int_t lda, float anorm, float *rcond);
armpl_int_t LAPACKE_sgecon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, const float *a, armpl_int_t lda, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgedmd(armpl_int_t matrix_layout, char jobs, char jobz, char jobr,char jobf, armpl_int_t whtsvd, armpl_int_t m,armpl_int_t n, float* x, armpl_int_t ldx, float* y,armpl_int_t ldy, armpl_int_t nrnk, float* tol,armpl_int_t k, float* reig, float* imeig,float* z, armpl_int_t ldz, float* res,float* b, armpl_int_t ldb, float* w, armpl_int_t ldw,float* s, armpl_int_t lds);
armpl_int_t LAPACKE_sgedmd_work(armpl_int_t matrix_layout, char jobs, char jobz,char jobr, char jobf, armpl_int_t whtsvd,armpl_int_t m, armpl_int_t n, float* x,armpl_int_t ldx, float* y, armpl_int_t ldy,armpl_int_t nrnk, float* tol, armpl_int_t k,float* reig, float* imeig,float* z, armpl_int_t ldz, float* res,float* b, armpl_int_t ldb, float* w,armpl_int_t ldw, float* s, armpl_int_t lds,float* work, armpl_int_t lwork,armpl_int_t* iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sgedmdq(armpl_int_t matrix_layout, char jobs, char jobz, char jobr,char jobq, char jobt, char jobf, armpl_int_t whtsvd,armpl_int_t m, armpl_int_t n, float* f, armpl_int_t ldf,float* x, armpl_int_t ldx, float* y, armpl_int_t ldy,armpl_int_t nrnk, float* tol, armpl_int_t k,float* reig, float* imeig, float* z,armpl_int_t ldz, float* res, float* b, armpl_int_t ldb,float* v, armpl_int_t ldv, float* s, armpl_int_t lds);
armpl_int_t LAPACKE_sgedmdq_work(armpl_int_t matrix_layout, char jobs, char jobz,char jobr, char jobq, char jobt, char jobf,armpl_int_t whtsvd, armpl_int_t m, armpl_int_t n,float* f, armpl_int_t ldf, float* x,armpl_int_t ldx, float* y, armpl_int_t ldy,armpl_int_t nrnk, float* tol, armpl_int_t k,float* reig, float* imeig, float* z,armpl_int_t ldz, float* res, float* b,armpl_int_t ldb, float* v, armpl_int_t ldv,float* s, armpl_int_t lds, float* work,armpl_int_t lwork, armpl_int_t* iwork,armpl_int_t liwork);
armpl_int_t LAPACKE_sgeequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgeequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgeequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgeequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgees(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_S_SELECT2 select, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t ldvs);
armpl_int_t LAPACKE_sgees_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_S_SELECT2 select, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t ldvs, float *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sgeesx(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_S_SELECT2 select, char sense, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t ldvs, float *rconde, float *rcondv);
armpl_int_t LAPACKE_sgeesx_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_S_SELECT2 select, char sense, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t ldvs, float *rconde, float *rcondv, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sgeev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *wr, float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_sgeev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *wr, float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *wr, float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv);
armpl_int_t LAPACKE_sgeevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *wr, float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgehrd(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgehrd_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgejsv(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *sva, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *stat, armpl_int_t *istat);
armpl_int_t LAPACKE_sgejsv_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *sva, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgelq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t tsize);
armpl_int_t LAPACKE_sgelq2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgelq2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work);
armpl_int_t LAPACKE_sgelq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t tsize, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgelqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgelqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgels(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgels_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgelsd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_sgelsd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgelss(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_sgelss_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgelsy(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *jpvt, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_sgelsy_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *jpvt, float rcond, armpl_int_t *rank, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgemlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *t, armpl_int_t tsize, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sgemlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *t, armpl_int_t tsize, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgemqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *t, armpl_int_t tsize, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sgemqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *t, armpl_int_t tsize, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgemqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sgemqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_sgeqlf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgeqlf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqp3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *jpvt, float *tau);
armpl_int_t LAPACKE_sgeqp3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *jpvt, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t tsize);
armpl_int_t LAPACKE_sgeqr2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgeqr2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work);
armpl_int_t LAPACKE_sgeqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t tsize, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgeqrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqrfp(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgeqrfp_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, float *a, armpl_int_t lda, float *t, armpl_int_t ldt, float *work);
armpl_int_t LAPACKE_sgerfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sgerfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgerfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sgerfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgerqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgerqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgesdd(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt);
armpl_int_t LAPACKE_sgesdd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgesvd(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *superb);
armpl_int_t LAPACKE_sgesvd_work(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgesvdq(armpl_int_t matrix_layout, char joba, char jobp, char jobr, char jobu, char jobv, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, armpl_int_t *numrank);
armpl_int_t LAPACKE_sgesvdq_work(armpl_int_t matrix_layout, char joba, char jobp, char jobr, char jobu, char jobv, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, armpl_int_t *numrank, armpl_int_t *iwork, armpl_int_t liwork, float *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_sgesvdx(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, armpl_int_t *superb);
armpl_int_t LAPACKE_sgesvdx_work(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgesvj(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *sva, armpl_int_t mv, float *v, armpl_int_t ldv, float *stat);
armpl_int_t LAPACKE_sgesvj_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *sva, armpl_int_t mv, float *v, armpl_int_t ldv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgesvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *rpivot);
armpl_int_t LAPACKE_sgesvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgesvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sgesvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgetf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetrf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetrf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetri(armpl_int_t matrix_layout, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetri_work(armpl_int_t matrix_layout, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgetrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgetrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgetsls(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgetsls_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgetsqrhrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb1, armpl_int_t nb1, armpl_int_t nb2, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgetsqrhrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb1, armpl_int_t nb1, armpl_int_t nb2, float *a, armpl_int_t lda, float *t, armpl_int_t ldt, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggbak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *lscale, const float *rscale, armpl_int_t m, float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_sggbak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *lscale, const float *rscale, armpl_int_t m, float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_sggbal(armpl_int_t matrix_layout, char job, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale);
armpl_int_t LAPACKE_sggbal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *work);
armpl_int_t LAPACKE_sgges(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_sgges3(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_sgges3_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr, float *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sgges_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr, float *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sggesx(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr, float *rconde, float *rcondv);
armpl_int_t LAPACKE_sggesx_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr, float *rconde, float *rcondv, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sggev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_sggev3(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_sggev3_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv);
armpl_int_t LAPACKE_sggevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sggglm(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *d, float *x, float *y);
armpl_int_t LAPACKE_sggglm_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *d, float *x, float *y, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgghd3(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sgghd3_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgghrd(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sgghrd_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sgglse(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *c, float *d, float *x);
armpl_int_t LAPACKE_sgglse_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *c, float *d, float *x, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggqrf(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, float *a, armpl_int_t lda, float *taua, float *b, armpl_int_t ldb, float *taub);
armpl_int_t LAPACKE_sggqrf_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, float *a, armpl_int_t lda, float *taua, float *b, armpl_int_t ldb, float *taub, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggrqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *taua, float *b, armpl_int_t ldb, float *taub);
armpl_int_t LAPACKE_sggrqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *taua, float *b, armpl_int_t ldb, float *taub, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggsvd3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_sggsvd3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sggsvp3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_sggsvp3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, armpl_int_t *iwork, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgtcon(char norm, armpl_int_t n, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_sgtcon_work(char norm, armpl_int_t n, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgtrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, const float *dlf, const float *df, const float *duf, const float *du2, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sgtrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, const float *dlf, const float *df, const float *duf, const float *du2, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgtsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *dl, float *d, float *du, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgtsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *dl, float *d, float *du, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgtsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, float *dlf, float *df, float *duf, float *du2, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sgtsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, float *dlf, float *df, float *duf, float *du2, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgttrf(armpl_int_t n, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgttrf_work(armpl_int_t n, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgttrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgttrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_shgeqz(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *h, armpl_int_t ldh, float *t, armpl_int_t ldt, float *alphar, float *alphai, float *beta, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_shgeqz_work(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *h, armpl_int_t ldh, float *t, armpl_int_t ldt, float *alphar, float *alphai, float *beta, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_shsein(armpl_int_t matrix_layout, char job, char eigsrc, char initv, armpl_int_t *select, armpl_int_t n, const float *h, armpl_int_t ldh, float *wr, const float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_shsein_work(armpl_int_t matrix_layout, char job, char eigsrc, char initv, armpl_int_t *select, armpl_int_t n, const float *h, armpl_int_t ldh, float *wr, const float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, float *work, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_shseqr(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *h, armpl_int_t ldh, float *wr, float *wi, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_shseqr_work(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *h, armpl_int_t ldh, float *wr, float *wi, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_slacn2(armpl_int_t n, float *v, float *x, armpl_int_t *isgn, float *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_slacn2_work(armpl_int_t n, float *v, float *x, armpl_int_t *isgn, float *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_slacpy(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_slacpy_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_slag2d(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *sa, armpl_int_t ldsa, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_slag2d_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *sa, armpl_int_t ldsa, double *a, armpl_int_t lda);
float LAPACKE_slamch(char cmach);
float LAPACKE_slamch_work(char cmach);
float LAPACKE_slangb(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float* ab, armpl_int_t ldab);
float LAPACKE_slangb_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float* ab, armpl_int_t ldab, float* work);
float LAPACKE_slange(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda);
float LAPACKE_slange_work(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *work);
float LAPACKE_slansy(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const float *a, armpl_int_t lda);
float LAPACKE_slansy_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *work);
float LAPACKE_slantr(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda);
float LAPACKE_slantr_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *work);
armpl_int_t LAPACKE_slapmr(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_slapmr_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_slapmt(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_slapmt_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, float *x, armpl_int_t ldx, armpl_int_t *k);
float LAPACKE_slapy2(float x, float y);
float LAPACKE_slapy2_work(float x, float y);
float LAPACKE_slapy3(float x, float y, float z);
float LAPACKE_slapy3_work(float x, float y, float z);
armpl_int_t LAPACKE_slarfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_slarfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *c, armpl_int_t ldc, float *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_slarfg(armpl_int_t n, float *alpha, float *x, armpl_int_t incx, float *tau);
armpl_int_t LAPACKE_slarfg_work(armpl_int_t n, float *alpha, float *x, armpl_int_t incx, float *tau);
armpl_int_t LAPACKE_slarft(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const float *v, armpl_int_t ldv, const float *tau, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_slarft_work(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const float *v, armpl_int_t ldv, const float *tau, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_slarfx(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const float *v, float tau, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_slarfx_work(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const float *v, float tau, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_slarnv(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, float *x);
armpl_int_t LAPACKE_slarnv_work(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, float *x);
armpl_int_t LAPACKE_slartgp(float f, float g, float *cs, float *sn, float *r);
armpl_int_t LAPACKE_slartgp_work(float f, float g, float *cs, float *sn, float *r);
armpl_int_t LAPACKE_slartgs(float x, float y, float sigma, float *cs, float *sn);
armpl_int_t LAPACKE_slartgs_work(float x, float y, float sigma, float *cs, float *sn);
armpl_int_t LAPACKE_slascl(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, float cfrom, float cto, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slascl_work(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, float cfrom, float cto, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slaset(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, float alpha, float beta, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slaset_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, float alpha, float beta, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slasrt(char id, armpl_int_t n, float *d);
armpl_int_t LAPACKE_slasrt_work(char id, armpl_int_t n, float *d);
armpl_int_t LAPACKE_slassq(armpl_int_t n, float *x, armpl_int_t incx, float *scale, float *sumsq);
armpl_int_t LAPACKE_slassq_work(armpl_int_t n, float *x, armpl_int_t incx, float *scale, float *sumsq);
armpl_int_t LAPACKE_slaswp(armpl_int_t matrix_layout, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_slaswp_work(armpl_int_t matrix_layout, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_slauum(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slauum_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_sopgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, const float *tau, float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_sopgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, const float *tau, float *q, armpl_int_t ldq, float *work);
armpl_int_t LAPACKE_sopmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const float *ap, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sopmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const float *ap, const float *tau, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_sorbdb(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x12, armpl_int_t ldx12, float *x21, armpl_int_t ldx21, float *x22, armpl_int_t ldx22, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *tauq2);
armpl_int_t LAPACKE_sorbdb_work(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x12, armpl_int_t ldx12, float *x21, armpl_int_t ldx21, float *x22, armpl_int_t ldx22, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *tauq2, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x12, armpl_int_t ldx12, float *x21, armpl_int_t ldx21, float *x22, armpl_int_t ldx22, float *theta, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *v2t, armpl_int_t ldv2t);
armpl_int_t LAPACKE_sorcsd2by1(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x21, armpl_int_t ldx21, float *theta, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t);
armpl_int_t LAPACKE_sorcsd2by1_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x21, armpl_int_t ldx21, float *theta, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sorcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x12, armpl_int_t ldx12, float *x21, armpl_int_t ldx21, float *x22, armpl_int_t ldx22, float *theta, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *v2t, armpl_int_t ldv2t, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sorgbr(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgbr_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorghr(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorghr_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorglq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorglq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgql(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgql_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgrq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgrq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgtsqr_row(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb, armpl_int_t nb, float *a, armpl_int_t lda, const float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sorgtsqr_row_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb, armpl_int_t nb, float *a, armpl_int_t lda, const float *t, armpl_int_t ldt, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormbr(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormbr_work(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormhr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormhr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormql(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormql_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormrq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormrq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormrz(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormrz_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_spbcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float anorm, float *rcond);
armpl_int_t LAPACKE_spbcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spbequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spbequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spbrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_spbrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spbstf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, float *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_spbstf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, float *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_spbsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spbsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spbsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_spbsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spbtrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_spbtrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_spbtrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spbtrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spftrf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, float *a);
armpl_int_t LAPACKE_spftrf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, float *a);
armpl_int_t LAPACKE_spftri(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, float *a);
armpl_int_t LAPACKE_spftri_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, float *a);
armpl_int_t LAPACKE_spftrs(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spftrs_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spocon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float anorm, float *rcond);
armpl_int_t LAPACKE_spocon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spoequ(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spoequ_work(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spoequb(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spoequb_work(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_sporfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sporfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sporfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const float *s, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sporfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const float *s, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sposvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sposvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sposvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sposvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spotrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotrf2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotrf2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spotrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sppcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float anorm, float *rcond);
armpl_int_t LAPACKE_sppcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sppequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_sppequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *afp, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_spprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *afp, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sppsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sppsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sppsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, float *afp, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sppsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, float *afp, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_spptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_spptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_spptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_spptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spstrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, float tol);
armpl_int_t LAPACKE_spstrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, float tol, float *work);
armpl_int_t LAPACKE_sptcon(armpl_int_t n, const float *d, const float *e, float anorm, float *rcond);
armpl_int_t LAPACKE_sptcon_work(armpl_int_t n, const float *d, const float *e, float anorm, float *rcond, float *work);
armpl_int_t LAPACKE_spteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_spteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_sptrfs(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, const float *df, const float *ef, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sptrfs_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, const float *df, const float *ef, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work);
armpl_int_t LAPACKE_sptsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *d, float *e, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sptsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *d, float *e, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sptsvx(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, float *df, float *ef, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sptsvx_work(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, float *df, float *ef, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work);
armpl_int_t LAPACKE_spttrf(armpl_int_t n, float *d, float *e);
armpl_int_t LAPACKE_spttrf_work(armpl_int_t n, float *d, float *e);
armpl_int_t LAPACKE_spttrs(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spttrs_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssbev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssbev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_ssbevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssbevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssbevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbgst(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, const float *bb, armpl_int_t ldbb, float *x, armpl_int_t ldx);
armpl_int_t LAPACKE_ssbgst_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, const float *bb, armpl_int_t ldbb, float *x, armpl_int_t ldx, float *work);
armpl_int_t LAPACKE_ssbgv(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbgv_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *w, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_ssbgvd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbgvd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssbgvx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbgvx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbtrd(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *d, float *e, float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_ssbtrd_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *d, float *e, float *q, armpl_int_t ldq, float *work);
armpl_int_t LAPACKE_ssfrk(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, float alpha, const float *a, armpl_int_t lda, float beta, float *c);
armpl_int_t LAPACKE_ssfrk_work(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, float alpha, const float *a, armpl_int_t lda, float beta, float *c);
armpl_int_t LAPACKE_sspcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_sspcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sspev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *ap, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sspev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *ap, float *w, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_sspevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *ap, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sspevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *ap, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sspevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *ap, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_sspevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *ap, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_sspgst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, float *ap, const float *bp);
armpl_int_t LAPACKE_sspgst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, float *ap, const float *bp);
armpl_int_t LAPACKE_sspgv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *ap, float *bp, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sspgv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *ap, float *bp, float *w, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_sspgvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *ap, float *bp, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sspgvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *ap, float *bp, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sspgvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, float *ap, float *bp, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_sspgvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, float *ap, float *bp, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *afp, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ssprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *afp, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sspsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sspsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sspsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *afp, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sspsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *afp, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssptrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, float *d, float *e, float *tau);
armpl_int_t LAPACKE_ssptrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, float *d, float *e, float *tau);
armpl_int_t LAPACKE_ssptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, const armpl_int_t *ipiv, float *work);
armpl_int_t LAPACKE_ssptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sstebz(char range, char order, armpl_int_t n, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, const float *d, const float *e, armpl_int_t *m, armpl_int_t *nsplit, float *w, armpl_int_t *iblock, armpl_int_t *isplit);
armpl_int_t LAPACKE_sstebz_work(char range, char order, armpl_int_t n, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, const float *d, const float *e, armpl_int_t *m, armpl_int_t *nsplit, float *w, armpl_int_t *iblock, armpl_int_t *isplit, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sstedc(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sstedc_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sstegr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_sstegr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sstein(armpl_int_t matrix_layout, armpl_int_t n, const float *d, const float *e, armpl_int_t m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, float *z, armpl_int_t ldz, armpl_int_t *ifailv);
armpl_int_t LAPACKE_sstein_work(armpl_int_t matrix_layout, armpl_int_t n, const float *d, const float *e, armpl_int_t m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifailv);
armpl_int_t LAPACKE_sstemr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac);
armpl_int_t LAPACKE_sstemr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_ssterf(armpl_int_t n, float *d, float *e);
armpl_int_t LAPACKE_ssterf_work(armpl_int_t n, float *d, float *e);
armpl_int_t LAPACKE_sstev(armpl_int_t matrix_layout, char jobz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sstev_work(armpl_int_t matrix_layout, char jobz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_sstevd(armpl_int_t matrix_layout, char jobz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sstevd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sstevr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_sstevr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sstevx(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_sstevx_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssycon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_ssycon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_ssycon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssycon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssyconv(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *e);
armpl_int_t LAPACKE_ssyconv_work(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *e);
armpl_int_t LAPACKE_ssyequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_ssyequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax, float *work);
armpl_int_t LAPACKE_ssyev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_ssyev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_ssyev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssyev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssyevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_ssyevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_ssyevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssyevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssyevr(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_ssyevr_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_ssyevr_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssyevr_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssyevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssyevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssyevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssyevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssygst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssygst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssygv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_ssygv_2stage(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_ssygv_2stage_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssygv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssygvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_ssygvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssygvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssygvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssyrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ssyrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssyrfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_ssyrfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssysv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *e, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *e, armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysv_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_ssysvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssysvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_ssysvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssyswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_ssyswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_ssytrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *d, float *e, float *tau);
armpl_int_t LAPACKE_ssytrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *d, float *e, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytrf_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2);
armpl_int_t LAPACKE_ssytrf_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *e, armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_ssytri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *work, armpl_int_t nb);
armpl_int_t LAPACKE_ssytri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *work);
armpl_int_t LAPACKE_ssytrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work);
armpl_int_t LAPACKE_ssytrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stbcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float *rcond);
armpl_int_t LAPACKE_stbcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_stbrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_stbrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_stbtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stbtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stfsm(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, float alpha, const float *a, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stfsm_work(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, float alpha, const float *a, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stftri(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, float *a);
armpl_int_t LAPACKE_stftri_work(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, float *a);
armpl_int_t LAPACKE_stfttp(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *arf, float *ap);
armpl_int_t LAPACKE_stfttp_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *arf, float *ap);
armpl_int_t LAPACKE_stfttr(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *arf, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_stfttr_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *arf, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_stgevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const float *s, armpl_int_t lds, const float *p, armpl_int_t ldp, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_stgevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const float *s, armpl_int_t lds, const float *p, armpl_int_t ldp, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, float *work);
armpl_int_t LAPACKE_stgexc(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, armpl_int_t *ifst, armpl_int_t *ilst);
armpl_int_t LAPACKE_stgexc_work(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, armpl_int_t *ifst, armpl_int_t *ilst, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_stgsen(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, armpl_int_t *m, float *pl, float *pr, float *dif);
armpl_int_t LAPACKE_stgsen_work(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, armpl_int_t *m, float *pl, float *pr, float *dif, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_stgsja(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, armpl_int_t *ncycle);
armpl_int_t LAPACKE_stgsja_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, float *work, armpl_int_t *ncycle);
armpl_int_t LAPACKE_stgsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, const float *vl, armpl_int_t ldvl, const float *vr, armpl_int_t ldvr, float *s, float *dif, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_stgsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, const float *vl, armpl_int_t ldvl, const float *vr, armpl_int_t ldvr, float *s, float *dif, armpl_int_t mm, armpl_int_t *m, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_stgsyl(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, float *c, armpl_int_t ldc, const float *d, armpl_int_t ldd, const float *e, armpl_int_t lde, float *f, armpl_int_t ldf, float *scale, float *dif);
armpl_int_t LAPACKE_stgsyl_work(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, float *c, armpl_int_t ldc, const float *d, armpl_int_t ldd, const float *e, armpl_int_t lde, float *f, armpl_int_t ldf, float *scale, float *dif, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_stpcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const float *ap, float *rcond);
armpl_int_t LAPACKE_stpcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const float *ap, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_stpmqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stpmqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *work);
armpl_int_t LAPACKE_stpqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_stpqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_stpqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_stpqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *t, armpl_int_t ldt, float *work);
armpl_int_t LAPACKE_stprfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stprfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_stprfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_stprfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_stptri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_stptri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_stptrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stptrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stpttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *ap, float *arf);
armpl_int_t LAPACKE_stpttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *ap, float *arf);
armpl_int_t LAPACKE_stpttr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_stpttr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_strcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const float *a, armpl_int_t lda, float *rcond);
armpl_int_t LAPACKE_strcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const float *a, armpl_int_t lda, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_strevc(armpl_int_t matrix_layout, char side, char howmny, armpl_int_t *select, armpl_int_t n, const float *t, armpl_int_t ldt, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_strevc_work(armpl_int_t matrix_layout, char side, char howmny, armpl_int_t *select, armpl_int_t n, const float *t, armpl_int_t ldt, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, float *work);
armpl_int_t LAPACKE_strexc(armpl_int_t matrix_layout, char compq, armpl_int_t n, float *t, armpl_int_t ldt, float *q, armpl_int_t ldq, armpl_int_t *ifst, armpl_int_t *ilst);
armpl_int_t LAPACKE_strexc_work(armpl_int_t matrix_layout, char compq, armpl_int_t n, float *t, armpl_int_t ldt, float *q, armpl_int_t ldq, armpl_int_t *ifst, armpl_int_t *ilst, float *work);
armpl_int_t LAPACKE_strrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_strrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_strsen(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, float *t, armpl_int_t ldt, float *q, armpl_int_t ldq, float *wr, float *wi, armpl_int_t *m, float *s, float *sep);
armpl_int_t LAPACKE_strsen_work(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, float *t, armpl_int_t ldt, float *q, armpl_int_t ldq, float *wr, float *wi, armpl_int_t *m, float *s, float *sep, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_strsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const float *t, armpl_int_t ldt, const float *vl, armpl_int_t ldvl, const float *vr, armpl_int_t ldvr, float *s, float *sep, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_strsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const float *t, armpl_int_t ldt, const float *vl, armpl_int_t ldvl, const float *vr, armpl_int_t ldvr, float *s, float *sep, armpl_int_t mm, armpl_int_t *m, float *work, armpl_int_t ldwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_strsyl(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, float *c, armpl_int_t ldc, float *scale);
armpl_int_t LAPACKE_strsyl_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, float *c, armpl_int_t ldc, float *scale);
armpl_int_t LAPACKE_strsyl3(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const float* a, armpl_int_t lda, const float* b, armpl_int_t ldb, float* c, armpl_int_t ldc, float* scale);
armpl_int_t LAPACKE_strsyl3_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const float* a, armpl_int_t lda, const float* b, armpl_int_t ldb, float* c, armpl_int_t ldc, float* scale, armpl_int_t* iwork, armpl_int_t liwork, float* swork, armpl_int_t ldswork);
armpl_int_t LAPACKE_strtri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_strtri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_strtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_strtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_strttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *arf);
armpl_int_t LAPACKE_strttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *arf);
armpl_int_t LAPACKE_strttp(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *ap);
armpl_int_t LAPACKE_strttp_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *ap);
armpl_int_t LAPACKE_stzrzf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_stzrzf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zbbcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *theta, double *phi, lapack_complex_double *u1, armpl_int_t ldu1, lapack_complex_double *u2, armpl_int_t ldu2, lapack_complex_double *v1t, armpl_int_t ldv1t, lapack_complex_double *v2t, armpl_int_t ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e);
armpl_int_t LAPACKE_zbbcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *theta, double *phi, lapack_complex_double *u1, armpl_int_t ldu1, lapack_complex_double *u2, armpl_int_t ldu2, lapack_complex_double *v1t, armpl_int_t ldv1t, lapack_complex_double *v2t, armpl_int_t ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_zbdsqr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, double *d, double *e, lapack_complex_double *vt, armpl_int_t ldvt, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zbdsqr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, double *d, double *e, lapack_complex_double *vt, armpl_int_t ldvt, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_zcgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, armpl_int_t *iter);
armpl_int_t LAPACKE_zcgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, lapack_complex_double *work, lapack_complex_float *swork, double *rwork, armpl_int_t *iter);
armpl_int_t LAPACKE_zcposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, armpl_int_t *iter);
armpl_int_t LAPACKE_zcposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, lapack_complex_double *work, lapack_complex_float *swork, double *rwork, armpl_int_t *iter);
armpl_int_t LAPACKE_zgbbrd(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, lapack_complex_double *ab, armpl_int_t ldab, double *d, double *e, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *pt, armpl_int_t ldpt, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zgbbrd_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, lapack_complex_double *ab, armpl_int_t ldab, double *d, double *e, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *pt, armpl_int_t ldpt, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgbcon(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zgbcon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double anorm, double *rcond, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgbequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgbequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgbequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgbequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgbrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zgbrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgbrfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zgbrfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgbsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgbsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgbsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *rpivot);
armpl_int_t LAPACKE_zgbsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgbsvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zgbsvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgbtrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, lapack_complex_double *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgbtrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, lapack_complex_double *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgbtrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgbtrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgebak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *scale, armpl_int_t m, lapack_complex_double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_zgebak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *scale, armpl_int_t m, lapack_complex_double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_zgebal(armpl_int_t matrix_layout, char job, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale);
armpl_int_t LAPACKE_zgebal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale);
armpl_int_t LAPACKE_zgebrd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *d, double *e, lapack_complex_double *tauq, lapack_complex_double *taup);
armpl_int_t LAPACKE_zgebrd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *d, double *e, lapack_complex_double *tauq, lapack_complex_double *taup, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgecon(armpl_int_t matrix_layout, char norm, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double anorm, double *rcond);
armpl_int_t LAPACKE_zgecon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double anorm, double *rcond, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgedmd(armpl_int_t matrix_layout, char jobs, char jobz, char jobr,char jobf, armpl_int_t whtsvd, armpl_int_t m,armpl_int_t n, lapack_complex_double* x,armpl_int_t ldx, lapack_complex_double* y,armpl_int_t ldy, armpl_int_t nrnk, double *tol, armpl_int_t k,lapack_complex_double* eigs, lapack_complex_double* z,armpl_int_t ldz, double* res,lapack_complex_double* b, armpl_int_t ldb,lapack_complex_double* zw, armpl_int_t lzw,lapack_complex_double* w, armpl_int_t ldw,lapack_complex_double* s, armpl_int_t lds);
armpl_int_t LAPACKE_zgedmd_work(armpl_int_t matrix_layout, char jobs, char jobz,char jobr, char jobf, armpl_int_t whtsvd,armpl_int_t m, armpl_int_t n,lapack_complex_double* x,armpl_int_t ldx, lapack_complex_double* y,armpl_int_t ldy, armpl_int_t nrnk, double *tol, armpl_int_t k,lapack_complex_double* eigs, lapack_complex_double* z,armpl_int_t ldz, double* res,lapack_complex_double* b, armpl_int_t ldb,lapack_complex_double* w, armpl_int_t ldw,lapack_complex_double* s, armpl_int_t lds,lapack_complex_double* zwork, armpl_int_t lzwork,double* work, armpl_int_t lwork,armpl_int_t* iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zgedmdq(armpl_int_t matrix_layout, char jobs, char jobz, char jobr,char jobq, char jobt, char jobf, armpl_int_t whtsvd,armpl_int_t m, armpl_int_t n, lapack_complex_double* f,armpl_int_t ldf, lapack_complex_double* x,armpl_int_t ldx, lapack_complex_double* y,armpl_int_t ldy, armpl_int_t nrnk, double* tol,armpl_int_t k, lapack_complex_double* eigs,lapack_complex_double* z, armpl_int_t ldz,double* res, lapack_complex_double* b,armpl_int_t ldb, lapack_complex_double* v,armpl_int_t ldv, lapack_complex_double* s, armpl_int_t lds);
armpl_int_t LAPACKE_zgedmdq_work(armpl_int_t matrix_layout, char jobs, char jobz,char jobr, char jobq, char jobt, char jobf,armpl_int_t whtsvd, armpl_int_t m, armpl_int_t n,lapack_complex_double* f, armpl_int_t ldf,lapack_complex_double* x, armpl_int_t ldx,lapack_complex_double* y, armpl_int_t ldy,armpl_int_t nrnk, double* tol, armpl_int_t k,lapack_complex_double* eigs,lapack_complex_double* z,armpl_int_t ldz, double* res,lapack_complex_double* b,armpl_int_t ldb, lapack_complex_double* v,armpl_int_t ldv, lapack_complex_double* s,armpl_int_t lds, lapack_complex_double* zwork,armpl_int_t lzwork, double* work,armpl_int_t lwork, armpl_int_t* iwork,armpl_int_t liwork);
armpl_int_t LAPACKE_zgeequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgeequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgeequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgeequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgees(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_Z_SELECT1 select, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *sdim, lapack_complex_double *w, lapack_complex_double *vs, armpl_int_t ldvs);
armpl_int_t LAPACKE_zgees_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_Z_SELECT1 select, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *sdim, lapack_complex_double *w, lapack_complex_double *vs, armpl_int_t ldvs, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zgeesx(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_Z_SELECT1 select, char sense, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *sdim, lapack_complex_double *w, lapack_complex_double *vs, armpl_int_t ldvs, double *rconde, double *rcondv);
armpl_int_t LAPACKE_zgeesx_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_Z_SELECT1 select, char sense, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *sdim, lapack_complex_double *w, lapack_complex_double *vs, armpl_int_t ldvs, double *rconde, double *rcondv, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zgeev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *w, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_zgeev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *w, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgeevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *w, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv);
armpl_int_t LAPACKE_zgeevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *w, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgehrd(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgehrd_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgejsv(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *sva, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, double *stat, armpl_int_t *istat);
armpl_int_t LAPACKE_zgejsv_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *sva, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, lapack_complex_double *cwork, armpl_int_t lwork, double *work, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zgelq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t tsize);
armpl_int_t LAPACKE_zgelq2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgelq2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work);
armpl_int_t LAPACKE_zgelq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t tsize, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgelqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgelqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgels(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgels_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgelsd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_zgelsd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zgelss(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_zgelss_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgelsy(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *jpvt, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_zgelsy_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *jpvt, double rcond, armpl_int_t *rank, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgemlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *t, armpl_int_t tsize, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zgemlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *t, armpl_int_t tsize, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgemqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *t, armpl_int_t tsize, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zgemqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *t, armpl_int_t tsize, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgemqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zgemqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work);
armpl_int_t LAPACKE_zgeqlf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgeqlf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgeqp3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *jpvt, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgeqp3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *jpvt, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgeqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t tsize);
armpl_int_t LAPACKE_zgeqr2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgeqr2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work);
armpl_int_t LAPACKE_zgeqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t tsize, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgeqrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgeqrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgeqrfp(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgeqrfp_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgeqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *work);
armpl_int_t LAPACKE_zgerfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zgerfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgerfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zgerfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgerqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_zgerqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgesdd(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *s, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *vt, armpl_int_t ldvt);
armpl_int_t LAPACKE_zgesdd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *s, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *vt, armpl_int_t ldvt, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgesvd(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *s, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *vt, armpl_int_t ldvt, double *superb);
armpl_int_t LAPACKE_zgesvd_work(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *s, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *vt, armpl_int_t ldvt, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgesvdq(armpl_int_t matrix_layout, char joba, char jobp, char jobr, char jobu, char jobv, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *s, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, armpl_int_t *numrank);
armpl_int_t LAPACKE_zgesvdq_work(armpl_int_t matrix_layout, char joba, char jobp, char jobr, char jobu, char jobv, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *s, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, armpl_int_t *numrank, armpl_int_t *iwork, armpl_int_t liwork, lapack_complex_double *cwork, armpl_int_t lcwork, double *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_zgesvdx(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *vt, armpl_int_t ldvt, armpl_int_t *superb);
armpl_int_t LAPACKE_zgesvdx_work(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *vt, armpl_int_t ldvt, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zgesvj(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *sva, armpl_int_t mv, lapack_complex_double *v, armpl_int_t ldv, double *stat);
armpl_int_t LAPACKE_zgesvj_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *sva, armpl_int_t mv, lapack_complex_double *v, armpl_int_t ldv, lapack_complex_double *cwork, armpl_int_t lwork, double *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_zgesvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *rpivot);
armpl_int_t LAPACKE_zgesvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgesvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zgesvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgetf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetrf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetrf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetri(armpl_int_t matrix_layout, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetri_work(armpl_int_t matrix_layout, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgetrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgetrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgetsls(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgetsls_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgetsqrhrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb1, armpl_int_t nb1, armpl_int_t nb2, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgetsqrhrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb1, armpl_int_t nb1, armpl_int_t nb2, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggbak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *lscale, const double *rscale, armpl_int_t m, lapack_complex_double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_zggbak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *lscale, const double *rscale, armpl_int_t m, lapack_complex_double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_zggbal(armpl_int_t matrix_layout, char job, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale);
armpl_int_t LAPACKE_zggbal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *work);
armpl_int_t LAPACKE_zgges(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vsl, armpl_int_t ldvsl, lapack_complex_double *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_zgges3(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vsl, armpl_int_t ldvsl, lapack_complex_double *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_zgges3_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vsl, armpl_int_t ldvsl, lapack_complex_double *vsr, armpl_int_t ldvsr, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zgges_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vsl, armpl_int_t ldvsl, lapack_complex_double *vsr, armpl_int_t ldvsr, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zggesx(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, char sense, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vsl, armpl_int_t ldvsl, lapack_complex_double *vsr, armpl_int_t ldvsr, double *rconde, double *rcondv);
armpl_int_t LAPACKE_zggesx_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, char sense, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, armpl_int_t *sdim, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vsl, armpl_int_t ldvsl, lapack_complex_double *vsr, armpl_int_t ldvsr, double *rconde, double *rcondv, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zggev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_zggev3(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_zggev3_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zggev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zggevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv);
armpl_int_t LAPACKE_zggevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zggglm(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *d, lapack_complex_double *x, lapack_complex_double *y);
armpl_int_t LAPACKE_zggglm_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *d, lapack_complex_double *x, lapack_complex_double *y, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgghd3(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zgghd3_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgghrd(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zgghrd_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zgglse(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *c, lapack_complex_double *d, lapack_complex_double *x);
armpl_int_t LAPACKE_zgglse_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *c, lapack_complex_double *d, lapack_complex_double *x, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggqrf(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *taua, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *taub);
armpl_int_t LAPACKE_zggqrf_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *taua, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *taub, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggrqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *taua, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *taub);
armpl_int_t LAPACKE_zggrqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *taua, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *taub, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggsvd3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *alpha, double *beta, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, lapack_complex_double *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_zggsvd3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *alpha, double *beta, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zggsvp3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, lapack_complex_double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_zggsvp3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, lapack_complex_double *q, armpl_int_t ldq, armpl_int_t *iwork, double *rwork, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgtcon(char norm, armpl_int_t n, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du, const lapack_complex_double *du2, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zgtcon_work(char norm, armpl_int_t n, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du, const lapack_complex_double *du2, const armpl_int_t *ipiv, double anorm, double *rcond, lapack_complex_double *work);
armpl_int_t LAPACKE_zgtrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du, const lapack_complex_double *dlf, const lapack_complex_double *df, const lapack_complex_double *duf, const lapack_complex_double *du2, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zgtrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du, const lapack_complex_double *dlf, const lapack_complex_double *df, const lapack_complex_double *duf, const lapack_complex_double *du2, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgtsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *dl, lapack_complex_double *d, lapack_complex_double *du, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgtsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *dl, lapack_complex_double *d, lapack_complex_double *du, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgtsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du, lapack_complex_double *dlf, lapack_complex_double *df, lapack_complex_double *duf, lapack_complex_double *du2, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zgtsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du, lapack_complex_double *dlf, lapack_complex_double *df, lapack_complex_double *duf, lapack_complex_double *du2, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zgttrf(armpl_int_t n, lapack_complex_double *dl, lapack_complex_double *d, lapack_complex_double *du, lapack_complex_double *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgttrf_work(armpl_int_t n, lapack_complex_double *dl, lapack_complex_double *d, lapack_complex_double *du, lapack_complex_double *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgttrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du, const lapack_complex_double *du2, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgttrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du, const lapack_complex_double *du2, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhbev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhbev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zhbevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhbevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhbevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbgst(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *bb, armpl_int_t ldbb, lapack_complex_double *x, armpl_int_t ldx);
armpl_int_t LAPACKE_zhbgst_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *bb, armpl_int_t ldbb, lapack_complex_double *x, armpl_int_t ldx, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zhbgv(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *bb, armpl_int_t ldbb, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbgv_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *bb, armpl_int_t ldbb, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zhbgvd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *bb, armpl_int_t ldbb, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbgvd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *bb, armpl_int_t ldbb, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhbgvx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *bb, armpl_int_t ldbb, lapack_complex_double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbgvx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *bb, armpl_int_t ldbb, lapack_complex_double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbtrd(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *d, double *e, lapack_complex_double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_zhbtrd_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab, double *d, double *e, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *work);
armpl_int_t LAPACKE_zhecon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zhecon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zhecon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, double anorm, double *rcond, lapack_complex_double *work);
armpl_int_t LAPACKE_zhecon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond, lapack_complex_double *work);
armpl_int_t LAPACKE_zheequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zheequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *s, double *scond, double *amax, lapack_complex_double *work);
armpl_int_t LAPACKE_zheev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_zheev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_zheev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *w, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zheev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *w, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zheevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_zheevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_zheevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *w, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zheevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *w, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zheevr(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_zheevr_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_zheevr_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *isuppz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zheevr_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *isuppz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zheevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zheevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zheevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zheevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhegst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhegst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhegv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_zhegv_2stage(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_zhegv_2stage_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *w, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhegv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *w, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhegvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_zhegvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double *w, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhegvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhegvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zherfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zherfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zherfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zherfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zhesv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhesv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhesv_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhesv_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhesv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhesv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *e, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhesv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *e, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhesv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhesvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zhesvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhesvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zhesvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zheswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_zheswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_zhetrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *d, double *e, lapack_complex_double *tau);
armpl_int_t LAPACKE_zhetrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, double *d, double *e, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetrf_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2);
armpl_int_t LAPACKE_zhetrf_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *e, armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_zhetri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t nb);
armpl_int_t LAPACKE_zhetri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *work);
armpl_int_t LAPACKE_zhetrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work);
armpl_int_t LAPACKE_zhetrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhfrk(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, double alpha, const lapack_complex_double *a, armpl_int_t lda, double beta, lapack_complex_double *c);
armpl_int_t LAPACKE_zhfrk_work(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, double alpha, const lapack_complex_double *a, armpl_int_t lda, double beta, lapack_complex_double *c);
armpl_int_t LAPACKE_zhgeqz(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *h, armpl_int_t ldh, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhgeqz_work(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *h, armpl_int_t ldh, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhpcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zhpcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, const armpl_int_t *ipiv, double anorm, double *rcond, lapack_complex_double *work);
armpl_int_t LAPACKE_zhpev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *ap, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhpev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *ap, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zhpevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *ap, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhpevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, lapack_complex_double *ap, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhpevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *ap, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhpevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *ap, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhpgst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, lapack_complex_double *ap, const lapack_complex_double *bp);
armpl_int_t LAPACKE_zhpgst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, lapack_complex_double *ap, const lapack_complex_double *bp);
armpl_int_t LAPACKE_zhpgv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *ap, lapack_complex_double *bp, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhpgv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *ap, lapack_complex_double *bp, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zhpgvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *ap, lapack_complex_double *bp, double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhpgvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, lapack_complex_double *ap, lapack_complex_double *bp, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhpgvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *ap, lapack_complex_double *bp, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhpgvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, lapack_complex_double *ap, lapack_complex_double *bp, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const lapack_complex_double *afp, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zhprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const lapack_complex_double *afp, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zhpsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *ap, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhpsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *ap, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhpsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, lapack_complex_double *afp, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zhpsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, lapack_complex_double *afp, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zhptrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, double *d, double *e, lapack_complex_double *tau);
armpl_int_t LAPACKE_zhptrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, double *d, double *e, lapack_complex_double *tau);
armpl_int_t LAPACKE_zhptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, const armpl_int_t *ipiv, lapack_complex_double *work);
armpl_int_t LAPACKE_zhptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhsein(armpl_int_t matrix_layout, char job, char eigsrc, char initv, const armpl_int_t *select, armpl_int_t n, const lapack_complex_double *h, armpl_int_t ldh, lapack_complex_double *w, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_zhsein_work(armpl_int_t matrix_layout, char job, char eigsrc, char initv, const armpl_int_t *select, armpl_int_t n, const lapack_complex_double *h, armpl_int_t ldh, lapack_complex_double *w, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, lapack_complex_double *work, double *rwork, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_zhseqr(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *h, armpl_int_t ldh, lapack_complex_double *w, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhseqr_work(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *h, armpl_int_t ldh, lapack_complex_double *w, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zlacgv(armpl_int_t n, lapack_complex_double *x, armpl_int_t incx);
armpl_int_t LAPACKE_zlacgv_work(armpl_int_t n, lapack_complex_double *x, armpl_int_t incx);
armpl_int_t LAPACKE_zlacn2(armpl_int_t n, lapack_complex_double *v, lapack_complex_double *x, double *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_zlacn2_work(armpl_int_t n, lapack_complex_double *v, lapack_complex_double *x, double *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_zlacp2(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zlacp2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zlacpy(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zlacpy_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zlacrm(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zlacrm_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, lapack_complex_double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_zlag2c(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_float *sa, armpl_int_t ldsa);
armpl_int_t LAPACKE_zlag2c_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_float *sa, armpl_int_t ldsa);
double LAPACKE_zlangb(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double* ab, armpl_int_t ldab);
double LAPACKE_zlangb_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double* ab, armpl_int_t ldab, double* work);
double LAPACKE_zlange(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
double LAPACKE_zlange_work(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *work);
double LAPACKE_zlanhe(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
double LAPACKE_zlanhe_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *work);
double LAPACKE_zlansy(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
double LAPACKE_zlansy_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *work);
double LAPACKE_zlantr(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
double LAPACKE_zlantr_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *work);
armpl_int_t LAPACKE_zlapmr(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, lapack_complex_double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_zlapmr_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, lapack_complex_double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_zlapmt(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, lapack_complex_double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_zlapmt_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, lapack_complex_double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_zlarcm(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zlarcm_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_zlarfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zlarfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_zlarfg(armpl_int_t n, lapack_complex_double *alpha, lapack_complex_double *x, armpl_int_t incx, lapack_complex_double *tau);
armpl_int_t LAPACKE_zlarfg_work(armpl_int_t n, lapack_complex_double *alpha, lapack_complex_double *x, armpl_int_t incx, lapack_complex_double *tau);
armpl_int_t LAPACKE_zlarft(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *tau, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zlarft_work(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *tau, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zlarfx(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const lapack_complex_double *v, lapack_complex_double tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work);
armpl_int_t LAPACKE_zlarfx_work(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const lapack_complex_double *v, lapack_complex_double tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work);
armpl_int_t LAPACKE_zlarnv(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, lapack_complex_double *x);
armpl_int_t LAPACKE_zlarnv_work(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, lapack_complex_double *x);
armpl_int_t LAPACKE_zlascl(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, double cfrom, double cto, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlascl_work(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, double cfrom, double cto, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlaset(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, lapack_complex_double alpha, lapack_complex_double beta, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlaset_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, lapack_complex_double alpha, lapack_complex_double beta, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlassq(armpl_int_t n, lapack_complex_double *x, armpl_int_t incx, double *scale, double *sumsq);
armpl_int_t LAPACKE_zlassq_work(armpl_int_t n, lapack_complex_double *x, armpl_int_t incx, double *scale, double *sumsq);
armpl_int_t LAPACKE_zlaswp(armpl_int_t matrix_layout, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_zlaswp_work(armpl_int_t matrix_layout, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_zlauum(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlauum_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpbcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *ab, armpl_int_t ldab, double anorm, double *rcond);
armpl_int_t LAPACKE_zpbcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *ab, armpl_int_t ldab, double anorm, double *rcond, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zpbequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *ab, armpl_int_t ldab, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpbequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *ab, armpl_int_t ldab, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpbrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *afb, armpl_int_t ldafb, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zpbrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *afb, armpl_int_t ldafb, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zpbstf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, lapack_complex_double *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_zpbstf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, lapack_complex_double *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_zpbsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpbsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpbsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *afb, armpl_int_t ldafb, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zpbsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *afb, armpl_int_t ldafb, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zpbtrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_zpbtrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, lapack_complex_double *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_zpbtrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpbtrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpftrf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, lapack_complex_double *a);
armpl_int_t LAPACKE_zpftrf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, lapack_complex_double *a);
armpl_int_t LAPACKE_zpftri(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, lapack_complex_double *a);
armpl_int_t LAPACKE_zpftri_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, lapack_complex_double *a);
armpl_int_t LAPACKE_zpftrs(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpftrs_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpocon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double anorm, double *rcond);
armpl_int_t LAPACKE_zpocon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double anorm, double *rcond, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zpoequ(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpoequ_work(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpoequb(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpoequb_work(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zporfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zporfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zporfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const double *s, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zporfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const double *s, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zposvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zposvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zposvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zposvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zpotrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotrf2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotrf2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpotrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zppcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, double anorm, double *rcond);
armpl_int_t LAPACKE_zppcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, double anorm, double *rcond, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zppequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zppequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const lapack_complex_double *afp, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zpprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const lapack_complex_double *afp, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zppsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *ap, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zppsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *ap, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zppsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *ap, lapack_complex_double *afp, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zppsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *ap, lapack_complex_double *afp, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zpptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap);
armpl_int_t LAPACKE_zpptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap);
armpl_int_t LAPACKE_zpptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap);
armpl_int_t LAPACKE_zpptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap);
armpl_int_t LAPACKE_zpptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpstrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, double tol);
armpl_int_t LAPACKE_zpstrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, double tol, double *work);
armpl_int_t LAPACKE_zptcon(armpl_int_t n, const double *d, const lapack_complex_double *e, double anorm, double *rcond);
armpl_int_t LAPACKE_zptcon_work(armpl_int_t n, const double *d, const lapack_complex_double *e, double anorm, double *rcond, double *work);
armpl_int_t LAPACKE_zpteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zpteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, lapack_complex_double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_zptrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *d, const lapack_complex_double *e, const double *df, const lapack_complex_double *ef, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zptrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *d, const lapack_complex_double *e, const double *df, const lapack_complex_double *ef, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zptsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *d, lapack_complex_double *e, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zptsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *d, lapack_complex_double *e, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zptsvx(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const double *d, const lapack_complex_double *e, double *df, lapack_complex_double *ef, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zptsvx_work(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const double *d, const lapack_complex_double *e, double *df, lapack_complex_double *ef, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zpttrf(armpl_int_t n, double *d, lapack_complex_double *e);
armpl_int_t LAPACKE_zpttrf_work(armpl_int_t n, double *d, lapack_complex_double *e);
armpl_int_t LAPACKE_zpttrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *d, const lapack_complex_double *e, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpttrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *d, const lapack_complex_double *e, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zspcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zspcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, const armpl_int_t *ipiv, double anorm, double *rcond, lapack_complex_double *work);
armpl_int_t LAPACKE_zsprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const lapack_complex_double *afp, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zsprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const lapack_complex_double *afp, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zspsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *ap, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zspsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *ap, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zspsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, lapack_complex_double *afp, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zspsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, lapack_complex_double *afp, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zsptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *ap, const armpl_int_t *ipiv, lapack_complex_double *work);
armpl_int_t LAPACKE_zsptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zstedc(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zstedc_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, lapack_complex_double *z, armpl_int_t ldz, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zstegr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_zstegr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zstein(armpl_int_t matrix_layout, armpl_int_t n, const double *d, const double *e, armpl_int_t m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *ifailv);
armpl_int_t LAPACKE_zstein_work(armpl_int_t matrix_layout, armpl_int_t n, const double *d, const double *e, armpl_int_t m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, lapack_complex_double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifailv);
armpl_int_t LAPACKE_zstemr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac);
armpl_int_t LAPACKE_zstemr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, double *w, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zsteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, lapack_complex_double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zsteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, lapack_complex_double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_zsycon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zsycon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zsycon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, double anorm, double *rcond, lapack_complex_double *work);
armpl_int_t LAPACKE_zsycon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond, lapack_complex_double *work);
armpl_int_t LAPACKE_zsyconv(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *e);
armpl_int_t LAPACKE_zsyconv_work(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *e);
armpl_int_t LAPACKE_zsyequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zsyequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *s, double *scond, double *amax, lapack_complex_double *work);
armpl_int_t LAPACKE_zsyr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double alpha, const lapack_complex_double *x, armpl_int_t incx, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zsyr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double alpha, const lapack_complex_double *x, armpl_int_t incx, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_zsyrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zsyrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zsyrfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zsyrfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zsysv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *e, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *e, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysv_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zsysvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, lapack_complex_double *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zsysvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zsysvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_zsyswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_zsyswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_zsytrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytrf_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2);
armpl_int_t LAPACKE_zsytrf_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *e, armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_zsytri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t nb);
armpl_int_t LAPACKE_zsytri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *work);
armpl_int_t LAPACKE_zsytrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work);
armpl_int_t LAPACKE_zsytrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *e, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_aa_2stage(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_aa_2stage_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tb, armpl_int_t ltb, armpl_int_t *ipiv, armpl_int_t *ipiv2, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const armpl_int_t *ipiv, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztbcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *ab, armpl_int_t ldab, double *rcond);
armpl_int_t LAPACKE_ztbcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *ab, armpl_int_t ldab, double *rcond, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_ztbrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *b, armpl_int_t ldb, const lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_ztbrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, const lapack_complex_double *b, armpl_int_t ldb, const lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_ztbtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztbtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const lapack_complex_double *ab, armpl_int_t ldab, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztfsm(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, lapack_complex_double alpha, const lapack_complex_double *a, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztfsm_work(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, lapack_complex_double alpha, const lapack_complex_double *a, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztftri(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, lapack_complex_double *a);
armpl_int_t LAPACKE_ztftri_work(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, lapack_complex_double *a);
armpl_int_t LAPACKE_ztfttp(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *arf, lapack_complex_double *ap);
armpl_int_t LAPACKE_ztfttp_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *arf, lapack_complex_double *ap);
armpl_int_t LAPACKE_ztfttr(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *arf, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztfttr_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *arf, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztgevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_double *s, armpl_int_t lds, const lapack_complex_double *p, armpl_int_t ldp, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ztgevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_double *s, armpl_int_t lds, const lapack_complex_double *p, armpl_int_t ldp, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_ztgexc(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ztgexc_work(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ztgsen(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *m, double *pl, double *pr, double *dif);
armpl_int_t LAPACKE_ztgsen_work(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *alpha, lapack_complex_double *beta, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *z, armpl_int_t ldz, armpl_int_t *m, double *pl, double *pr, double *dif, lapack_complex_double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ztgsja(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double tola, double tolb, double *alpha, double *beta, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, lapack_complex_double *q, armpl_int_t ldq, armpl_int_t *ncycle);
armpl_int_t LAPACKE_ztgsja_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, double tola, double tolb, double *alpha, double *beta, lapack_complex_double *u, armpl_int_t ldu, lapack_complex_double *v, armpl_int_t ldv, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *work, armpl_int_t *ncycle);
armpl_int_t LAPACKE_ztgsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, const lapack_complex_double *vl, armpl_int_t ldvl, const lapack_complex_double *vr, armpl_int_t ldvr, double *s, double *dif, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ztgsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, const lapack_complex_double *vl, armpl_int_t ldvl, const lapack_complex_double *vr, armpl_int_t ldvr, double *s, double *dif, armpl_int_t mm, armpl_int_t *m, lapack_complex_double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ztgsyl(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *c, armpl_int_t ldc, const lapack_complex_double *d, armpl_int_t ldd, const lapack_complex_double *e, armpl_int_t lde, lapack_complex_double *f, armpl_int_t ldf, double *scale, double *dif);
armpl_int_t LAPACKE_ztgsyl_work(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *c, armpl_int_t ldc, const lapack_complex_double *d, armpl_int_t ldd, const lapack_complex_double *e, armpl_int_t lde, lapack_complex_double *f, armpl_int_t ldf, double *scale, double *dif, lapack_complex_double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ztpcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const lapack_complex_double *ap, double *rcond);
armpl_int_t LAPACKE_ztpcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const lapack_complex_double *ap, double *rcond, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_ztpmqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztpmqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work);
armpl_int_t LAPACKE_ztpqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ztpqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ztpqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ztpqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *work);
armpl_int_t LAPACKE_ztprfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztprfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const lapack_complex_double *v, armpl_int_t ldv, const lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_ztprfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const lapack_complex_double *b, armpl_int_t ldb, const lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_ztprfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, const lapack_complex_double *b, armpl_int_t ldb, const lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_ztptri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, lapack_complex_double *ap);
armpl_int_t LAPACKE_ztptri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, lapack_complex_double *ap);
armpl_int_t LAPACKE_ztptrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztptrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *ap, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztpttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *ap, lapack_complex_double *arf);
armpl_int_t LAPACKE_ztpttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *ap, lapack_complex_double *arf);
armpl_int_t LAPACKE_ztpttr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztpttr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztrcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *rcond);
armpl_int_t LAPACKE_ztrcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, double *rcond, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_ztrevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ztrevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *vl, armpl_int_t ldvl, lapack_complex_double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_ztrexc(armpl_int_t matrix_layout, char compq, armpl_int_t n, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *q, armpl_int_t ldq, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ztrexc_work(armpl_int_t matrix_layout, char compq, armpl_int_t n, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *q, armpl_int_t ldq, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ztrrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, const lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_ztrrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, const lapack_complex_double *x, armpl_int_t ldx, double *ferr, double *berr, lapack_complex_double *work, double *rwork);
armpl_int_t LAPACKE_ztrsen(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *w, armpl_int_t *m, double *s, double *sep);
armpl_int_t LAPACKE_ztrsen_work(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, lapack_complex_double *t, armpl_int_t ldt, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *w, armpl_int_t *m, double *s, double *sep, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ztrsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_double *t, armpl_int_t ldt, const lapack_complex_double *vl, armpl_int_t ldvl, const lapack_complex_double *vr, armpl_int_t ldvr, double *s, double *sep, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ztrsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const lapack_complex_double *t, armpl_int_t ldt, const lapack_complex_double *vl, armpl_int_t ldvl, const lapack_complex_double *vr, armpl_int_t ldvr, double *s, double *sep, armpl_int_t mm, armpl_int_t *m, lapack_complex_double *work, armpl_int_t ldwork, double *rwork);
armpl_int_t LAPACKE_ztrsyl(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *c, armpl_int_t ldc, double *scale);
armpl_int_t LAPACKE_ztrsyl_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *b, armpl_int_t ldb, lapack_complex_double *c, armpl_int_t ldc, double *scale);
armpl_int_t LAPACKE_ztrsyl3(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const lapack_complex_double* a, armpl_int_t lda, const lapack_complex_double* b, armpl_int_t ldb, lapack_complex_double* c, armpl_int_t ldc, double* scale);
armpl_int_t LAPACKE_ztrsyl3_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const lapack_complex_double* a, armpl_int_t lda, const lapack_complex_double* b, armpl_int_t ldb, lapack_complex_double* c, armpl_int_t ldc, double* scale, double* swork, armpl_int_t ldswork);
armpl_int_t LAPACKE_ztrtri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztrtri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztrtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztrtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztrttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *arf);
armpl_int_t LAPACKE_ztrttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *arf);
armpl_int_t LAPACKE_ztrttp(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *ap);
armpl_int_t LAPACKE_ztrttp_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *ap);
armpl_int_t LAPACKE_ztzrzf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau);
armpl_int_t LAPACKE_ztzrzf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunbdb(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_double *x11, armpl_int_t ldx11, lapack_complex_double *x12, armpl_int_t ldx12, lapack_complex_double *x21, armpl_int_t ldx21, lapack_complex_double *x22, armpl_int_t ldx22, double *theta, double *phi, lapack_complex_double *taup1, lapack_complex_double *taup2, lapack_complex_double *tauq1, lapack_complex_double *tauq2);
armpl_int_t LAPACKE_zunbdb_work(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_double *x11, armpl_int_t ldx11, lapack_complex_double *x12, armpl_int_t ldx12, lapack_complex_double *x21, armpl_int_t ldx21, lapack_complex_double *x22, armpl_int_t ldx22, double *theta, double *phi, lapack_complex_double *taup1, lapack_complex_double *taup2, lapack_complex_double *tauq1, lapack_complex_double *tauq2, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zuncsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_double *x11, armpl_int_t ldx11, lapack_complex_double *x12, armpl_int_t ldx12, lapack_complex_double *x21, armpl_int_t ldx21, lapack_complex_double *x22, armpl_int_t ldx22, double *theta, lapack_complex_double *u1, armpl_int_t ldu1, lapack_complex_double *u2, armpl_int_t ldu2, lapack_complex_double *v1t, armpl_int_t ldv1t, lapack_complex_double *v2t, armpl_int_t ldv2t);
armpl_int_t LAPACKE_zuncsd2by1(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_double *x11, armpl_int_t ldx11, lapack_complex_double *x21, armpl_int_t ldx21, double *theta, lapack_complex_double *u1, armpl_int_t ldu1, lapack_complex_double *u2, armpl_int_t ldu2, lapack_complex_double *v1t, armpl_int_t ldv1t);
armpl_int_t LAPACKE_zuncsd2by1_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_double *x11, armpl_int_t ldx11, lapack_complex_double *x21, armpl_int_t ldx21, double *theta, lapack_complex_double *u1, armpl_int_t ldu1, lapack_complex_double *u2, armpl_int_t ldu2, lapack_complex_double *v1t, armpl_int_t ldv1t, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zuncsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, lapack_complex_double *x11, armpl_int_t ldx11, lapack_complex_double *x12, armpl_int_t ldx12, lapack_complex_double *x21, armpl_int_t ldx21, lapack_complex_double *x22, armpl_int_t ldx22, double *theta, lapack_complex_double *u1, armpl_int_t ldu1, lapack_complex_double *u2, armpl_int_t ldu2, lapack_complex_double *v1t, armpl_int_t ldv1t, lapack_complex_double *v2t, armpl_int_t ldv2t, lapack_complex_double *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zungbr(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau);
armpl_int_t LAPACKE_zungbr_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunghr(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau);
armpl_int_t LAPACKE_zunghr_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunglq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau);
armpl_int_t LAPACKE_zunglq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungql(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau);
armpl_int_t LAPACKE_zungql_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau);
armpl_int_t LAPACKE_zungqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungrq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau);
armpl_int_t LAPACKE_zungrq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau);
armpl_int_t LAPACKE_zungtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungtsqr_row(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb, armpl_int_t nb, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zungtsqr_row_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t mb, armpl_int_t nb, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmbr(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmbr_work(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmhr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmhr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmql(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmql_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmrq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmrq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmrz(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmrz_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zupgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, const lapack_complex_double *tau, lapack_complex_double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_zupgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *ap, const lapack_complex_double *tau, lapack_complex_double *q, armpl_int_t ldq, lapack_complex_double *work);
armpl_int_t LAPACKE_zupmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const lapack_complex_double *ap, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zupmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const lapack_complex_double *ap, const lapack_complex_double *tau, lapack_complex_double *c, armpl_int_t ldc, lapack_complex_double *work);

/* lapacke (C interfaces to LAPACK) utility routines */
armpl_int_t LAPACKE_c_nancheck(armpl_int_t n, const lapack_complex_float *x, armpl_int_t incx);
armpl_int_t LAPACKE_cgb_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float *ab, armpl_int_t ldab);
void LAPACKE_cgb_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_cge_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
void LAPACKE_cge_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float* in, armpl_int_t ldin, lapack_complex_float* out, armpl_int_t ldout);
armpl_int_t LAPACKE_cgg_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
void LAPACKE_cgg_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_float* in, armpl_int_t ldin, lapack_complex_float* out, armpl_int_t ldout);
armpl_int_t LAPACKE_cgt_nancheck(armpl_int_t n, const lapack_complex_float *dl, const lapack_complex_float *d, const lapack_complex_float *du);
armpl_int_t LAPACKE_chb_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_float* ab, armpl_int_t ldab);
void LAPACKE_chb_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_che_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
void LAPACKE_che_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_chp_nancheck(armpl_int_t n, const lapack_complex_float *ap);
void LAPACKE_chp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *in, lapack_complex_float *out);
armpl_int_t LAPACKE_chs_nancheck(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
void LAPACKE_chs_trans(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_cpb_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_float* ab, armpl_int_t ldab);
void LAPACKE_cpb_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_cpf_nancheck(armpl_int_t n, const lapack_complex_float *a);
void LAPACKE_cpf_trans(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_float *in, lapack_complex_float *out);
armpl_int_t LAPACKE_cpo_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
void LAPACKE_cpo_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_cpp_nancheck(armpl_int_t n, const lapack_complex_float *ap);
void LAPACKE_cpp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *in, lapack_complex_float *out);
armpl_int_t LAPACKE_cpt_nancheck(armpl_int_t n, const float *d, const lapack_complex_float *e);
armpl_int_t LAPACKE_csp_nancheck(armpl_int_t n, const lapack_complex_float *ap);
void LAPACKE_csp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *in, lapack_complex_float *out);
armpl_int_t LAPACKE_cst_nancheck(armpl_int_t n, const lapack_complex_float *d, const lapack_complex_float *e);
armpl_int_t LAPACKE_csy_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
void LAPACKE_csy_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_ctb_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const lapack_complex_float* ab, armpl_int_t ldab);
void LAPACKE_ctb_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_ctf_nancheck(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, const lapack_complex_float *a);
void LAPACKE_ctf_trans(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, const lapack_complex_float *in, lapack_complex_float *out);
armpl_int_t LAPACKE_ctp_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const lapack_complex_float *ap);
void LAPACKE_ctp_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const lapack_complex_float *in, lapack_complex_float *out);
armpl_int_t LAPACKE_ctr_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
void LAPACKE_ctr_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_ctz_nancheck(armpl_int_t matrix_layout, char direct, char uplo, char diag, armpl_int_t m, armpl_int_t n, const lapack_complex_float *a, armpl_int_t lda);
void LAPACKE_ctz_trans(armpl_int_t matrix_layout, char direct, char uplo, char diag, armpl_int_t m, armpl_int_t n, const lapack_complex_float *in, armpl_int_t ldin, lapack_complex_float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_d_nancheck(armpl_int_t n, const double *x, armpl_int_t incx);
armpl_int_t LAPACKE_dgb_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab);
void LAPACKE_dgb_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_dge_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda);
void LAPACKE_dge_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double* in, armpl_int_t ldin, double* out, armpl_int_t ldout);
armpl_int_t LAPACKE_dgg_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda);
void LAPACKE_dgg_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double* in, armpl_int_t ldin, double* out, armpl_int_t ldout);
armpl_int_t LAPACKE_dgt_nancheck(armpl_int_t n, const double *dl, const double *d, const double *du);
armpl_int_t LAPACKE_dhs_nancheck(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda);
void LAPACKE_dhs_trans(armpl_int_t matrix_layout, armpl_int_t n, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_dpb_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double* ab, armpl_int_t ldab);
void LAPACKE_dpb_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_dpf_nancheck(armpl_int_t n, const double *a);
void LAPACKE_dpf_trans(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *in, double *out);
armpl_int_t LAPACKE_dpo_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda);
void LAPACKE_dpo_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_dpp_nancheck(armpl_int_t n, const double *ap);
void LAPACKE_dpp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *in, double *out);
armpl_int_t LAPACKE_dpt_nancheck(armpl_int_t n, const double *d, const double *e);
armpl_int_t LAPACKE_dsb_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double* ab, armpl_int_t ldab);
void LAPACKE_dsb_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_dsp_nancheck(armpl_int_t n, const double *ap);
void LAPACKE_dsp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *in, double *out);
armpl_int_t LAPACKE_dst_nancheck(armpl_int_t n, const double *d, const double *e);
armpl_int_t LAPACKE_dsy_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda);
void LAPACKE_dsy_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_dtb_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const double* ab, armpl_int_t ldab);
void LAPACKE_dtb_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_dtf_nancheck(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, const double *a);
void LAPACKE_dtf_trans(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, const double *in, double *out);
armpl_int_t LAPACKE_dtp_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const double *ap);
void LAPACKE_dtp_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const double *in, double *out);
armpl_int_t LAPACKE_dtr_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const double *a, armpl_int_t lda);
void LAPACKE_dtr_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_dtz_nancheck(armpl_int_t matrix_layout, char direct, char uplo, char diag, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda);
void LAPACKE_dtz_trans(armpl_int_t matrix_layout, char direct, char uplo, char diag, armpl_int_t m, armpl_int_t n, const double *in, armpl_int_t ldin, double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_lsame(char ca, char cb);
armpl_int_t LAPACKE_s_nancheck(armpl_int_t n, const float *x, armpl_int_t incx);
armpl_int_t LAPACKE_sgb_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab);
void LAPACKE_sgb_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_sge_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda);
void LAPACKE_sge_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float* in, armpl_int_t ldin, float* out, armpl_int_t ldout);
armpl_int_t LAPACKE_sgg_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda);
void LAPACKE_sgg_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float* in, armpl_int_t ldin, float* out, armpl_int_t ldout);
armpl_int_t LAPACKE_sgt_nancheck(armpl_int_t n, const float *dl, const float *d, const float *du);
armpl_int_t LAPACKE_shs_nancheck(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda);
void LAPACKE_shs_trans(armpl_int_t matrix_layout, armpl_int_t n, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_spb_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float* ab, armpl_int_t ldab);
void LAPACKE_spb_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_spf_nancheck(armpl_int_t n, const float *a);
void LAPACKE_spf_trans(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *in, float *out);
armpl_int_t LAPACKE_spo_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda);
void LAPACKE_spo_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_spp_nancheck(armpl_int_t n, const float *ap);
void LAPACKE_spp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *in, float *out);
armpl_int_t LAPACKE_spt_nancheck(armpl_int_t n, const float *d, const float *e);
armpl_int_t LAPACKE_ssb_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float* ab, armpl_int_t ldab);
void LAPACKE_ssb_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_ssp_nancheck(armpl_int_t n, const float *ap);
void LAPACKE_ssp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *in, float *out);
armpl_int_t LAPACKE_sst_nancheck(armpl_int_t n, const float *d, const float *e);
armpl_int_t LAPACKE_ssy_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda);
void LAPACKE_ssy_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_stb_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const float* ab, armpl_int_t ldab);
void LAPACKE_stb_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_stf_nancheck(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, const float *a);
void LAPACKE_stf_trans(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, const float *in, float *out);
armpl_int_t LAPACKE_stp_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const float *ap);
void LAPACKE_stp_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const float *in, float *out);
armpl_int_t LAPACKE_str_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const float *a, armpl_int_t lda);
void LAPACKE_str_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
armpl_int_t LAPACKE_stz_nancheck(armpl_int_t matrix_layout, char direct, char uplo, char diag, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda);
void LAPACKE_stz_trans(armpl_int_t matrix_layout, char direct, char uplo, char diag, armpl_int_t m, armpl_int_t n, const float *in, armpl_int_t ldin, float *out, armpl_int_t ldout);
void LAPACKE_xerbla(const char *name, armpl_int_t info);
armpl_int_t LAPACKE_z_nancheck(armpl_int_t n, const lapack_complex_double *x, armpl_int_t incx);
armpl_int_t LAPACKE_zgb_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double *ab, armpl_int_t ldab);
void LAPACKE_zgb_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_zge_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
void LAPACKE_zge_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double* in, armpl_int_t ldin, lapack_complex_double* out, armpl_int_t ldout);
armpl_int_t LAPACKE_zgg_nancheck(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
void LAPACKE_zgg_trans(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const lapack_complex_double* in, armpl_int_t ldin, lapack_complex_double* out, armpl_int_t ldout);
armpl_int_t LAPACKE_zgt_nancheck(armpl_int_t n, const lapack_complex_double *dl, const lapack_complex_double *d, const lapack_complex_double *du);
armpl_int_t LAPACKE_zhb_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_double* ab, armpl_int_t ldab);
void LAPACKE_zhb_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_zhe_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
void LAPACKE_zhe_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_zhp_nancheck(armpl_int_t n, const lapack_complex_double *ap);
void LAPACKE_zhp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *in, lapack_complex_double *out);
armpl_int_t LAPACKE_zhs_nancheck(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
void LAPACKE_zhs_trans(armpl_int_t matrix_layout, armpl_int_t n, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_zpb_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_double* ab, armpl_int_t ldab);
void LAPACKE_zpb_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_zpf_nancheck(armpl_int_t n, const lapack_complex_double *a);
void LAPACKE_zpf_trans(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const lapack_complex_double *in, lapack_complex_double *out);
armpl_int_t LAPACKE_zpo_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
void LAPACKE_zpo_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_zpp_nancheck(armpl_int_t n, const lapack_complex_double *ap);
void LAPACKE_zpp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *in, lapack_complex_double *out);
armpl_int_t LAPACKE_zpt_nancheck(armpl_int_t n, const double *d, const lapack_complex_double *e);
armpl_int_t LAPACKE_zsp_nancheck(armpl_int_t n, const lapack_complex_double *ap);
void LAPACKE_zsp_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *in, lapack_complex_double *out);
armpl_int_t LAPACKE_zst_nancheck(armpl_int_t n, const lapack_complex_double *d, const lapack_complex_double *e);
armpl_int_t LAPACKE_zsy_nancheck(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
void LAPACKE_zsy_trans(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_ztb_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const lapack_complex_double* ab, armpl_int_t ldab);
void LAPACKE_ztb_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_ztf_nancheck(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, const lapack_complex_double *a);
void LAPACKE_ztf_trans(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, const lapack_complex_double *in, lapack_complex_double *out);
armpl_int_t LAPACKE_ztp_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const lapack_complex_double *ap);
void LAPACKE_ztp_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const lapack_complex_double *in, lapack_complex_double *out);
armpl_int_t LAPACKE_ztr_nancheck(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
void LAPACKE_ztr_trans(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);
armpl_int_t LAPACKE_ztz_nancheck(armpl_int_t matrix_layout, char direct, char uplo, char diag, armpl_int_t m, armpl_int_t n, const lapack_complex_double *a, armpl_int_t lda);
void LAPACKE_ztz_trans(armpl_int_t matrix_layout, char direct, char uplo, char diag, armpl_int_t m, armpl_int_t n, const lapack_complex_double *in, armpl_int_t ldin, lapack_complex_double *out, armpl_int_t ldout);


#include "armpl_interleave_batch.h"
#include "xblas.h"

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif  /* !defined(_ARMPL_H) */

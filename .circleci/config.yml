version: 2.1

commands:
  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            (mkdir -p deps; cd deps; git clone https://github.com/RedisLabsModules/readies.git)
            ./deps/readies/bin/getpy3

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  install-prerequisites:
    steps:
      - setup-automation
      - run:
          name: System setup
          command: ./sbin/system-setup.py

  build-steps:
    steps:
      - checkout-all
      - restore_cache: # Download and cache dependencies
          keys:
          - v2-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-
      - install-prerequisites
      - run:
          name: Check format
          command: bash -l -c "make check-format"
      - run:
          name: Build
          command: bash -l -c "make build"
      - run:
          name: Unit test
          command: bash -l -c "make unit_test"
      - run:
          name: Valgrind test
          command: bash -l -c "make VG=1 build unit_test"
      - run:
          name: Benchmark
          command: bash -l -c "make benchmark"
      - run:
          name: Build Python bindings
          command: bash -l -c "make pybind"
      - run:
          name: Flow tests
          command: bash -l -c "make flow_test"
      - save_cache:
          paths:
            - ./.tox
            - ~/.cache/pip
            - ~/.cache/pypoetry
          key: v2-dependencies-{{ checksum "pyproject.toml" }}

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build-ubuntu:
    resource_class: large
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bullseye
#     machine:
#       enabled: true
#       image: ubuntu-2004:202010-01
#       resource_class: xlarge
    steps:
      - build-steps

  sanitize:
    docker:
      - image: redisfab/clang:13-x64-bullseye
    parameters:
      san-type:
        type: string
    steps:
      - checkout-all
      - run:
          name: Run & build tests
          command: bash -l -c "make SAN=<<parameters.san-type>> build unit_test"

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2

  default_flow:
    jobs:
      - build-ubuntu:
          <<: *on-any-branch
      - sanitize:
          name: sanitize-<< matrix.san-type >>
          matrix:
            parameters:
              san-type: [address, memory]
          <<: *on-any-branch

version: 2.1

commands:
  abort_for_docs:
    steps:
      - run:
          name: Avoid tests for docs
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required"
              circleci step halt
            fi

  abort_for_noci:
    steps:
      - run:
          name: Ignore CI for specific branches
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            (mkdir -p deps; cd deps; git clone https://github.com/RedisLabsModules/readies.git)
            ./deps/readies/bin/getpy3

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  install-prerequisites:
    steps:
      - setup-automation
      - run:
          name: System setup
          command: ./sbin/system-setup.py

  setup-ubuntu:
    steps:
      - run:
          name: basic install
          command: |
            apt-get update --fix-missing
            apt-get install -y git

  setup-ubuntu-sudo:
    steps:
      - run:
          name: basic install
          command: |
            sudo apt-get update --fix-missing
            sudo apt-get install -y git

  setup-centos:
    steps:
      - run:
          name: basic install
          command: |
            yum install -y git

  tiny-build-steps:
    steps:
      - abort_for_docs
      - abort_for_noci
      - checkout-all
      - install-prerequisites
      - run:
          name: Build
          command: bash -l -c "make build"
      - run:
          name: Unit test
          command: bash -l -c "make unit_test"
      - run:
          name: Valgrind test
          command: bash -l -c "make VG=1 build unit_test"

  build-steps:
    steps:
      - abort_for_docs
      - abort_for_noci
      - checkout-all
      # restore_cache: # Download and cache dependencies
      #   keys:
      #   - v2-dependencies-{{ checksum "pyproject.toml" }}-{{ .Environment.CIRCLE_STAGE }}
      #   # fallback to using the latest cache if no exact match is found
      #   - v2-dependencies-
      - install-prerequisites
      - run:
          name: Check format
          command: bash -l -c "make check-format"
      - run:
          name: Build
          command: bash -l -c "make build"
      - run:
          name: Unit test
          command: bash -l -c "make unit_test"
      - run:
          name: Valgrind test
          command: bash -l -c "make VG=1 build unit_test"
      - run:
          name: Build Python bindings
          command: bash -l -c "make pybind"
      - run:
          name: Flow tests
          command: |
            python3 -m pip install -r sbin/requirements.txt
            python3 -m tox -e flowenv
      - save_cache:
          paths:
            - ./.tox
            - ~/.cache/pip
            - ~/.cache/pypoetry
          key: v2-dependencies-{{ checksum "pyproject.toml" }}-{{ .Environment.CIRCLE_STAGE }}

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build-focal:
    resource_class: large
    docker:
      - image: ubuntu:focal
#     machine:
#       enabled: true
#       image: ubuntu-2004:202010-01
#       resource_class: xlarge
    steps:
      - setup-ubuntu
      - build-steps

  build-bionic:
    resource_class: large
    docker:
      - image: ubuntu:bionic
    steps:
      - setup-ubuntu
      - tiny-build-steps

  build-xenial:
    resource_class: large
    docker:
      - image: ubuntu:xenial
    steps:
      - setup-ubuntu
      - tiny-build-steps

  build-centos7:
    resource_class: large
    docker:
      - image: centos:centos7
    steps:
      - setup-centos
      - tiny-build-steps

  build-rocky8:
    resource_class: large
    docker:
      - image: rockylinux:8
    steps:
      - setup-centos
      - tiny-build-steps

  build-arm:
    resource_class: arm.large
    machine:
      image: ubuntu-2004:current
    steps:
      - setup-ubuntu-sudo
      - tiny-build-steps

  build-macos:
      macos:
        xcode: 11.7.0
      steps:
       - abort_for_docs
       - abort_for_noci
       - checkout-all
       - run:
          name: get conda
          command: |
            brew install wget
            wget https://repo.anaconda.com/archive/Anaconda3-2021.11-MacOSX-x86_64.sh -O ~/anaconda.sh
            bash ~/anaconda.sh -b -p $HOME/anaconda
            source ~/anaconda/bin/activate
            conda init zsh
            source ~/.zshrc
            conda env create -f ./conda/macos.yml
       - run:
          name: build
          command: |
            source ~/.zshrc
            conda activate vecsim
            make
       - run:
          name: unit test
          command: |
            source ~/.zshrc
            conda activate vecsim
            make unit_test
       - run:
          name: flow test
          command: |
            source ~/.zshrc
            conda activate vecsim
            pip install poetry
            poetry build
            poetry install
            tox -e flowenv



  sanitize:
    docker:
      - image: redisfab/clang:13-x64-bullseye
    parameters:
      san-type:
        type: string
    steps:
      - abort_for_docs
      - abort_for_noci
      - checkout-all
      - run:
          name: Run & build tests
          command: bash -l -c "make SAN=<<parameters.san-type>> build unit_test"

  nightly_flow:
    resource_class: large
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bullseye
#     machine:
#       enabled: true
#       image: ubuntu-2004:202010-01
#       resource_class: xlarge
    steps:
      - abort_for_docs
      - abort_for_noci
      - build-steps
      - run:
          name: Build Python bindings
          command: bash -l -c "make pybind"
      - run:
          name: Download pre-generated indices
          command: wget -q -i tests/benchmark/data/hnsw_indices.txt -P tests/benchmark/data
      - run:
          name: Benchmark
          command: bash -l -c "make benchmark"
          no_output_timeout: 180m
      - run:
          name: Redis tests
          command: python3 -m tox -e modtest

  codecov:
    resource_class: large
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bullseye
    steps:
      - early_return_for_forked_pull_requests
      - abort_for_docs
      - abort_for_noci
      - checkout-all
      - install-prerequisites
      - run:
          name: Run codecov
          command: |
            make coverage
            make upload-cov

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-main: &on-main
  filters:
    branches:
      only: main
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - main
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - main
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - main
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2

  default_flow:
    jobs:
      - build-focal:
          <<: *on-any-branch
      - build-bionic:
          <<: *on-any-branch
      - build-xenial:
          <<: *on-any-branch
      - build-rocky8:
          <<: *on-any-branch
      - build-arm:
          <<: *on-any-branch
      - build-macos:
          <<: *on-any-branch
      - sanitize:
          name: sanitize-<< matrix.san-type >>
          matrix:
            parameters:
#               san-type: [address, memory]
              san-type: [address]
          <<: *on-any-branch
      - codecov:
          <<: *on-any-branch


  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
    - nightly_flow
    - sanitize:
          name: sanitize-<< matrix.san-type >>
          matrix:
            parameters:
#               san-type: [address, memory]
              san-type: [address]
